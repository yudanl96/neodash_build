{"version":3,"file":"38.bundle.js","mappings":"6idAeY,qmB,4BAAA,IAgBiD,WAyL3D,YAYC,YA0CH,SAAeA,EAAAA,EAAAA,KApDS,SAACC,EAAOC,GAAc,gCAC5CC,QAAQC,EAAAA,EAAAA,GAAeH,EAAOC,EAASG,IACvCC,YAAYC,EAAAA,EAAAA,IAAuBN,GACnCO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjCS,UAAUC,EAAAA,EAAAA,IACRV,GACA,eAAAC,IAAQ,eAAIA,EAASU,oBAAiB,eAAGV,EAASU,kBAAkBC,iBAAU,gBAC9EX,EAASG,IAEXS,iBAAkB,EAAF,MAAOC,EAAAA,EAAAA,IAAoBd,KAAWe,EAAAA,EAAAA,IAAqBf,IAC7E,IAE2B,SAACgB,GAAc,gCACxCC,cAAe,SAACb,EAASc,GAAe,wBACtCF,GAASG,EAAAA,EAAAA,IAAuBf,EAAIc,GACtC,EACAE,cAAe,SAAChB,EAASiB,GAAe,wBACtCL,GAASM,EAAAA,EAAAA,IAAuBlB,EAAIiB,GACtC,EACAE,aAAc,SAACnB,EAASoB,GAAc,wBACpCR,GAASS,EAAAA,EAAAA,IAAsBrB,EAAIoB,GACrC,EACAE,sBAAuB,SAACtB,EAASuB,EAAcC,GAAe,wBAC5DZ,GAASa,EAAAA,EAAAA,IAAyBzB,EAAIuB,EAASC,GACjD,EACAE,eAAgB,SAAC1B,EAAS2B,GAAgB,wBACxCf,GAASgB,EAAAA,EAAAA,IAAkB5B,EAAI2B,GACjC,EACAE,wBAAyB,SAACC,EAAUN,GAAe,wBACjDZ,GAASmB,EAAAA,EAAAA,IAA2BD,EAAKN,GAC3C,EACAQ,kBAAmB,SAAChC,EAASiC,EAAiBC,GAAe,wBAC3DtB,GAASuB,EAAAA,EAAAA,IAAqBnC,EAAIiC,EAAYC,GAChD,EACAE,qBAAsB,SAACpC,EAASqC,GAAc,wBAC5CzB,GAAS0B,EAAAA,EAAAA,IAAwBtC,EAAIqC,GACvC,EACAE,0BAA2B,WAAM,wBAC/B3B,GAAS4B,EAAAA,EAAAA,KAAuB,GAClC,EACAC,uBAAwB,SAACzC,GAAY,wBACnCY,GAAS8B,EAAAA,EAAAA,IAAqB1C,GAChC,EACA2C,kBAAmB,SAAC3C,EAASK,GAAkB,wBAC7CO,GAASgC,EAAAA,EAAAA,IAA0B5C,EAAIK,GACzC,EACAwC,mBAAoB,SAAC/B,EAAYgC,GAAiB,wBAChDlC,GAASmC,EAAAA,EAAAA,IAAwBjC,EAAOgC,GAC1C,EACAE,0BAA2B,SAACC,EAAQC,GAAa,+BAAAtC,GAASuC,EAAAA,EAAAA,IAA+BF,EAAQC,GAAS,EAC5G,GAEA,EA7OgB,SAAH,GAuBP,IAtBJlD,EAAE,EAAFA,GACAF,EAAM,EAANA,OACAK,EAAQ,EAARA,SACAE,EAAQ,EAARA,SACAJ,EAAU,EAAVA,WACAQ,EAAgB,EAAhBA,iBACAF,EAAiB,EAAjBA,kBACA6C,EAAe,EAAfA,gBACAC,EAAc,EAAdA,eACAd,EAAyB,EAAzBA,0BACA1B,EAAa,EAAbA,cACAM,EAAY,EAAZA,aACAO,EAAc,EAAdA,eACAV,EAAa,EAAbA,cACAM,EAAqB,EAArBA,sBACAU,EAAiB,EAAjBA,kBACAH,EAAuB,EAAvBA,wBACAO,EAAoB,EAApBA,qBACAK,EAAsB,EAAtBA,uBACAE,EAAiB,EAAjBA,kBACAK,EAAyB,EAAzBA,0BACAH,EAAkB,EAAlBA,mBAAkB,WAGlB,IAAQI,GAAR,YAAmBK,EAAAA,EAAAA,YAA8BC,EAAAA,eAAzCN,OAER,cAAwCO,EAAAA,SAAe,CAACnD,KAAU,eAA3DoD,EAAY,KAAEC,EAAe,KACpC,cAAoDF,EAAAA,UAAe,IAAM,eAAlEG,EAAkB,KAAEC,EAAqB,KAE1CC,GAAG,WAAGL,EAAAA,UAEZ,YACAM,EAAAA,EAAAA,YAAU,WAAM,sBACTH,EAUJ,eAVwB,yBACvBX,EAA0BC,GAAQ,SAACc,GAAW,WAC5C,IAAIC,GAAK,WAAGD,EAAOE,QAAQ,WAAU,WACjCD,GAAS,GAAG,0BAEdD,EAAOG,OAAOF,EAAO,IACtB,0BACDN,EAAgBK,EAClB,IAAG,YACHH,GAAsB,GAE1B,GAAG,CAAC9D,EAAOmB,QAEX,mBAAwCuC,EAAAA,UAAe,IAAM,eAAtDW,EAAY,KAAEC,EAAe,KAC9BC,GAA6B,aAAGC,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,GAASnC,EAAsB,KAAM,KACvF,eAA8CoB,EAAAA,SAAe1D,EAAO0E,kBAAgB,eAA7EA,EAAe,KAAEC,EAAkB,KAE1C,iBAAmCC,EAAAA,EAAAA,IAAc,CAC/CC,SAAU,YAA4B,IAAzBC,EAAO,EAAPA,QAASC,EAAS,EAATA,UAAS,uBAE7BA,IAAa,YACbD,GACF,KALMA,GAAO,GAAPA,QAASE,GAAK,GAALA,MAAOC,GAAM,GAANA,OAQxB,iBAAgCC,EAAAA,EAAAA,WAAS,IAAM,iBAAxCC,GAAQ,MAAEC,GAAW,MAAoB,YAChD,IAAMC,GAAqB,WAAM,uBAE3B,cAAAF,KAAQ,cAAId,IAAc,0BAC5B/B,EAAqBpC,GAAI,IAC1B,0BACDkF,IAAaD,GACf,EAEA,gBAA4BzB,EAAAA,UAC1B,cAAA1D,EAAOsF,WAAQ,mBAAgCC,IAA5BvF,EAAOsF,SAASE,UAAqB,cAAGxF,EAAOsF,SAASE,UAAO,eAAG,MACtF,iBAFMC,GAAM,MAAEC,GAAS,MAEtB,aAEF1B,EAAAA,EAAAA,YAAU,WAAM,uBACThE,EAAOqE,aAEX,eAFyB,0BACxBqB,IAAU,cAAA1F,EAAOsF,WAAQ,mBAAgCC,IAA5BvF,EAAOsF,SAASE,UAAqB,cAAGxF,EAAOsF,SAASE,UAAO,eAAG,KAEnG,GAAG,CAACxF,EAAOmB,QAAQ,aAEnB6C,EAAAA,EAAAA,YAAU,WAAM,uBACdM,EAAgBtE,EAAOqE,aACzB,GAAG,CAACrE,EAAOqE,eAAe,aAE1BL,EAAAA,EAAAA,YAAU,WAAM,uBACdW,EAAmB3E,EAAO0E,gBAC5B,GAAG,CAAC1E,EAAO0E,kBAGX,IAAMiB,IAAa,IAAJ,QACb,uBACE5B,IAAKe,GACLc,UAAU,yIAGV,gBAAC,IAAQ,CAACC,wBAAwB,OAAOC,IAAKzB,EAAc0B,QAASrB,EAAiBkB,UAAU,YAC9F,gBAAC,IAAI,CAAC7B,IAAKA,EAAK6B,UAAU,YACxB,gBAAC,IAAW,CACV1F,GAAIA,EACJmE,aAAcA,EACdhE,SAAUA,EACVI,kBAAmBA,EACnBN,WAAYA,EACZmF,SAAUtF,EAAOsF,UAAQ,cAAGtF,EAAOsF,WAAQ,cAAG,CAAC,GAC/CU,oBAAqB,SAACC,EAAMvE,GAAU,8BAAAF,EAAsBtB,EAAI+F,EAAMvE,EAAK,EAC3EqB,mBAAoB,SAAC/B,EAAOgC,GAAY,8BAAAD,EAAmB/B,EAAOgC,EAAO,EACzE1B,KAAMtB,EAAOsB,KACbf,SAAUA,EACVkF,OAAQA,GACRC,UAAWA,GACXQ,gBAAiB,WAAM,gCAAAC,EAAAA,EAAAA,IAAyBpC,EAAG,EACnD5C,MAAOnB,EAAOmB,MACdR,iBAAkBA,EAClBkB,OAAQ7B,EAAO6B,QAAM,eAAG7B,EAAO6B,SAAM,eAAG,IACxCuE,UAAWpG,EAAOoG,UAClBC,QAASrB,GACTsB,SAAUrB,GACVjE,MAAOhB,EAAOgB,MACdmE,SAAUA,GACVE,mBAAoBA,GACpBtD,wBAAyBA,EACzBG,kBAAmB,SAACC,EAAYC,GAAU,+BAAAF,EAAkBhC,EAAIiC,EAAYC,EAAK,EACjFrB,cAAe,SAACC,GAAU,+BAAAD,EAAcb,EAAIc,EAAK,EACjDY,eAAgB,SAACC,GAAW,+BAAAD,EAAe1B,EAAI2B,EAAM,EACrDS,qBAAsB,WAAM,wBAC1BgC,GAAgB,GAAM,YACtBK,EAAmB,QAAQ,YAC3BJ,EAA8BrE,GAAI,EACpC,MAKN,gBAAC,IAAQ,CAAC2F,wBAAwB,OAAOC,GAAIzB,EAAc0B,QAASrB,GAClE,gBAAC,IAAI,CAACkB,UAAU,YACd,gBAAC,IAAe,CACdlF,WAAYD,EAAkBC,WAC9B6F,SAAUrG,EACVmE,aAAcA,EACdlD,MAAOnB,EAAOmB,MACdZ,SAAUA,EACVoD,aAAcA,EACdqB,MAAOhF,EAAOgF,MACdC,OAAQjF,EAAOiF,OACfqB,SAAUrB,GACVpD,OAAQ7B,EAAO6B,OACf2E,OAAQxG,EAAOwG,OACflF,KAAMtB,EAAOsB,KACb6D,SAAUA,GACVhF,WAAYA,EACZM,kBAAmBA,EACnB4E,mBAAoBA,GACpBK,UAAWA,GACXe,eAAgBzG,EAAOsF,SACvBoB,mBAAoB1G,EAAO2G,qBAC3BzF,cAAe,SAACC,GAAU,+BAAAD,EAAchB,EAAIiB,EAAK,EACjD0B,kBAAmB,SAACtC,GAAa,+BAAAsC,EAAkB3C,EAAIK,EAAQ,EAC/DiB,sBAAuB,SAACC,EAASC,GAAU,+BAAAF,EAAsBtB,EAAIuB,EAASC,EAAK,EACnFL,aAAc,SAACC,GAAS,+BAAAD,EAAanB,EAAIoB,EAAI,EAC7CmB,0BAA2B,WAAM,+BAAAA,GAA0B,EAC3Da,gBAAiB,WAAM,+BAAAA,EAAgBpD,EAAE,EACzCqD,eAAgB,WAAM,+BAAAA,EAAerD,EAAE,EACvCoC,qBAAsB,WAAM,wBAC1BgC,GAAgB,GAAO,YACvBK,EAAmB,QAAQ,YAC3BJ,EAA8BrE,GAAI,EACpC,EACAyC,uBAAwB,WAAM,+BAAAA,EAAuBzC,EAAE,QAUjE,OADA,YACIiF,IAAU,2BAEV,gBAAC,IAAM,CAAC5C,KAAM4C,GAAU,kBAAgB,oBAAoBS,UAAU,cACpE,gBAAC,IAAOgB,QAAO,CAACC,MAAO,CAAE5B,OAAQ6B,SAASC,gBAAgBC,aAAe,MAAQrB,OAGtF,2BACMA,GACT,I,olDCzMY,oCATZ,WAuBE,WAEiC,WAInC,SAAe9F,EAAAA,EAAAA,KAJS,WAAO,8BAAC,KAEL,WAAO,8BAAC,IAEnC,EA1BsB,SAAH,GAA4B,IAAtBoH,EAAe,EAAfA,gBACvB,OADsC,sBAEpC,2BACE,gBAAC,IAAI,CAACrB,UAAU,+BACd,gBAAC,IAAW,CAACiB,MAAO,CAAE5B,OAAQ,UAC5B,gBAAC,IAAU,CACT,aAAW,aACXW,UAAU,WACVsB,QAAS,WAAM,sBACbD,GACF,EACAE,KAAK,QACLC,UAAQ,GAER,gBAAC,IAAsB,SAMnC,G,mvCCdY,gC,iBAAA,eAf2D,WAEhE,IAAMnH,EAAiB,SAACH,EAAYI,GAAY,WACrD,IAAQQ,GAAR,WAAuBZ,EAAMuH,UAAU/B,UAA/B5E,WACR,OADgD,WACzCZ,EAAMuH,UAAUC,MAAM5G,GAAY6G,QAAQC,MAAK,SAACC,GAAM,6BAAAA,EAAEvH,KAAOA,CAAC,GACzE,C,klBCUY,oCAZL,IAAMwH,GAAmB,WAAGC,EAAAA,GAAOC,IAAG,sB,2uDCYjC,oCAJoB,WAuEhC,QArE8B,SAAH,GAQrB,IAPJtE,EAAe,EAAfA,gBACAhB,EAAoB,EAApBA,qBACA+C,EAAkB,EAAlBA,mBACAF,EAAQ,EAARA,SACA0C,EAAiB,EAAjBA,kBACApF,EAAyB,EAAzBA,0BACAc,EAAc,EAAdA,eAAc,WAEd,IAAMuE,GAAkB,IAAJ,OAClB,gBAACC,EAAA,EAAU,CAAC,aAAW,WAAWb,QAAS7B,GACzC,gBAAC2C,EAAA,EAAU,QAITC,GAAoB,IAAJ,OACpB,gBAACF,EAAA,EAAU,CAAC,aAAW,cAAcb,QAAS7B,GAC5C,gBAAC6C,EAAA,EAAU,QAIf,OAFE,WAGA,gBAACC,EAAA,EAAU,CACTC,OACE,uBAAKvB,MAAO,CAAEwB,UAAW,OAAQC,cAAe,QAC9C,gBAACP,EAAA,EAAU,CAACQ,OAAK,EAACpB,KAAK,SAAS,aAAY,cAAevB,UAAU,oCACnE,gBAAC4C,EAAA,EAAQ,CAAC,aAAY,iBAExB,gBAACC,EAAA,EAAO,CAACzH,MAAM,OAAO,aAAW,OAAO0H,oBAAkB,GACxD,gBAACX,EAAA,EAAU,CAAC,aAAW,OAAOb,QAASzE,EAA2B8F,OAAK,EAACpB,KAAK,UAC3E,gBAAC,IAA6B,CAAC,aAAY,WAG/C,gBAACsB,EAAA,EAAO,CAACzH,MAAM,SAAS,aAAW,SAAS0H,oBAAkB,GAC5D,gBAACX,EAAA,EAAU,CAAClB,MAAO,CAAE8B,MAAO,OAAS,aAAW,SAASzB,QAAS5D,EAAiBiF,OAAK,EAACpB,KAAK,UAC5F,gBAAC,IAAgB,CAAC,aAAY,aAGlC,gBAACsB,EAAA,EAAO,CAACzH,MAAM,QAAQ,aAAW,QAAQ0H,oBAAkB,GAC1D,gBAACX,EAAA,EAAU,CAAClB,MAAO,CAAE8B,MAAO,SAAW,aAAW,QAAQzB,QAAS3D,EAAgBgF,OAAK,EAACpB,KAAK,UAC5F,gBAAC,IAA4B,CAAC,aAAY,aAKlDyB,OACE,gCACGf,GAAiB,cAAG1C,GAAQ,cAAG8C,IAAgB,cAAGH,KAAc,cAAG,kCACpE,gBAACW,EAAA,EAAO,CAACzH,MAAM,MAAM,aAAW,MAAM0H,oBAAkB,GACtD,gBAACX,EAAA,EAAU,CACT,aAAW,MACXb,QAAS,SAAC2B,GAAM,sBACdA,EAAEC,iBAAiB,WACnBxG,GACF,EACAiG,OAAK,EACLpB,KAAK,UAEL,gBAAC,IAAmB,SAK5BnG,MAAM,GACN+H,UAAU,IAGhB,E,4xRCjEY,oCAL8C,WAqK1D,QAnK+B,SAAH,GActB,IAbJrI,EAAU,EAAVA,WACA6F,EAAQ,EAARA,SACApF,EAAK,EAALA,MACAZ,EAAQ,EAARA,SACAoD,EAAY,EAAZA,aACA8C,EAAc,EAAdA,eACAnF,EAAI,EAAJA,KACAnB,EAAU,EAAVA,WACAe,EAAa,EAAbA,cACAM,EAAqB,EAArBA,sBACAH,EAAY,EAAZA,aACA2H,EAAa,EAAbA,cACAnG,EAAiB,EAAjBA,kBAAiB,WAGjB,kBAAkCa,EAAAA,SAAevC,IAAM,eAAhD8H,EAAS,KAAEC,EAAY,KACxBC,GAAoB,YAAG3E,EAAAA,EAAAA,aAAYC,IAASvD,EAAe,KAAM,KAEvE,cAAwCwC,EAAAA,SAAenD,IAAS,eAAzD6I,EAAY,KAAEC,EAAe,KAC9BC,GAAuB,YAAG9E,EAAAA,EAAAA,aAAYC,IAAS5B,EAAmB,KAAM,KAAI,YAElFmB,EAAAA,EAAAA,YAAU,WAAM,sBAEV7C,IAAU8H,GAAW,yBACvBC,EAAa/H,IACd,aACH,GAAG,CAACA,IAEJ,IAAMoI,GAAW,YAAGC,EAAAA,EAAAA,IAAerJ,IAC7BH,GAAM,WAAGuJ,EAAYjI,IACrBmI,GAAiB,YAAG,eAAAzJ,aAAM,EAANA,EAAQ0J,qBAAiB,cAAI,CAAC,IAUxD,SAASC,EAAkBjI,GAAO,uBAChCyH,EAAqBzH,GAAO,YAC5BwH,EAAaxH,EACf,CA6BA,IAAMkI,GAA4B,IAAJ,QAC5B,gCACE,gBAAC,IAAsB,CACrBlI,MAAOuH,EACP5I,UAAU,EACVwJ,UAAU,eAAA7J,aAAM,EAANA,EAAQ8J,aAAS,cAAI,WAC/BC,UAAW,WAAM,uBACf7I,EAAc+H,GAAW,YACzBD,GACF,EACAgB,SAAU,SAACtI,GAAU,uBACnBiI,EAAkBjI,EACpB,EACAuI,YAAW,yBAEb,uBAAKpD,MAAOqD,EAAAA,IAA0C,eAAAlK,aAAM,EAANA,EAAQmK,cAAU,cAAI,QAIhF,OAFE,YAGA,gBAACC,EAAA,EAAW,CAACxE,UAAU,UACrB,gBAACyE,EAAA,EAAQ,CACP,YAAU,gBACVnK,GAAG,OACHoK,MAAM,OACNhJ,KAAK,SACLiJ,YAAa,CACXP,SAAU,SAACQ,GACT,6CAAAA,IAAQ,cAAInJ,EAAaoJ,OAAOC,KAAKnB,GAAa/B,MAAK,SAACxF,GAAQ,+BAAAuH,EAAYvH,GAAKsI,QAAUE,EAAS9I,KAAI,KAAE,EAC5GiJ,QAASF,OAAOC,KAAKnB,GAAaqB,KAAI,SAACC,GAAY,gCACjDP,OAAO,cAAAtK,IAAM,cAAIuJ,EAAYsB,GAAQP,QACrC5I,OAAO,cAAA1B,IAAM,cAAIuJ,EAAYsB,GAAQP,QACvC,IACA5I,MAAO,CACL4I,OAAO,gBAAAtK,aAAM,EAANA,EAAQsK,SAAK,eAAI,KACxB5I,OAAO,gBAAA1B,aAAM,EAANA,EAAQsK,SAAK,eAAI,MAE1BQ,iBAAkBhE,SAASiE,cAAc,aAE3CC,OAAK,EACLnE,MAAO,CAAEoE,WAAY,MAAOC,YAAa,OAAQlG,MAAO,MAAOmG,SAAU,QAASC,QAAS,kBAGzD7F,OAAnCvF,aAAM,EAANA,EAAQqL,0BAAwC,IAAJ,WAC3C,gBAAChB,EAAA,EAAQ,CACPnK,GAAG,mBACHoK,MAAM,WACNL,YAAY,QACZ3I,KAAK,SACLiJ,YAAa,CACXP,SAAU,SAACQ,GAAa,wBACtB,eAAAA,IAAQ,eAAInB,EAAgBmB,EAAS9I,QAAO,YAC5C,eAAA8I,IAAQ,eAAIlB,EAAwBkB,EAAS9I,OAC/C,EACAiJ,QAAShH,EAAaiH,KAAI,SAACrK,GAAc,gCACvC+J,MAAO/J,EACPmB,MAAOnB,EACT,IACAmB,MAAO,CAAE4I,MAAOlB,EAAc1H,MAAO0H,GACrC0B,iBAAkBhE,SAASiE,cAAc,aAE3CC,OAAK,EACLnE,MAAO,CAAEoE,WAAY,MAAOC,YAAa,OAAQlG,MAAO,MAAOmG,SAAU,QAASC,QAAS,oBAC3F,eAEF,kCAGF,2BACA,4BAEC,eAAApL,IAAM,eAAIA,EAAO0J,oBAAiB,eACjC,gBAACD,EAAiB,CAChBjI,sBAAuBA,EACvB8D,UAAUgG,EAAAA,EAAAA,GAAS,CAAEnB,WAAYnK,EAAOmK,WAAYL,UAAW9J,EAAO8J,WAAarD,GACnFlG,SAAUA,EACVY,MAAOA,EACPD,cAAeA,EACf6I,UAAW,WAAM,wBACf7I,EAAc+H,GAAW,YACzBD,GACF,MACA,eAEF,4BA5H4B,uBAE9ByB,OAAOC,KAAKa,EAAAA,IAAoCC,QAC9C,SAACvF,GAAS,4CAAA9F,EAAW8F,KAAK,cAAIsF,EAAAA,GAAmCtF,GAAI,IACrEwF,OAAS,GAwHqB,eA/GpC,WAAsC,WACpC,IAAMC,GAAO,IAAJ,QACP,gCACGjB,OAAOC,KAAKa,EAAAA,IAAoCX,KAAI,SAAC3E,GAAS,WAC7D,IAAM0F,GAAS,YAAGxL,EAAW8F,IAAK,cAAGsF,EAAAA,GAAmCtF,KAAK,cAAG,KAChF,OADmF,YAC5E0F,GAAa,IAAJ,UACd,gBAACA,EAAS,CACRjL,WAAYA,EACZ6F,SAAUA,EACVqF,WAAYtK,EACZnB,WAAYA,EACZ4J,UAAW,WAAM,uBACf7I,EAAc+H,GAAW,YACzBD,GACF,EACA6C,YAAa5C,EACbU,kBAAmBA,MACnB,cAEF,iCAEJ,MAGJ,OADE,YACK+B,CACT,CAsFuCI,KAA4B,eAAGlC,OAIxE,E,wjEC9JY,oCATiD,WAsG7D,QApGwB,SAAH,GA6Bf,IA5BJvF,EAAY,EAAZA,aACA3D,EAAU,EAAVA,WACA6F,EAAQ,EAARA,SACApF,EAAK,EAALA,MACAZ,EAAQ,EAARA,SACAoD,EAAY,EAAZA,aACAqB,EAAK,EAALA,MACAC,EAAM,EAANA,OACA3D,EAAI,EAAJA,KACAmF,EAAc,EAAdA,eACAC,EAAkB,EAAlBA,mBACA7E,EAAM,EAANA,OACA2E,EAAM,EAANA,OACAF,EAAQ,EAARA,SACAnG,EAAU,EAAVA,WACAe,EAAa,EAAbA,cACA2B,EAAiB,EAAjBA,kBACAS,EAAe,EAAfA,gBACAC,EAAc,EAAdA,eACA/B,EAAqB,EAArBA,sBACAc,EAAoB,EAApBA,qBACAjB,EAAY,EAAZA,aACAqE,EAAS,EAATA,UACAjD,EAAyB,EAAzBA,0BACAE,EAAsB,EAAtBA,uBACAlC,EAAiB,EAAjBA,kBACA0E,EAAQ,EAARA,SACAE,EAAkB,EAAlBA,mBAAkB,WAElB,IAAM0G,GAAY,WAAGzF,EAAW0F,EAAAA,GAAqB,IAE/CC,GAAsB,IAAJ,OACtB,gBAAC,EAAqB,CACpB9G,SAAUA,EACVE,mBAAoBA,EACpB/B,gBAAiBA,EACjBC,eAAgBA,EAChBd,0BAA2BA,EAC3BoF,kBAAmBpH,EAAkBoH,kBACrCvF,qBAAsB,SAACuG,GAAM,sBAC3BnD,OAAqCH,IAA3BkB,EAAejB,SAAqB,cAAGiB,EAAejB,UAAO,eAAG,IAAM,WAChFlD,EAAqBuG,EACvB,KAKEqD,GAAmB,WAAG7H,GAAgB,IAAJ,UACtC,gBAAC,EAAsB,CACrB3D,WAAYA,EACZ6F,SAAUA,EACVpF,MAAOA,EACPZ,SAAUA,EACVkG,eAAgBA,EAChBzB,MAAOA,EACPC,OAAQA,EACR3D,KAAMA,EACNnB,WAAYA,EACZwD,aAAcA,EACdd,kBAAmBA,EACnB3B,cAAeA,EACfM,sBAAuBA,EACvBH,aAAcA,EACd2H,cAAe1G,MACS,cAE1B,gBAAC8H,EAAA,EAAW,CAACxE,UAAU,aAGnBuG,GAAkB,WAAG9H,GAAgB,IAAJ,UACrC,gBAAC,IAAqB,CACpB/C,KAAMA,EACNO,OAAQA,EACR2E,OAAQA,EACRrG,WAAYA,EACZsG,eAAgBA,EAChBC,mBAAoBA,EACpB/D,uBAAwBA,EACxBnB,sBAAuBA,MACA,cAEzB,8BAGF,OAFE,WAGA,uBACEoE,UAAS,qFACPT,GAAQ,cAAG,aAAU,cAAG,IAAE,gCAG3B8G,EACD,gBAAC,IAAmB,CAACpF,MAAO,CAAE5B,OAAQ8G,GAAgBnG,UAAU,WAC7DsG,EACAC,GAIT,C,64NC3FY,oCAIsD,WA+MlE,QA7M0B,SAAH,GAcjB,IAbJnL,EAAK,EAALA,MACAoL,EAAW,EAAXA,YACA/L,EAAQ,EAARA,SACAU,EAAa,EAAbA,cACA8G,EAAiB,EAAjBA,kBACAwE,EAAoB,EAApBA,qBACAC,EAAoB,EAApBA,qBACAhK,EAAoB,EAApBA,qBACAiK,EAAmB,EAAnBA,oBACArG,EAAe,EAAfA,gBACAb,EAAkB,EAAlBA,mBACAF,EAAQ,EAARA,SACAqH,EAAU,EAAVA,WAAU,WAEV,kBAAwB9I,EAAAA,SAAe1C,IAAM,eAAtCyL,EAAI,KAAEC,EAAO,KACpB,cAAoChJ,EAAAA,SAAe1C,IAAM,eAAlD2L,EAAU,KAAEC,EAAa,KAChC,cAA8BlJ,EAAAA,UAAe,IAAM,eAA5CmJ,EAAO,KAAEC,EAAU,KAC1B,cAAwDpJ,EAAAA,UAAe,IAAM,eAAtEqJ,EAAoB,KAAEC,EAAuB,KAS9CC,IAAoB,YAAGzI,EAAAA,EAAAA,aAAYC,IAAS1D,EAAe,KAAM,KAAI,YAE3EiD,EAAAA,EAAAA,YAAU,WAAM,WACd,IAV6BkJ,EAAGC,EAC5BC,EASAC,GAAW,WAVcH,EAUW,GAAD,OAAIlM,GAVXmM,EAUoBX,EAVjB,WAChB,WACnBY,GAASE,EAAAA,EAAAA,IAA2BJ,EAAGC,GAAG,WACnCC,GAOyD,YAC3DP,EAEJ,eAFa,0BACZD,EAAcS,GAElB,GAAG,CAACR,EAASL,IAAa,aAE1BxI,EAAAA,EAAAA,YAAU,WAAM,uBAEVyI,IAASzL,GAAO,0BAClB0L,EAAQ1L,IACT,aACH,GAAG,CAACA,IAEJ,IAAMuM,IAAK,aAAGC,EAAAA,EAAAA,GAAY,CACxBC,WAAY,CACVC,WAAY,uCACZC,YAAa,CAAEhF,MAAO,0CAExBiF,QAAS,CACPnB,KAAM,CACJoB,QAAS,oCAEXjF,OAAQ,CACNkF,SAAU,6CAKVC,IAAa,IAAJ,QACb,gBAACC,EAAA,EAAa,CAACT,MAAOA,IACpB,yBAAO1G,MAAO,CAAE7B,MAAO,SACrB,6BACE,0BACG3E,GAAY,IAAJ,UACP,0BACE,gBAAC0H,EAAA,EAAU,CACTnC,UAAU,0CACV2C,OAAK,EACLpB,KAAK,SACL,aAAY,OACZD,QAAS,WAAM,UAAC,GAEhB,gBAACsB,EAAA,EAAQ,UAER,cAEL,kCAEF,sBAAI3B,MAAO,CAAE7B,MAAO,SAClB,gBAACiJ,EAAA,EAAS,CACR/N,GAAG,oBACHgO,QAAS,WAAM,uBACbpB,GAAW,EACb,EACAqB,OAAQ,WAAM,uBACZrB,GAAW,EACb,EACAlH,UAAW,qBACX0E,MAAM,GACNwD,UAAWzN,EACX4J,YAAY,iBACZmE,WAAS,EACTC,QAAS,EACT3M,MAAOmL,GAAO,cAAGJ,IAAI,cAAkB,MAAfE,GAAkB,cAAGA,IAAU,cAAG,KAC1D3C,SAAU,SAACsE,GAAU,uBACnB5B,EAAQ4B,EAAMC,OAAO7M,OAAO,YAC5BuL,GAAqBqB,EAAMC,OAAO7M,MACpC,EACAyF,KAAM,QACNN,MAAO,CAAE2H,WAAY,kBACrBC,QAAS,WACTC,GAAI,CACF,qCAAsC,CACpCC,oBAAqB,oBAWjCC,IAAkB,YAAG,cAAAxC,IAAW,cAAIA,EAAYX,OAAS,IAGzDoD,IAAkB,IAAJ,QAClB,gBAACpG,EAAA,EAAO,CAACzH,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAACX,EAAA,EAAU,CAAC,aAAW,WAAWb,QAAS5E,EAAsBiG,OAAK,EAACpB,KAAK,UAC1E,gBAAC,IAA2B,SAK5B2H,IAAiB,IAAJ,QACjB,gBAACrG,EAAA,EAAO,CAACzH,MAAM,UAAU,aAAW,UAAU0H,oBAAkB,GAC9D,gBAACX,EAAA,EAAU,CAAC,aAAW,UAAUb,QAASqF,EAAqBhE,OAAK,EAACpB,KAAK,UACxE,gBAAC,IAAoB,SAKrBW,IAAkB,IAAJ,QAClB,gBAACW,EAAA,EAAO,CAACzH,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAACX,EAAA,EAAU,CAAC,aAAW,WAAWb,QAAS7B,EAAoBkD,OAAK,EAACpB,KAAK,UACxE,gBAACa,EAAA,EAAU,SAKXC,IAAoB,IAAJ,QACpB,gBAACF,EAAA,EAAU,CAAC,aAAW,cAAcb,QAAS7B,EAAoBkD,OAAK,EAACpB,KAAK,UAC3E,gBAACe,EAAA,EAAU,QAIT6G,IAAuB,IAAJ,QACvB,gBAACtG,EAAA,EAAO,CAACzH,MAAM,oBAAoB,aAAW,WAAW0H,oBAAkB,GACzE,gBAACX,EAAA,EAAU,CAACb,QAAShB,EAAiB,aAAW,eAAeqC,OAAK,EAACpB,KAAK,UACzE,gBAAC,IAAe,SAKhB6H,IAAqB,IAAJ,QACrB,gBAACvG,EAAA,EAAO,CAACzH,MAAM,UAAU,aAAW,UAAU0H,oBAAkB,GAC9D,gBAACX,EAAA,EAAU,CAACb,QAAS,WAAM,sBAAAgG,EAAA,MAAAF,GAAwB,EAAI,EAAG,aAAW,UAAUzE,OAAK,EAACpB,KAAK,UACxF,gBAAC,IAA4B,SAKnC,OAFE,YAGA,gCACE,gBAAC8H,EAAA,EAAM,CACL9D,SAAU,KACV5I,KAAMwK,EACNmC,QAAS,WAAM,sBAAAhC,EAAA,MAAAF,GAAwB,EAAK,EAC5C,kBAAgB,qBAEhB,gBAACmC,EAAA,EAAW,CAACjP,GAAG,qBACbc,EACD,gBAAC+G,EAAA,EAAU,CACTb,QAAS,WAAM,uBAAAgG,EAAA,MAAAF,GAAwB,EAAK,EAC5CnG,MAAO,CAAEuI,QAAS,MAAOC,MAAO,SAChC,aAAY,aACZ9G,OAAK,GAEL,gBAAC,IAAgB,QAGrB,gBAAC+G,EAAA,EAAa,CAACzI,MAAO,CAAE0I,SAAU,UAChC,2BACE,wBAAMhB,OAAO,WAAW,IAAC,gBAAC,IAAa,CAACiB,QAAS,CAACC,EAAAA,GAAMC,SAAUtD,OAIxE,gBAACjE,EAAA,EAAU,CACTtB,MAAO,CAAE5B,OAAQ,QACjB2D,OACE,gCACGyD,GAAoB,cAAG0C,KAAmB,cAAG,kCAC7ClH,GAAiB,cAAG1C,GAAQ,cAAG8C,KAAgB,cAAGH,MAAc,cAAG,kCACnE8G,IAAkB,cAAGI,KAAiB,cAAG,kCACzC1C,GAAoB,eAAGwC,KAAa,eAAG,kCACvCzO,GAAQ,eAAGwO,KAAc,eAAG,mCAGjC7N,MAAO+M,KAIf,E,4oUCjNY,oCAVuC,WA8InD,QA5I0B,SAAH,GASjB,IARJlM,EAAM,EAANA,OACAyD,EAAQ,EAARA,SACAc,EAAS,EAATA,UACA9E,EAAI,EAAJA,KACAnB,EAAU,EAAVA,WACAwP,EAAsB,EAAtBA,uBACAzN,EAAiB,EAAjBA,kBACAzB,EAAiB,EAAjBA,kBAAiB,WAKjB,IAAM8I,GAAW,YAAGC,EAAAA,EAAAA,IAAerJ,IAC7ByP,GAAgB,WAAGrG,EAAYjI,GAAM8E,WACrCyJ,GAAW,WAAGD,GAAgB,cAAGnF,OAAOC,KAAKkF,KAAiB,cAAG,KACjEE,GAAe,WAAG,cAAAxK,IAAQ,cAAIA,EAASwK,kBAAe,cAAGxK,EAASwK,kBAAe,cAAG,YACpFC,GAAc,WAAG,cAAAzK,IAAQ,cAAIA,EAASyK,iBAAc,cAAGzK,EAASyK,iBAAc,eAAG,IAC/EC,GAAR,WAA8BzG,EAAYjI,IAAlC0O,kBACR,OADgD,WAC5C,eAACnO,IAAM,cAAqB,GAAjBA,EAAO4J,UAAW,cAAIsE,IAAgB,yBAC5C,8BACR,yBAEC,gBAACE,EAAA,EAAW,CACVpJ,MAAO,CACLqJ,SAAU,WACVC,YAAa,OACbC,UAAW,SACX9H,cAAe,SAEjB+H,gBAAc,GAEbR,EAAYjF,KAAI,SAACzI,EAAY+B,GAAU,WACtC,IAAMoM,GAAoB,aAAIV,EAAiBzN,GAAYoO,UAG3D,GADA,YACIX,EAAiBzN,GAAYb,MAAQkP,EAAAA,GAAgBC,gBAAiB,CAExE,GAFwE,0BAEpE,cAAAd,IAAsB,cAAIW,GAAsB,eAClD,IAAMI,GAAW,YAAGC,EAAAA,EAAwBb,IAAgB,eACxDa,EAAAA,EAAwBb,GAAiBrE,SAAM,eAC/C,IACEmF,GAAe,YAAG/O,EAAO+I,KAAI,SAACxI,EAAOyO,GAAM,WAG/C,IAAMC,GAAS,YAAG1O,EAAM,IAGlB2O,GAAoB,YAAG3O,EAAM4O,MAAM,IACnCC,GAAc,IAAJ,SAAIF,GAAoB,gBAAG,OAAIA,GAAsBG,SAAM,eAAG,KAAIC,OAAO,CACvF,UACA,OACA,gBAEIxI,GAAK,YACT,eAAA+H,EAAc,IAAC,gBAAKV,IAAiB,eACjCW,EAAAA,EAAwBb,GAAiBe,EAAIH,KAAY,eACzD,cACAU,GAAU,YACc,SAA5B3Q,EAAkB8M,OAAgB,eAAG,8CAA2C,eAAG,uBACrF,OAD0G,YAExG,gBAAC8D,EAAA,EAAW,CAACrP,IAAK8O,EAAW3J,KAAM,QAASsH,QAAQ,YAClD,gBAAC6C,EAAA,EAAU,CAACpR,GAAI4Q,EAAWjK,MAAO,CAAE8B,MAAOyI,IACxCN,GAEH,gBAACS,EAAA,EAAM,CACLC,QAASV,EACT5Q,GAAI4Q,EACJlL,UAAW,eACXiB,MAAO,CAAE4K,gBAAiB9I,EAAOwH,YAAa,GAAIZ,SAAU,GAAIrE,YAAa,GAC7ElB,SAAU,SAACnB,GAAM,8BAAA3G,EAAkB4O,EAAWjI,EAAE0F,OAAO7M,MAAK,EAC5DA,OAAO,eAAA0E,IAAS,eAAIA,EAAU0K,KAAU,eAAG1K,EAAU0K,KAAU,eAAG,OAGjE,eAAAG,EAAWxF,SAAM,eAChBwF,EAAWrG,OAAG,eACdqG,EAAWrG,KAAI,SAACxI,GACd,OADwB,uBAEtB,gBAACsP,EAAA,EAAQ,CAAC1P,IAAKI,EAAOV,MAAOU,GAC1BA,EAGP,OAIV,KACA,OADG,YACIwO,CACT,CAAC,aACH,MAAC,cAED,GADA,YAEE,eAAAhB,EAAiBzN,GAAYb,MAAQkP,EAAAA,GAAgBmB,OAAI,eACzD/B,EAAiBzN,GAAYb,MAAQkP,EAAAA,GAAgBoB,UAAM,eAC3DhC,EAAiBzN,GAAYb,MAAQkP,EAAAA,GAAgBqB,sBAAkB,eACvEjC,EAAiBzN,GAAYb,MAAQkP,EAAAA,GAAgBsB,MACrD,CACA,GADA,2BACI,eAAAxB,IAAoB,eAAIX,GAAwB,gBAClD,IAAMoC,GAAY,YAAGlQ,GAAM,gBAAG,OAAIA,GAAQqP,SAAM,eAAG,KAE7Cc,GAAc,YAAG1B,GAAoB,eAAGyB,IAAY,eAAGA,EAAaZ,OAAO,CAAC,aAClF,OAD6F,YAE3F,gBAACE,EAAA,EAAW,CAACrP,IAAKkC,EAAOiD,KAAM,SAC7B,gBAACkD,EAAA,EAAQ,CACPnK,GAAIiC,EACJmI,MAAOsF,EAAiBzN,GAAYmI,MACpChJ,KAAK,SACLiJ,YAAa,CACXP,SAAU,SAACQ,GACR,6CAAAA,IAAQ,eAAIoF,EAAiBzN,GAAY8P,WAAQ,eAC9C/P,EACEC,EACAqI,EAASI,KAAI,SAACsH,GAAM,8BAAAA,EAAExQ,KAAI,OAC3B,eACDQ,EAAkBC,EAAYqI,EAAS9I,OAAK,EAClDiJ,QAASqH,EAAepH,KAAI,SAACC,GAAY,+BAAEP,MAAOO,EAAQnJ,MAAOmJ,EAAO,IACxEnJ,MAAOkO,EAAiBzN,GAAY8P,UAAQ,eACxC7L,EAAUjE,GAAYyI,KAAI,SAACuH,GAAS,+BAAE7H,MAAO6H,EAAKzQ,MAAOyQ,EAAI,MAAG,eAChE,CAAE7H,MAAOlE,EAAUjE,GAAaT,MAAO0E,EAAUjE,KACrDiQ,QAASxC,EAAiBzN,GAAY8P,SACtCI,aAAa,EACbvH,iBAAkBhE,SAASiE,cAAc,aAE3CC,OAAK,EACLnE,MAAO,CACL0I,SAAUK,EAAiBzN,GAAY8P,UAAQ,eAAG,MAAG,eAAG,KACxD/G,YAAa,GACbE,QAAS,gBAEXnB,YAAa2F,EAAiBzN,GAAY8P,UAAQ,eAAG,sBAAmB,eAAG,YAInF,CAAC,cACH,MAAC,cACH,KAGN,E,6oEClIY,oCAPZ,IAAMK,IAAa,YAAGC,EAAAA,EAAAA,KAAkB,YAAgC,IAA7B7C,EAAQ,EAARA,SAAU8C,EAAY,EAAZA,aAAY,WAC/D,mBAA4BC,EAAAA,EAAAA,OAAkB,eAAvCC,EAAK,KAAEC,EAAU,KAQxB,OAR+C,YAE/C3O,EAAAA,EAAAA,YAAU,WAAM,sBACV,cAAAwO,IAAY,cAAIE,IAAO,yBACzBC,KACD,aACH,GAAG,CAACH,IAAe,WAEfE,GAAO,yBAEP,gBAAC,IAAsB,CACrBhR,MAAK,0EAAqEgR,EAAME,WAGrF,yBACMlD,EACT,KAAG,WAEI,IAAMmD,GAAmB,SAAH,GAsBvB,IArBJ3S,EAAE,EAAFA,GACAK,EAAQ,EAARA,SACAY,EAAK,EAALA,MACA2R,EAAgB,EAAhBA,iBACAtG,EAAU,EAAVA,WACAsB,EAAQ,EAARA,SACA1H,EAAS,EAATA,UACAvE,EAAM,EAANA,OACAyD,EAAQ,EAARA,SACAyN,EAAS,EAATA,UACAC,EAAkB,EAAlBA,mBACAC,EAAkB,EAAlBA,mBACAjN,EAAmB,EAAnBA,oBACAjD,EAAkB,EAAlBA,mBACAmQ,EAAU,EAAVA,WACAC,EAAQ,EAARA,SACAC,EAAc,EAAdA,eACA9R,EAAI,EAAJA,KACA6D,EAAQ,EAARA,SACAhF,EAAU,EAAVA,WACAkT,EAAS,EAATA,UAEA,OAFS,sBAGP,gBAACf,GAAa,CAACE,aAAc1E,GAC3B,gBAAC,KAAS,CACR5N,GAAIA,EACJK,SAAUA,EACVY,MAAOA,EACP2R,iBAAkBA,EAClBtG,WAAYA,EACZsB,SAAUA,EACV1H,UAAWA,EACXvE,OAAQA,EACRyD,SAAUA,EACVyN,UAAWA,EACXC,mBAAoBA,EACpBC,mBAAoBA,EACpBjN,oBAAqBA,EACrBjD,mBAAoBA,EACpBmQ,WAAYA,EACZC,SAAUA,EACVC,eAAgBA,EAChB9R,KAAMA,EACN6D,SAAUA,EACVhF,WAAYA,EACZkT,UAAWA,IAInB,E,+pZC9DY,+mBAA6C,YAuPzD,SArPoB,SAAH,GA4BX,MA3BJnT,EAAE,EAAFA,GACAc,EAAK,EAALA,MACAT,EAAQ,EAARA,SACAY,EAAK,EAALA,MACAR,EAAgB,EAAhBA,iBACA0F,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAzE,EAAM,EAANA,OACA1B,EAAU,EAAVA,WACAsF,EAAM,EAANA,OACAC,EAAS,EAATA,UACAQ,EAAe,EAAfA,gBACA5E,EAAI,EAAJA,KACA8E,EAAS,EAATA,UACA3F,EAAiB,EAAjBA,kBACA6E,EAAQ,EAARA,SACAU,EAAmB,EAAnBA,oBACAjD,EAAkB,EAAlBA,mBACAsB,EAAY,EAAZA,aACAhE,EAAQ,EAARA,SACA0B,EAAuB,EAAvBA,wBACAG,EAAiB,EAAjBA,kBACAI,EAAoB,EAApBA,qBACAvB,EAAa,EAAbA,cACAa,EAAc,EAAdA,eACAuD,EAAQ,EAARA,SACAE,EAAkB,EAAlBA,mBAAkB,YAElB,IAAM0G,GAAY,YAAGzF,EAAWgN,EAAAA,GAAqBtH,EAAAA,GAAqB,IACpEuH,GAAU,YAAGjN,EAAWgN,EAAAA,GAAqB,IAC7CvP,GAAG,YAAGL,EAAAA,UAEN8P,GAAgB,YAAG/I,OAAOC,KAC9BD,OAAOgJ,YAAYhJ,OAAOiJ,SAAQ,gBAAkB,QAAlB,EAAAC,GAAAA,GAAarS,UAAK,aAAlB,EAAoBgE,YAAQ,eAAI,CAAC,KAAGkG,QAAO,YAAgB,mBAAX9J,GAAF,KAAO,MAAM,OAAN,wBAAMA,EAAMkS,OAAM,MACzGC,QAAO,SAACC,EAAK9R,GACb,OADqB,wBACdyI,OAAOsJ,OAAOD,GAAK,UACvB9R,EAAMsD,EAAStD,IAEpB,GAAG,CAAC,IAEJ,gBAAgDkD,EAAAA,EAAAA,UAAS8O,KAAKC,QAAM,eAA7DnB,EAAgB,KAAEoB,EAAmB,KAI5C,gBAA4ChP,EAAAA,EAAAA,WAAS,IAAM,eAApDiP,EAAc,KAAEC,EAAiB,KAAoB,YAE5D,IAAMC,GAAqB,SAArBA,EAAsBC,GAA4C,IAA9BC,EAAY,UAAH,8DAAG,GACpD,GADwD,yBACpD,gBAACD,IAAY,gBAAK3T,GACpB,OADsC,4BAC/B,CAAC,EACT,eAED,IACI6T,EADAC,GAAE,aAAG,8BAIHC,GAAU,aAAGpP,EAASoP,YAAU,eAAGpP,EAASoP,aAAU,eAAG,KACzDC,GAAW,cAAGC,EAAAA,GAAAA,GAAiBzU,EAAY,YAAU,gBAAG0U,EAAAA,GAAAA,IAA4BH,KAAW,eAAG,KAGlGI,GAAU,aAAGxP,EAASwP,YAAU,eAAGxP,EAASwP,aAAU,eAAG,KACzDC,GAAW,aACf,eAAAR,IAAS,gBAAIK,EAAAA,GAAAA,GAAiBzU,EAAY,WAAQ,eAC9C2U,EACGlK,KAAI,SAACoK,GACJ,OADU,yBACHvK,OAAOC,KAAK2J,EAAmBW,EAAE7T,OAAO,GACjD,IACC8T,SAAM,eACT,KAEFC,GAA6B,+BAAOP,IAAW,OAAKI,KACxD,IADqE,aAC7DP,EAAQC,EAAGU,KAAKb,IAAgB,aACtCY,EAAoBE,KAAKZ,EAAM,IAGjC,IAAIa,GAAM,aAAG5K,OAAOgJ,YAClBhJ,OAAOiJ,QAAQ/S,GAAkB6K,QAAO,YAAa,IAAX8J,GAAW,YAAN,GAAM,OAAN,yBAAMJ,EAAoBK,SAASD,EAAK,MAGzF,OAFE,aAEKhQ,EAASkQ,wBAAsB,gBAClClK,EAAAA,GAAAA,GAASb,OAAOgJ,YAAYyB,EAAoBtK,KAAI,SAAC3E,GAAS,iCAACA,EAAM,KAAI,KAAKoP,KAAO,eACrFA,EACN,EAGMI,IAAgB,KAAJ,QAChB,gBAAC,EAAiB,CAChBzU,MAAOA,EACPX,SAAUA,EACV+L,YAAa9G,EAAS8G,YACtBvE,kBAAmBvC,EAASuC,kBAC5BwE,qBAAsB/G,EAAS+G,qBAC/BC,qBAAsBhH,EAASgH,qBAC/BvL,cAAeA,EACfuB,qBAAsBA,EACtBiK,oBAAqB,WAAM,wBAAAW,EAAA,MAAAgH,EAAoBF,KAAKC,MAAK,EACzD3O,SAAUA,EACVY,gBAAiBA,EACjBb,mBAAoBA,EACpBF,SAAUA,EACVqH,WAAY6H,GAAmBrT,MAK7B0U,IAAY,aAAGjQ,GAAU,KAAJ,WACzB,gBAAC,EAAiB,CAChB5D,OAAQA,EACRyD,SAAUA,EACVnF,WAAYA,EACZiG,UAAWA,EACX9E,KAAMA,EACNY,kBAAmBA,EACnByN,uBAAwBrK,EAASqK,uBACjClP,kBAAmBA,MACA,gBAErB,mCAGIkV,IAAe,sBAAQtB,GAAmBlT,IAAWkT,GAAmB/O,EAASsQ,iBACjFrM,IAAW,cAAGC,EAAAA,EAAAA,IAAerJ,IAC7B0V,IAAqB,aAAG,gBAAAtM,GAAYjI,KAAK,gBAAIiI,GAAYjI,GAAMwU,gBAC/DA,IAAa,aAAGD,IAAqB,gBACvCtM,GAAYjI,GAAMwU,gBAAa,gBAC9B,gBAAAvM,GAAYjI,KAAK,iBAAKiI,GAAYjI,GAAM8E,aAAe,gBAAAd,IAAQ,gBAAIA,EAASyK,mBAAgB,aAI/F,cAEF/L,EAAAA,EAAAA,YAAU,WAAM,yBACTK,EAEJ,iBAFkB,6BACjB6P,EAAoBF,KAAKC,OAE7B,GAAG,CAAC8B,KAAKC,UAAUL,MAAmB,cAEtC3R,EAAAA,EAAAA,YAAU,WAAM,0BACV,iBAACK,IAAiB,gBAAA8P,IAAc,gBAAa,WAAT7S,KAAoB,6BAC1D4S,EAAoBF,KAAKC,QAC1B,6BACDG,GAAkB,EACpB,GAAG,CAAC/P,IAAe,cAEnBL,EAAAA,EAAAA,YAAU,WAAM,0BACdoQ,GAAkB,EACpB,GAAG,CAACjT,EAAOG,EAAMf,EAAUwV,KAAKC,UAAUxC,KAG1C,IAAMyC,IAAgB,aAAG,CACvB3N,cAAe,MACf6H,YAAa,MACb+F,aAAc,MACd1H,WAAY,MACZxJ,MAAO,OACPqD,UAAW,OACXpD,OAAQE,GAAQ,gBACZ2Q,IAAa,gBACX,SAAM,sCACSxC,EAAAA,GAAkB,UAAK,gBACxCwC,IAAa,0BACV/J,EAAeuH,EAAAA,IAAsBuC,IAAqB,gBAAG,IAAC,gBAAG,KAAG,kCACpE9J,EAAY,QACnBoK,SAAU,SAENC,IAAiB,KAAJ,QACjB,gBAAChM,EAAA,EAAW,CAACrG,IAAKA,EAAK8C,MAAOoP,IAC3BxQ,GAAU,KAAJ,WACL,gBAACoN,GAAgB,CACf3S,GAAIA,EACJiB,MAAOA,EACPZ,SAAUA,EACViM,WAAYmJ,GACZ7C,iBAAkBA,EAClB3S,WAAYA,EACZ2N,SAAUzJ,EACV+B,UAAWA,EACXvE,OAAQA,EACRyD,SAAUA,EACVH,SAAUA,EACVgO,SAAU1S,EAAkB4V,oBAAkB,gBAAG,MAAO,gBAAG,gBAAA9M,GAAYjI,KAAK,gBAAIiI,GAAYjI,GAAMgV,aAClGpD,WAAY,CAAElO,MAAOqB,EAASpB,OAAQqB,GACtChF,KAAMA,EACN+R,WAAW,gBAAA9J,GAAYjI,KAAK,gBAAIiI,GAAYjI,GAAMqE,YAClDqN,mBAAoBjR,EACpBkR,mBA1DmB,SAACjR,GAC1B,OADmD,yBAC5CrB,GAAgB,gBAAGA,EAAiBqB,SAAI,eACjD,EAyDQgE,oBAAqBA,EACrBjD,mBAAoBA,EACpBqQ,eAAgB3S,EAAkB2S,gBAAc,gBAAG3S,EAAkB2S,iBAAc,gBAAG,IACtFL,UAAWnR,MACX,gBAEF,gCACE,gBAACmG,EAAA,EAAU,CACTlB,MAAO,CAAEwI,MAAO,QAASnE,YAAa,OACtC,aAAW,MACXhE,QAAS,WAAM,0BACbxB,GAAU,EACZ,EACA6C,OAAK,GAEL,gBAAC,KAAmB,CAAC3C,UAAU,cAAc,aAAY,UAE3D,gBAAC,IAAsB,CACrBlE,MAAOP,EACP0I,SAAU,SACVxJ,UAAU,EACVwG,MAAO,CACL0P,OAAQ,sBACRC,YAAa,kBACbnO,UAAW,MACX4C,WAAY,OACZC,YAAa,QAEflB,SAAU,WAAM,YAAC,EACjBC,YAAa,8BAOvB,OAFE,aAGA,uBACErE,UAAS,qFACPT,GAAQ,gBAAG,aAAU,gBAAG,KAE1B0B,OAAO,gBAAAvB,IAAQ,gBAAIA,EAASmM,kBAAe,gBAAG,CAAEA,gBAAiBnM,EAASmM,mBAAiB,gBAAG,CAAC,KAE9FgE,GAED,gBAAC,IAAmB,CAClB5O,MAAO,CAAE5B,OAAQE,GAAY,KAAJ,WAAI2Q,IAAa,gBAAG,sBAAmB,gBAAG,uBAAmB,gBAAIvC,KAEzFhK,GAAYjI,IAAS,KAAJ,WAChB8U,KAAa,gBAEb,gBAAC,IAAsB,CAAC1U,MAAO,wDAEhC6H,GAAYjI,IAAK,gBAAGoU,KAAY,gBAAG,mCAI5C,C,ynDCrPY,oCAZZ,WAiBA,QAb4C,SAAH,GAAuD,IAAjDhV,EAAU,EAAVA,WAAY+V,EAAU,EAAVA,WAAYC,EAAkB,EAAlBA,mBAAkB,WACvF,kBAAoDhT,EAAAA,SAAe,OAAK,eAAjEiT,EAAkB,KAAEC,EAAqB,KAShD,OATyE,WACpEC,IAAQJ,EAAYE,GAOxB,eAP6C,yBAElB,MAAtBA,GAA4B,0BAC9BG,EAAAA,EAAAA,eAAcL,EAAWM,SAAUN,EAAWO,IAAKP,EAAWQ,KAAMR,EAAWS,SAAUT,EAAWU,UAAU,WAC9GT,EAAmBhW,IACpB,yBACDkW,EAAsBH,IACvB,WACM,2BACT,C,2iBCHY,gC,iBAAA,IAfL,IAAMW,GAAoB,WAAG,W,spGCexB,iC,kCAAA,IAFiD,WA0F3D,WAMC,WAcH,SAAevX,EAAAA,EAAAA,KAlBS,SAACC,GAAW,8BAClC2W,YAAYY,EAAAA,EAAAA,IAAyBvX,GACrCY,YAAY4W,EAAAA,EAAAA,IAAcxX,GAC1ByX,oBAAoBC,EAAAA,EAAAA,IAAiC1X,GACvD,IAE2B,SAACgB,GAAc,+BACxC4V,mBAAoB,SAAChW,GAAe,uBAClCI,GACEmC,EAAAA,EAAAA,IACE,qBACA,6EAEF,YACFnC,GAAS2W,EAAAA,EAAAA,IAAiB/W,GAC5B,EACF,GAEA,EA5GkB,SAAH,GAQT,IAPJA,EAAU,EAAVA,WACA+V,EAAU,EAAVA,WACAc,EAAkB,EAAlBA,mBACAb,EAAkB,EAAlBA,mBACAgB,EAA0B,EAA1BA,2BACAC,EAAgB,EAAhBA,iBACAC,EAAgB,EAAhBA,iBAAgB,WAEhB,kBAA4BlU,EAAAA,cAAe6B,IAAU,eAA9CpC,EAAM,KAAE0U,EAAS,KAGxB,GADA,WACctS,MAAVpC,EAAqB,eACvB,IAAM2U,GAAS,YAAGC,EAAAA,EAAAA,cAChBtB,EAAWM,SACXN,EAAWO,IACXP,EAAWQ,KACXR,EAAWS,SACXT,EAAWU,SACX,CAAEa,UAAW,YAAF,OAAcC,EAAAA,YACzB,WACFJ,EAAUC,EACZ,MAAC,cACD,IAAMI,GAAW,IAAJ,OACX,gBAAC,EAAAC,cAAa,CAAChV,OAAQA,GACrB,gBAAC,IAAmC,CAClCzC,WAAYA,EACZ+V,WAAYA,EACZC,mBAAoBA,IAItB,uBACE9Q,UAAU,8EACViB,MAAO,CAAEuR,YAAa,cAEtB,gBAAC,IAAkB,CACjB3B,WAAYA,EACZvQ,gBAAiBwR,EACjBC,iBAAkBA,EAClBC,iBAAkBA,KAItB,uBACE/Q,MAAO,CACLuE,QAAS,OACTnG,OAAQ,oBACRoT,UAAWC,OAAOC,YAAc,GAChCpC,SAAU,SACVjG,SAAU,cAGX,eAACqH,EAAmBiB,aAAe,cAAAjB,EAAmBiB,aAAU,cAAIjB,EAAmBkB,uBAAwB,IAAJ,UAC1G,gBAAC,IAAmB,QAAG,cAEvB,mCAEF,uBAAK7S,UAAU,oFACb,uBAAKA,UAAU,2DAEb,wBAAMA,UAAU,sDACd,uBAAKA,UAAU,qCACb,uBAAKA,UAAU,yBAGb,4BACG,cAAA2R,EAAmBmB,qBAAkB,eACiB,IAAvDnB,EAAmBoB,kCAAwC,cACzD,uBAAK9R,MAAO,CAAE+R,UAAW,SAAUjQ,MAAO,MAAO6F,WAAY,GAAIqK,cAAe,KAAM,2EAEhF,cAEN,mCAEF,gBAAC,IAAiB,MAClB,gBAAC,IAA0B,MAC3B,gBAAC,IAAO,eAU1B,OADE,WACKX,CACT,I,+qJCxFY,iC,kCAAA,IAD4B,WAsEtC,YAWC,YAgBH,SAAerY,EAAAA,EAAAA,KAzBS,SAACC,GAAW,+BAClCgZ,gBAAgBC,EAAAA,EAAAA,IAAkBjZ,GAClCyX,oBAAoBC,EAAAA,EAAAA,IAAiC1X,GACrDkZ,cAAcC,EAAAA,EAAAA,IAA2BnZ,GACzCwH,OAAO4R,EAAAA,EAAAA,IAASpZ,GAChBwF,UAAU6T,EAAAA,EAAAA,IAAqBrZ,GAC/BO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjCY,YAAY4W,EAAAA,EAAAA,IAAcxX,GAC1BsZ,WAAWC,EAAAA,EAAAA,IAAkBvZ,GAC/B,IAE2B,SAACgB,GAAc,+BACxCwY,kBAAmB,SAACtY,GAAe,uBACjCF,GAASwY,EAAAA,EAAAA,IAAkBtY,GAC7B,EAEAuY,SAAU,SAAChM,GAAkB,uBAC3BzM,GAAS0Y,EAAAA,EAAAA,GAAuB,QAASjM,GAC3C,EAEAkM,sBAAuB,WAAM,uBAC3B3Y,GAAS4Y,EAAAA,EAAAA,KAAuB,GAClC,EACF,GAEA,EA/FkC,SAAH,GAYzB,IAXJnC,EAAkB,EAAlBA,mBACAuB,EAAc,EAAdA,eACAE,EAAY,EAAZA,aACAvC,EAAU,EAAVA,WACAnR,EAAQ,EAARA,SACAmU,EAAqB,EAArBA,sBACAvT,EAAe,EAAfA,gBACAyR,EAAgB,EAAhBA,iBACAC,EAAgB,EAAhBA,iBACAwB,EAAS,EAATA,UACAG,EAAQ,EAARA,SAAQ,WAER,IAAMlN,GAAoB,WAAG/G,GAAQ,cAAGA,EAAS+G,uBAAoB,eAAG,IACxE,cAAoD3I,EAAAA,SAAeoV,IAAe,eAA3Ea,EAAkB,KAAEC,EAAqB,KAEhD,cAAkClW,EAAAA,SAA6B,UAAd0V,IAAsB,eAAhES,EAAU,KAAEC,EAAW,KAA0C,WAItE,YAEF9V,EAAAA,EAAAA,YAAU,WAAM,sBAEV8U,IAAmBa,GAAoB,yBACzCC,EAAsBd,IACvB,aACH,GAAG,CAACA,IAAiB,YAErB9U,EAAAA,EAAAA,YAAU,WAAM,uBACduV,EAASM,GAAU,cAAG,SAAM,cAAG,SACjC,GAAG,CAACA,IACJ,IAAM3B,GAAW,IAAJ,QACX,uBAAKtS,UAAU,oDACb,uBAAKA,UAAU,gBACb,uBAAKA,UAAU,mGACb,gBAAC,IAAsB,CAACgS,iBAAkBA,IAC1C,uBAAKhS,UAAU,6EACZ,cAAAoT,IAAY,cAAIA,EAAavN,OAAS,IAAC,wBACjCuN,KAAY,wBACZvC,EAAWM,SAAQ,cAAMN,EAAWO,IAAG,YAAIP,EAAWQ,SAE/D,uBAAKrR,UAAU,uEACb,uBAAKA,UAAU,+BACb,gBAAC,IAAO,CAAC5E,MAAO,eAAgB0H,oBAAkB,GAChD,2BACE,gBAAC,IAAc,CACb9C,UAAW,yCACXiB,MAAO,CAAC,EACRkT,QAASF,EACT7P,SAhCK,SAAC+P,GAAqB,sBAC3CD,EAAYC,EACd,EA+BkB5S,KAAM,GACN6S,UAAU,cAAAC,EAAAA,KAA6B,cAAI,YAC3CC,UAAW,eAKhB,cAAA7N,IAAoB,cAAI,gBAAC,IAAqC,CAACnG,gBAAiBA,MACjF,gBAAC,IAAc,CAACuQ,WAAYA,EAAYkB,iBAAkBA,IAC1D,gBAAC,IAAe,CAACJ,mBAAoBA,EAAoBkC,sBAAuBA,UAO5F,OADE,YACKvB,CACT,I,41GCrEY,gC,4BAAA,IAAsD,iBAI5DiC,EAAAA,EAAYC,cAAc,WAmE9B,YAMF,SAAeva,EAAAA,EAAAA,KAJS,SAACC,GAAW,+BAClCK,YAAYC,EAAAA,EAAAA,IAAuBN,GACrC,GAEwC,KAAxC,EAvE8B,SAAH,GAAqD,IAA/C2W,EAAU,EAAVA,WAAYkB,EAAgB,EAAhBA,iBAAkBxX,EAAU,EAAVA,WAAU,WACvE,mBAAgC+E,EAAAA,EAAAA,UAAmC,OAAK,eAAjEmV,EAAQ,KAAEC,EAAW,KAA6C,WAGvE,WACF,IAAMC,EAAsB,WAAM,sBAChCD,EAAY,KACd,EACME,GAAQ,WAAGC,QAAQJ,IAAU,WAEnC,IAAMK,EAAmB,SAAC7R,GAAM,sBAC9B8O,EAAiB9O,GAAG,YACpB0R,GACF,EAEA,OAFE,YAGA,gCACE,gBAAC,IAAO,CAACvZ,MAAO,yBAA0B0H,oBAAkB,GAC1D,gBAAC,IAAU,CACT9C,UAAU,iBACV,aAAY,OACZiB,MAAOoT,EAAAA,IAA6B,cAAG,CAAEtR,MAAOsR,EAAAA,MAA+B,cAAG,CAAC,GACnF9S,KAAK,QACLD,QArBmB,SAACoH,GAA6B,sBACvDgM,EAAYhM,EAAMqM,cACpB,EAoBQpS,OAAK,GAEL,gBAAC,IAA6B,CAAC3C,UAAU,cAActE,KAAK,cAGhE,gBAAC,KAAI,CACHsZ,aAAc,CACZC,WAAY,QACZC,SAAU,UAEZC,gBAAiB,CACfF,WAAY,QACZC,SAAU,OAEZT,SAAUA,EACV9X,KAAMiY,EACNtL,QAASqL,EACTpT,KAAK,SAEL,gBAAC,IAAS,KACR,gBAAC,IAAsB,CACrBhH,WAAYA,EACZ6a,UAAUC,EAAAA,EAAAA,IAAkB9a,GAC5BI,SAAUkW,EAAWlW,WAEvB,gBAAC,KAAQ,CACP2a,UAAW,SAACrS,GAAM,+BAAAsS,EAAAA,EAAAA,IAAatS,GAAG,WAAM,+BAAAuS,EAAAA,EAAAA,IAAQ,iDAAgD,GAAC,EACjGlU,QAAS,WAAM,+BAAAkU,EAAAA,EAAAA,IAAQ,iDAAgD,EACvEpa,MAAO,gBACPqa,KAAM,gBAAC,IAAmB,QAE5B,gBAAC,KAAQ,CACPra,MAAO,QACPkG,QAASwT,EACTQ,UAAW,SAACrS,GAAM,+BAAAsS,EAAAA,EAAAA,IAAatS,EAAG6R,EAAgB,EAClDW,KAAM,gBAAC,IAA4B,UAM/C,I,q+CCvEY,gC,4BAAA,IATuC,iBAE7ClB,EAAAA,EAAYC,cAAc,WAEzB,IAAMkB,EAAwC,SAACpV,GAAoB,WACxE,IAAMgS,GAAW,IAAJ,OACX,gBAAC,IAAO,CAAClX,MAAO,8BAA+B0H,oBAAkB,GAC/D,gBAAC,IAAU,CACT,aAAY,SACZ7B,MAAOoT,EAAAA,IAA6B,cAAG,CAAEtR,MAAOsR,EAAAA,MAA+B,cAAG,CAAC,GACnF/S,QAAS,WAAM,6BAAAhB,GAAgB,EAC/BiB,KAAK,QACLoB,OAAK,GAEL,gBAAC,IAAe,CAAC,aAAY,mBAKnC,OAFE,WAEK2P,CACT,E,01ECXY,gC,4BAAA,IAR8D,iBAEpEiC,EAAAA,EAAYC,cAAc,WAEzB,IAAMmB,EAAkB,SAAH,GAAsD,IAAhDhE,EAAkB,EAAlBA,mBAAoBkC,EAAqB,EAArBA,sBACpD,OADyE,sBAClE,cAAAlC,EAAmBiB,aAAU,eAAKjB,EAAmBiE,0BAAuB,cACjF,mCAAK,cAEL,gBAAC,IAAO,CAACxa,MAAO,UAAW0H,oBAAkB,GAC3C,gBAAC,IAAU,CACT9C,UAAU,iBACV,aAAY,cACZiB,MAAOoT,EAAAA,IAA6B,cAAG,CAAEtR,MAAOsR,EAAAA,MAA+B,cAAG,CAAC,GACnF/S,QAAS,WAAM,sBACbuS,GACF,EACAtS,KAAK,QACLoB,OAAK,GAEL,gBAAC,IAAgC,CAAC3C,UAAU,cAActE,KAAK,cAIvE,EAAE,WAEiC,YAIpBzB,EAAAA,EAAAA,KAJS,WAAO,8BAAC,KAEL,WAAO,8BAAC,IAEnC,CAA4D0b,G,imKCrBhD,iC,4BAAA,IAEZ,WA0EE,YAOC,YAoBH,SAAe1b,EAAAA,EAAAA,KAzBS,SAACC,GAAW,+BAClC0Y,YAAYiD,EAAAA,EAAAA,IAAwB3b,GACpCwH,OAAO4R,EAAAA,EAAAA,IAASpZ,GAChBO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjCY,YAAY4W,EAAAA,EAAAA,IAAcxX,GAC5B,IAE2B,SAACgB,GAAc,+BACxCwY,kBAAmB,SAACtY,GAAe,uBACjCF,GAASwY,EAAAA,EAAAA,IAAkBtY,GAC7B,EACA0a,WAAY,SAACC,GAAgB,uBAC3B7a,GAAS8a,EAAAA,EAAAA,IAAmBD,GAC9B,EACAE,QAAS,WAAM,uBACb/a,GAASgb,EAAAA,EAAAA,MACX,EACAC,SAAU,SAACC,EAAkBC,GAAqB,uBAChDnb,GAASob,EAAAA,EAAAA,IAAcF,EAAUC,GACnC,EACAxC,sBAAuB,WAAM,wBAC3B3Y,GAAS4Y,EAAAA,EAAAA,KAAuB,GAClC,EACF,GAEA,EAlG0C,SAAH,GAQjC,IANJrZ,EAAQ,EAARA,SACAiH,EAAK,EAALA,MACA5G,EAAU,EAAVA,WACAmb,EAAO,EAAPA,QACAE,EAAQ,EAARA,SACAL,EAAU,EAAVA,WAAU,WAEV,kBAA4ChY,EAAAA,UAAe,IAAK,eAAzDyY,EAAc,KAAEC,EAAiB,KAGlCC,GAA0B,YAAG7X,EAAAA,EAAAA,aAAYC,IAAS2X,EAAmB,IAAK,KAE1EE,GAAiB,IAAJ,OACjB,gBAAC,IAAU,CAAC,aAAY,WAAY1W,UAAU,sBAAsBuB,KAAK,QAAQD,QAAS2U,EAAStT,OAAK,GACtG,gBAAC,IAAe,QAmBdgU,GAAW,aAAGC,EAAAA,EAAAA,IAAUC,EAAAA,GAAa,CACzCC,qBAAsB,CACpBC,SAAU,MAIRC,GAAS,aAAGJ,EAAAA,EAAAA,IAAUK,EAAAA,GAAgB,CAC1CC,cAAe,CACbC,MAAO,CAAC,SACRC,OAAQ,CAAC,UACTC,IAAK,CAAC,aAIJC,GAAO,aAAGC,EAAAA,EAAAA,IAAWZ,EAAaK,IAElC1E,GAAW,IAAJ,QACX,uBAAKtS,UAAU,8BACb,gBAAC,KAAI,CAACwX,KAAK,YAAYpT,SAAU,SAACqT,GAAW,8BAAAlB,GAAc,cAAGT,EAAW2B,KAAM,cAAG,KAAG,EAAI3b,MAAOhB,GAC9F,gBAAC,KAAU,CAAC4c,UAlClB,SAAuBhP,GAAO,WAC5B,kBAAyBA,GAAjB7I,EAAM,EAANA,OAAQ8X,EAAI,EAAJA,KAEhB,GAF+B,WAE3B,eAACA,IAAI,eAAKld,GACZ,OADsB,8BAGxB,GADC,yBACGoF,EAAOvF,KAAOqd,EAAKrd,GAAI,eACzB,IAAM8b,GAAQ,WAAGwB,SAAS/X,EAAOvF,GAAGud,MAAM,KAAK,KACzCxB,GAAQ,WAAGuB,SAASD,EAAKrd,GAAGud,MAAM,KAAK,KAAI,YACjD1B,EAASC,EAAUC,EACrB,MAAC,0BAEDI,GAA2B,EAC7B,EAqB4Ca,QAASA,GAC7C,gBAAC,KAAe,CAACQ,MAAOpW,EAAOqW,SAAUC,EAAAA,IACtCtW,EAAMsD,KAAI,SAACiT,EAAMhN,GAChB,8CAAC,IAAwB,CACvB7P,MAAO6c,EAAK7c,MACZ8c,SAAUjN,EACV7O,IAAG,mCAA8B6O,GACjC/C,UAAWzN,GACZ,QAKR,cAAAA,IAAQ,cAAIic,MAGjB,OADE,YACKpE,CACT,I,w/RC5EY,gC,4BAAA,IAL6B,WAsJvC,YAWF,SAAerY,EAAAA,EAAAA,IAAQ,MATI,SAACiB,GAAc,gCACxCid,aAAc,SAACpC,EAAa3a,GAAe,wBACzCF,GAASid,EAAAA,EAAAA,IAAapC,EAAQ3a,GAChC,EACAgd,WAAY,SAAC9Z,GAAe,wBAC1BpD,GAASmd,EAAAA,EAAAA,IAAgB/Z,GAC3B,EACF,GAEA,EA7JwC,SAAH,GAAwE,IAAlElD,EAAK,EAALA,MAAO8c,EAAQ,EAARA,SAAUE,EAAU,EAAVA,WAAYD,EAAY,EAAZA,aAAY,IAAEjQ,SAAAA,OAAQ,IAAG,GAAH,eAAG,GAAK,aACpG,mBAAgC5I,EAAAA,EAAAA,UAAmC,OAAK,eAAjEmV,EAAQ,KAAEC,EAAW,KACtBE,GAAQ,WAAGC,QAAQJ,IACzB,cAA8C3W,EAAAA,UAAe,IAAM,eAA5Dwa,EAAe,KAAEC,EAAkB,KAC1C,cAA8Bza,EAAAA,UAAe,IAAM,eAA5CmJ,EAAO,KAAEC,EAAU,KAC1B,cAAoCpJ,EAAAA,SAAe,MAAI,eAAhD0a,EAAU,KAAEC,EAAa,KAAwB,WACxD,IAAMC,EAAsB,SAAChQ,GAAyB,sBACpDA,EAAMxF,iBAAiB,WACvBgE,GAAYD,GAAS,WACrByN,EAAY,KACd,EAAE,YAEF,IAKA,gBAA4FiE,EAAAA,EAAAA,IAAY,CACtGre,GAAI,OAAF,OAAS4d,MADLU,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAE3E,aAEH9a,EAAAA,EAAAA,YAAU,WAAM,uBAET,eAAA6a,IAAU,cAAIC,MAAS,cAAKjS,IAAS,0BACxCC,GAAW,IACZ,0BACDwN,EAAY,KACd,GAAG,CAACuE,EAAYC,IAEhB,IAAMjY,GAAK,YAAG,CACZ8X,UAAWI,EAAAA,GAAIC,UAAUC,SAASN,GAClCC,WAAAA,IAGIM,GAAqB,aAAG1a,EAAAA,EAAAA,aAAYC,IAASsZ,EAAc,KAAM,KAEvE,eAAkCra,EAAAA,SAAe1C,IAAM,eAAhDme,EAAS,KAAEC,EAAY,KAA0B,aACxDpb,EAAAA,EAAAA,YAAU,WAAM,uBAEVmb,IAAcne,GAAO,0BACvBoe,EAAape,IACd,aACH,GAAG,CAACA,IAEJ,IAAMkX,IAAW,IAAJ,QACX,+BAAKtS,UAAU,gBAAgB7B,IAAK2a,EAAY7X,MAAOA,EAAO3G,GAAE,cAAS4d,IAAgBU,EAAgBC,GACvG,gBAAC,KAAG,CAACpB,MAAOS,EAAU9b,IAAK8b,GACvBjR,GAKC,cAED,wBACEwS,SAAU,SAAC/Q,GAAU,uBACfzB,GAAS,0BACXyR,EAAoBhQ,IACrB,aACH,GAEA,yBACE,cAAY,OACZgR,WAAW,EACX5d,MAAOyd,EACPvZ,UAAU,GACVuI,OAAQ,SAACG,GAAU,uBACbzB,GAAS,0BACXyR,EAAoBhQ,IACrB,aACH,EACAtE,SAAU,SAACsE,GAAU,WACnB,IAAQC,GAAR,YAAmBD,GAAXC,OAIR,GAJyB,YACzBA,EAAO1H,MAAM7B,MAAQ,QAAQ,YAC7BqZ,EAAc9P,EAAOgR,aAAa,YAE9BzR,EACF,OADY,+BAEb,0BACDsR,EAAa9Q,EAAMC,OAAO7M,OAAO,YACjCwd,EAAsBpB,EAAUxP,EAAMC,OAAO7M,MAC/C,EACAmF,MAAO,CACL5B,OAAQ,SACR4T,cAAe,EACf7T,MAAOoZ,EACPjO,YAAa,EACb+F,aAAc,GAEhBjM,YAAY,oBA1CL,IAAJ,UACPjJ,GAAS,IAAJ,UACHA,IAAK,cAEL,gBA0CH,eAAC8M,IAAQ,eAAKjB,KAAO,cACpB,gCACE,gBAAC,IAAU,CACT,aAAW,eACXjH,UAAW4Z,IAAW,0CAA2C,CAC/D,YAAahF,IAEf3T,MAAO,CAAE5B,OAAQ,UACjBiC,QAAS,SAAC2B,GAAM,uBACdA,EAAE4W,kBAAkB,YACpBnF,EAAYzR,EAAE8R,cAChB,EACAxT,KAAK,QACLoB,OAAK,GAEL,gBAAC,IAA6B,OAEhC,gBAAC,KAAI,CAAC8R,SAAUA,EAAU9X,KAAMiY,EAAUtL,QAAS,WAAM,sBAAAhC,EAAA,MAAAoN,EAAY,KAAI,GACvE,gBAAC,IAAS,KACR,gBAAC,KAAQ,CACPe,KAAM,gBAAC,IAAiB,MACxBra,MAAO,YACPkG,QAAS,SAAC2B,GAAM,wBACdA,EAAE4W,kBAAkB,YAChB5S,GAAS,2BACXqS,EAAsBpB,EAAUqB,IACjC,2BACD,gBAACrR,IAAQ,eAAIwQ,EAAoBzV,GACnC,IAEF,gBAAC,KAAQ,CACPjD,UAAU,6BACVyV,KAAM,gBAAC,IAAgB,MACvBra,MAAM,SACNkG,QAAS,SAAC2B,GAAM,wBACdA,EAAE4W,kBAAkB,YACpB,gBAAC3R,IAAQ,eAAIqQ,GAAmB,GAClC,UAOZ,gBAAC,IAAkB,CACjBuB,UAAWxB,EACXyB,SAAU,WAAM,+BAAA3B,EAAWF,EAAQ,EACnC8B,YAhIyB,WAAM,uBACnCtF,EAAY,MAAM,YAClB6D,GAAmB,EACrB,MAkIA,OAFE,YAEKjG,EACT,I,qsRCjJY,gC,4BAAA,IAKoD,WA6I9D,YASC,YAYH,SAAerY,EAAAA,EAAAA,KAnBS,SAACC,GAAW,gCAClCgZ,gBAAgBC,EAAAA,EAAAA,IAAkBjZ,GAClCO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjCyX,oBAAoBC,EAAAA,EAAAA,IAAiC1X,GACrDW,mBAAmB0Y,EAAAA,EAAAA,IAAqBrZ,GACxCK,YAAYC,EAAAA,EAAAA,IAAuBN,GACnC2W,YAAYY,EAAAA,EAAAA,IAAyBvX,GACvC,IAE2B,SAACgB,GAAc,gCACxCwY,kBAAmB,SAACtY,GAAe,wBACjCF,GAASwY,EAAAA,EAAAA,IAAkBtY,GAC7B,EACAwY,uBAAwB,SAAC/X,EAASC,GAAU,wBAC1CZ,GAAS+e,EAAAA,EAAAA,KAAS,IAAO,YACzB/e,GAAS0Y,EAAAA,EAAAA,GAAuB/X,EAASC,GAC3C,EACF,GAEA,EA9JiC,SAAH,GASxB,IARJoX,EAAc,EAAdA,eACAQ,EAAiB,EAAjBA,kBACAjZ,EAAQ,EAARA,SACAkX,EAAkB,EAAlBA,mBACA9W,EAAiB,EAAjBA,kBACAN,EAAU,EAAVA,WACAqZ,EAAsB,EAAtBA,uBACA/C,EAAU,EAAVA,WAAU,WAEV,kBAAoD/S,EAAAA,SAAeoV,IAAe,eAA3Ea,EAAkB,KAAEC,EAAqB,KAChD,eAAgC1U,EAAAA,EAAAA,UAA6B,OAAK,eAA3DmV,EAAQ,KAAEC,EAAW,KAC5B,cAA8B5W,EAAAA,UAAe,IAAM,eAA5CmJ,EAAO,KAAEC,EAAU,KACpBgT,GAA6B,YAAGtb,EAAAA,EAAAA,aAAYC,IAAS6U,EAAmB,KAAM,KACpF,cAAoC5V,EAAAA,SAAe,MAAI,eAAhD0a,EAAU,KAAEC,EAAa,KAiChC,OAjCwD,WAGtD,WAIY,YAAG5D,QAAQJ,GAiBxB,aAEDrW,EAAAA,EAAAA,YAAU,WAAM,uBACd8C,SAAS9F,MAAQ8X,GAAc,kCAAgBA,KAAc,cAAK,qCAClE,YACIA,IAAmBa,GAAoB,0BACzCC,EAAsBd,IACvB,aACH,GAAG,CAACA,IAAiB,YAEnB,uBAAKlT,UAAU,mEAGZ,cAAAiH,IAAO,eAAK0K,EAAmBiB,aAAU,cACxC,uBAAK5S,UAAW,kEACd,wBACEyZ,SAAU,WAAM,uBACVxS,GAAS,0BACXC,GAAW,IACZ,aACH,GAEA,yBACEwS,WAAW,EACX5d,MAAOiY,EACP9S,MAAO,CACL5B,OAAQ,SACR8a,SAAU,WACVC,WAAY,IACZ5Q,QAAS,GACTpK,MAAOoZ,GAETnU,YAAY,oBACZkE,OAAQ,WAAM,uBACRtB,GAAS,0BACXC,GAAW,IACZ,aACH,EACA9C,SAAU,SAACsE,GACT,GADmB,uBACfjO,EAAU,eACZ,IAAQkO,GAAR,YAAmBD,GAAXC,OAAiB,YACzBA,EAAO1H,MAAM7B,MAAQ,QAAQ,YAC7BqZ,EAAc9P,EAAOgR,aAAa,YAClC3F,EAAsBtL,EAAMC,OAAO7M,OAAO,YAC1Coe,EAA8BxR,EAAMC,OAAO7M,MAC7C,MAAC,aACH,KAGJ,gBAAC,IAAO,CAACV,MAAO,eAAgB0H,oBAAkB,GAChD,gBAAC,IAAU,CACT9C,UAAU,iBACV,aAAY,eACZuB,KAAK,QACLD,QAAS,WAAM,sBAAAgG,EAAA,MAAAJ,GAAW,EAAK,EAC/BvE,OAAK,GAEL,gBAAC,IAAgB,CAAC3C,UAAU,cAActE,KAAK,iBAG/C,cACHiW,EAAmBiB,YAoBmD,IAAzE,UACA,uBAAK5S,UAAW,kEACd,gBAAC,IAAU,CAAC6I,QAAQ,MAAMqK,MAtB8E,IAAzE,UACjC,uBAAKlT,UAAW,kEACd,gBAAC,IAAU,CAAC6I,QAAQ,MAAMqK,GAAc,eAAGA,IAAc,eAAG,eAC5D,gBAAC,IAAO,CAAC9X,MAAO,OAAQ0H,oBAAkB,GACvCrI,GAAY,IAAJ,WACP,gBAAC,IAAU,CACTuF,UAAU,iBACV,aAAY,OACZuB,KAAK,QACLD,QAAS,WAAM,uBAAAgG,EAAA,MAAAJ,GAAW,EAAI,EAC9BvE,OAAK,GAEL,gBAAC,IAAuB,CAAC3C,UAAU,cAActE,KAAK,eAC3C,eAEb,uCAWNiW,EAAmBiB,YAMb,eAEN,mCARiC,IAAJ,WAC7B,uBAAK5S,UAAU,8CACZvF,GAAQ,eAnGjB,WAAmC,WACjC,IAAMqL,GAAO,IAAJ,QACP,gCACGjB,OAAOC,KAAKuV,EAAAA,IAA2BrV,KAAI,SAAC3E,GAAS,WACpD,IAAM0F,GAAS,YAAGxL,EAAW8F,IAAK,cAAGga,EAAAA,GAA0Bha,KAAK,cAAG,KACvE,OAD0E,YACnE0F,GAAS,cAAG,gBAACA,EAAS,CAAC3J,IAAG,cAASiE,GAAQ1F,SAAUkW,EAAWlW,aAAY,cAAG,iCACxF,MAGJ,OADE,YACKmL,CACT,CAyFoBwU,KAAyB,eAAG,kCACxC,gBAAC,IAAgB,CAACzf,kBAAmBA,EAAmB+Y,uBAAwBA,IAC/EnZ,GAAQ,eAAG,gBAAC,IAAc,QAAG,eAAG,kCAChCA,GAAQ,eAAG,gBAAC,IAAkB,CAAC8f,UAhHR,WAAM,sBACpC7F,EAAY,KACd,MA8G8E,eAAG,oCAOnF,I,oFC9GK8F,EAQAC,E,gx5BA5CO,iC,gCAAA,IA2CZ,SAPKD,GAAAA,EAAAA,EAAI,yBAAJA,EAAAA,EAAI,uBAAJA,EAAAA,EAAI,mBAAJA,EAAAA,EAAI,eAOT,CAPKA,IAAAA,EAAI,KAsBT,SAdKC,GAAAA,EAAAA,EAAK,mBAALA,EAAAA,EAAK,mBAALA,EAAAA,EAAK,mBAALA,EAAAA,EAAK,mBAALA,EAAAA,EAAK,iBAALA,EAAAA,EAAK,+BAALA,EAAAA,EAAK,eAALA,EAAAA,EAAK,eAALA,EAAAA,EAAK,eAALA,EAAAA,EAAK,eAALA,EAAAA,EAAK,oBAcV,CAdKA,IAAAA,EAAK,KAeV,IAAMC,GAAuB,YAAI,GAEjC,WA4dE,aAaC,aAoBH,SAAezgB,EAAAA,EAAAA,KA/BS,SAACC,GAAW,iCAClCygB,UAAU9E,EAAAA,EAAAA,IAAwB3b,GAClC2W,YAAYY,EAAAA,EAAAA,IAAyBvX,GACrCY,YAAY4W,EAAAA,EAAAA,IAAcxX,GAC1BkB,OAAO+X,EAAAA,EAAAA,IAAkBjZ,GACzBO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjC0gB,OAAOC,EAAAA,EAAAA,IAAiB3gB,GACxBuH,WAAWqZ,EAAAA,EAAAA,GAAiB5gB,GAC5BW,mBAAmB0Y,EAAAA,EAAAA,IAAqBrZ,GACxCS,UAAUogB,EAAAA,EAAAA,IAAiC7gB,GAC3CyX,oBAAoBC,EAAAA,EAAAA,IAAiC1X,GACvD,IAE2B,SAACgB,GAAc,iCACxCwC,gBAAiB,SAACpD,GAAO,gCAAAY,GAAS8f,EAAAA,EAAAA,IAAkB1gB,GAAG,EACvD2gB,oBAAqB,WAAM,gCAAA/f,GAASggB,EAAAA,EAAAA,MAAqB,EACzDjB,SAAU,SAACW,GAAU,gCAAA1f,GAAS+e,EAAAA,EAAAA,IAASW,GAAM,EAC7CO,cAAe,SAACC,EAAMvU,GAAS,gCAAA3L,GAASmgB,EAAAA,EAAAA,IAAmBD,EAAMvU,GAAK,EACtEvJ,0BAA2B,SAACC,EAAQC,GAAa,gCAAAtC,GAASuC,EAAAA,EAAAA,IAA+BF,EAAQC,GAAS,EAC1G8d,uBAAwB,SAAC/d,EAAQ5C,EAAUygB,EAAM5d,GAC/C,gCAAAtC,GAASqgB,EAAAA,EAAAA,IAA4Bhe,EAAQ5C,EAAUygB,EAAM5d,GAAS,EACxEge,2BAA4B,SAACje,EAAQ5C,EAAU6C,GAC7C,gCAAAtC,GAASugB,EAAAA,EAAAA,IAAgCle,EAAQ5C,EAAU6C,GAAS,EACtEke,qBAAsB,SAACne,EAAa5C,EAAkB8G,EAAgBka,EAAWC,EAAWC,GAAc,yBACxG3gB,GAAS4gB,EAAAA,EAAAA,IAA0Bve,EAAQ5C,EAAU8G,EAAWka,EAAMC,EAAMC,GAC9E,EACAE,yBAA0B,SAACxe,EAAa5C,EAAkBygB,EAAcS,GAAc,yBACpF3gB,GAAS8gB,EAAAA,EAAAA,IAA8Bze,EAAQ5C,EAAUygB,EAAMS,GACjE,EACF,GAEA,EA1fmC,SAAH,GAgB1B,IAfJlhB,EAAQ,EAARA,SACAkW,EAAU,EAAVA,WACAzV,EAAK,EAALA,MACAuf,EAAQ,EAARA,SACAC,EAAK,EAALA,MACAX,EAAQ,EAARA,SACAxY,EAAS,EAATA,UACAwZ,EAAmB,EAAnBA,oBACAE,EAAa,EAAbA,cACA7d,EAAyB,EAAzBA,0BACAke,EAA0B,EAA1BA,2BACAF,EAAsB,EAAtBA,uBACAI,EAAoB,EAApBA,qBACAK,EAAwB,EAAxBA,yBACApK,EAAkB,EAAlBA,mBAAkB,WAElB,IAAQpU,GAAR,YAAmBK,EAAAA,EAAAA,YAA8BC,EAAAA,eAAzCN,OACR,eAAkC+B,EAAAA,EAAAA,WAAS,IAAM,eAA1CC,EAAQ,KAAE0c,EAAa,KAC9B,cAA4Dne,EAAAA,SAAe4c,IAAwB,eAA5FwB,GAAsB,KAAEC,GAAyB,KACxD,eAAkDre,EAAAA,SAAenD,GAAQ,cAAGA,IAAQ,cAAG,WAAQ,iBAAxFyhB,GAAiB,MAAEC,GAAoB,MAC9C,gBAAkC/c,EAAAA,EAAAA,UAAS,KAAG,iBAAvCgd,GAAS,MAAEC,GAAY,MAC9B,gBAA4Cjd,EAAAA,EAAAA,UAASob,IAAwB,iBAAtE8B,GAAc,MAAEC,GAAiB,MACxC,gBAAoCnd,EAAAA,EAAAA,UAAS,KAAG,iBAAzCod,GAAU,MAAEC,GAAa,MAChC,gBAAoCrd,EAAAA,EAAAA,UAA6B,OAAK,iBAA/Dsd,GAAU,MAAEC,GAAa,MAChC,iBAAgCvd,EAAAA,EAAAA,UAASkb,EAAKsC,OAAK,iBAA5ClI,GAAQ,MAAEmI,GAAW,MAC5B,iBAAkCzd,EAAAA,EAAAA,UAASmb,EAAMqC,OAAK,iBAA/ChD,GAAS,MAAEkD,GAAY,MAC9B,gBAAoClf,EAAAA,SAAe,KAAG,iBAA/Cmf,GAAU,MAAEC,GAAa,MAChC,gBAA8Cpf,EAAAA,SAAe,KAAG,iBAAzDqf,GAAe,MAAEC,GAAkB,MAAuB,YAEjE,IAAMC,GAA4B,WAAM,uBAEtC7B,EAA2Bje,EAAQ6e,IAAmB,SAACkB,GAIrD,GAJ8D,uBAC9DJ,GAAcI,GAEd,YACI,cAAA7b,IAAS,cAAIA,EAAU2Z,MAAM,eAC/B,IAAM9c,GAAK,YAAGgf,EAAKC,WAAU,SAACC,GAAY,8BAAAA,EAAQpC,MAAQ3Z,EAAU2Z,IAAG,KAAG,YAC1Ee,GAA0B7d,GAAO,YAC7BA,GAASoc,GAAyB,0BAEpCT,GAAS,IACV,aACH,MAAC,aACH,GACF,EAEA,SAASwD,KAAkB,uBAEzBxC,IAAsB,YACtBhB,GAAS,EACX,CAiBA,OAFC,YAGC,2BACE,gBAAC,IAA4B,CAC3Btd,KAAMmd,IAAaW,EAAMiD,KACzBC,UAAW,WAAM,uBACfjC,EACEne,EACA6e,GACA3a,GACA,IAAI2M,MAAOwP,cACX/M,EAAWS,UACX,WAAM,uBAGJ4L,GAAc,IAAI,YAClBW,YAAW,WAAM,wBACfR,KAA4B,YAC5BlB,GAA0B,GAAG,YAC7BlC,GAAS,EACX,GAAG,IACL,GAEJ,EACA6D,UAAW5B,IAA0B,EACrClC,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAA4B,CAC3BngB,KAAMmd,IAAaW,EAAMsD,KACzBJ,UAAW,WACT,GADe,wBACXnB,IAAkB9B,EAAyB,0BAE7CyB,GAA0BzB,GAAyB,YACnD+C,SACK,2BAELT,GAAavC,EAAMsD,MACnB,IAAQ3C,GAAR,YAAiB6B,GAAWT,KAApBpB,KAAoC,YAC5CE,EAAuB/d,EAAQ6e,GAAmBhB,GAAM,SAAC4C,GAAS,wBAChE/D,GAAS,GAAO,YAChBkB,EAAcC,EAAM4C,GAAM,YAC1B7B,GAA0BK,GAC5B,GACF,CACF,EACAxC,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAA6B,CAC5BjM,WAAYA,EACZuK,MAAM,cAAA6B,GAAWT,MAAe,cAAIS,GAAWT,IAAgBpB,OAC/DgB,kBAAmBA,GACnBzf,KAAMmd,IAAaW,EAAMwD,MACzBN,UAAW,WAAM,wBACfX,GAAavC,EAAMqC,KACrB,EACAoB,qBAAsB,WAAM,uBAAA5W,EAAA,MAAA0V,GAAavC,EAAM0D,aAAY,EAC3DnE,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAAgB,CAACngB,KAAMmd,IAAaW,EAAM0D,aAAcnE,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAEnG,gBAAC,IAA8B,CAC7BngB,KAAMmd,IAAaW,EAAM2D,OACzBT,UAAW,WAAM,wBACfX,GAAavC,EAAMqC,MAAM,YACzBW,KAAkB,YAClBtB,GAA0BzB,EAC5B,EACAV,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAA8B,CAC7BngB,KAAMmd,IAAaW,EAAM4D,OACzBjjB,OAAO,cAAA6hB,GAAWT,MAAe,cAAIS,GAAWT,IAAgBphB,QAChEuiB,UAAW,WA1FjB,IAAyBvC,EA0FF,wBACf4B,GAAavC,EAAMqC,MAAM,YACrBG,GAAWT,KAAiB,0BA5FfpB,EA6FC6B,GAAWT,IAAgBpB,KA7FtB,uBAE7BW,EAAyBxe,EAAQ6e,GAAmBhB,GAAM,WAAM,uBAC1DA,GAAQ3Z,EAAU2Z,MAAM,0BAC1Be,GAA0BzB,GAAyB,YACnDO,IAAsB,YACtBO,IAA6B,YAC7BvB,GAAS,IACV,0BACD4D,YAAW,WAAM,uBACfR,IACF,GAAG,IACL,KAkFO,aACH,EACArD,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAA8B,CAC7BngB,KAAMmd,IAAaW,EAAM6D,OACzBC,SAAU,SAAC1X,GAAS,wBAClBmW,GAAavC,EAAMqC,MAAM,YACzB7C,GAAS,GAAM,YACfkC,GAA0BzB,GAAyB,YACnDS,GAAcqD,EAAAA,EAAAA,KAAc3X,EAC9B,EACAmT,YAAa,WAAM,uBAAA1S,EAAA,MAAA0V,GAAavC,EAAMqC,KAAI,IAG5C,gBAAC,IAA4B,CAC3BngB,KAAMmd,IAAaW,EAAMgE,KACzBhd,UAAWwb,GAAWT,IACtBxC,YAAa,WAAM,wBACjBgD,GAAavC,EAAMqC,MAAM,YACzBM,GAAmB,GACrB,IAGF,gBAAC,IAA8B,CAC7BzgB,KAAMmd,IAAaW,EAAMiE,OACzBjd,UAAW0b,GACXnD,YAAa,WAAM,wBACjBgD,GAAavC,EAAMqC,MAAM,YACzBM,GAAmB,GACrB,IAGF,gBAAC,IAA8B,CAC7BzgB,KAAMmd,IAAaW,EAAMkE,OACzBhkB,SAAUyhB,GACV3a,UAAWwb,GAAWT,IACtBxC,YAAa,WAAM,wBACjBgD,GAAavC,EAAMqC,MAAM,YACzBM,GAAmB,GACrB,IAGF,gBAAC,KAAc,CACb9S,SAAS,OACT5O,KAAK,UACL6D,SAAUA,EACVqf,iBAAkB,SAACjiB,GAAS,wBAC1Bsf,EAActf,GAAM,YAChBA,GAAM,0BACR0gB,MACD,cAEY,YAAGQ,YAAW,WAAM,wBAC/BnL,OAAOmM,cAAc,IAAIC,MAAM,UACjC,GAAG,IACL,GAEA,gBAAC,KAAkB,KACjB,gBAAC,IAA+B,CAC9BxC,UAAWA,GACXyC,SAAU3C,GACV4C,YAAa,SAACC,GAAgB,wBAC5B5C,GAAqB4C,GACrB,YACAzD,EAA2Bje,EAAQ0hB,GAAa,SAAC3B,GAAS,wBACxDJ,GAAcI,GAAM,YACf3C,EAEJ,gBAFc,2BACbV,GAAS,GAEb,GACF,EACAtd,KAAMiY,IAAY4F,EAAK0E,SACvBzK,SAAUmI,GACV5C,YAAa,WAAM,wBACjB+C,GAAYvC,EAAKsC,MAAM,YACvBD,GAAc,KAChB,IAEF,gBAAC,IAAgC,CAC/BjC,OAAO,eAAAA,IAAK,eAAIsB,IAA0BM,KAC1C7f,KAAMiY,IAAY4F,EAAK2E,UACvB1K,SAAUmI,GACVwC,kBAAmB,WAAM,wBACvBrC,GAAYvC,EAAKsC,MACjB,IAAMuC,GAAC,YAAGpC,GAAWT,KAAgB,YACrClB,EAAuB/d,EAAQ6e,GAAmBiD,EAAEjE,MAAM,SAACvU,GAAS,wBAClEuW,GAAmBjN,KAAKmP,MAAMzY,GAChC,IAAG,YACHmW,GAAavC,EAAMgE,KACrB,EACAc,qBAAsB,WAAM,wBAC1BxC,GAAYvC,EAAKsC,MAAM,YACvBE,GAAavC,EAAMsD,KACrB,EACAyB,kBAAmB,WAAM,wBACvBzC,GAAYvC,EAAKsC,MAAM,YACvBE,GAAavC,EAAMiD,KACrB,EACA+B,kBAAmB,WAEjB,GAFuB,wBACvB1C,GAAYvC,EAAKsC,MAAM,YACnBlC,EAAO,2BACToC,GAAavC,EAAMsD,UACd,gBACL,IAAMsB,GAAC,YAAGpC,GAAWT,KAAgB,YACrClB,EAAuB/d,EAAQ6e,GAAmBiD,EAAEjE,MAAM,SAAC4C,GAAS,yBAClE7C,EAAckE,EAAEjE,KAAM4C,GAAM,aAC5B7B,GAA0BK,GAC5B,GACF,CACF,EACAkD,oBAAqB,WAAM,yBACzB3C,GAAYvC,EAAKsC,MACjB,IAAMuC,GAAC,aAAGpC,GAAWT,KAAgB,aACrClB,EAAuB/d,EAAQ6e,GAAmBiD,EAAEjE,MAAM,SAACvU,GAAS,yBAClEuW,GAAmBjN,KAAKmP,MAAMzY,GAChC,IAAG,aACHmW,GAAavC,EAAMiE,OACrB,EACAiB,mBAAoB,WAAM,yBACxB5C,GAAYvC,EAAKsC,MAAM,aACvBE,GAAavC,EAAMwD,MACrB,EACA2B,oBAAqB,WAAM,yBACzB7C,GAAYvC,EAAKsC,MAAM,aACvBE,GAAavC,EAAMkE,OACrB,EACAkB,oBAAqB,WAAM,yBACzB9C,GAAYvC,EAAKsC,MAAM,aACvBE,GAAavC,EAAM4D,OACrB,EACArE,YAAa,WAAM,yBACjB+C,GAAYvC,EAAKsC,MAAM,aACvBD,GAAc,KAChB,IAGF,gBAAC,IAA6B,CAC5BlgB,KAAMiY,IAAY4F,EAAK4D,OACvB3J,SAAUmI,GACVkD,iBAAkB,WAAM,yBACtB/C,GAAYvC,EAAKsC,MAAM,aACnBlC,GAAO,4BACToC,GAAavC,EAAM2D,UACd,4BACLjC,GAA0BzB,GAAyB,aACnD+C,KAEJ,EACAsC,oBAAqB,WAAM,yBACzBhD,GAAYvC,EAAKsC,MAAM,aACvBE,GAAavC,EAAM6D,OACrB,EACAtE,YAAa,WAAM,yBACjB+C,GAAYvC,EAAKsC,MAAM,aACvBD,GAAc,KAChB,IAGF,gBAAC,IAAyB,KACxB,uBAAK5b,MAAO,CAAEuE,QAAS,eAAgBpG,MAAO,SAC5C,wBAAMY,UAAU,mCAAmCiB,MAAO,CAAE+e,WAAY,SAAU,cAGlF,gBAAC,IAAO,CAAC5kB,MAAM,UAAU,aAAW,UAAU0H,oBAAkB,GAC9D,gBAAC,IAAM,CACL,aAAY,UACZ0U,KAAK,OACLjW,KAAK,QACLwB,MAAM,UACN9B,MAAO,CACLwI,MAAO,QACPpE,WAAY,MACZC,YAAa,OACbiF,YAAa,EACb+F,aAAc,OAEhBhP,QAAS,WAGP,GAHa,yBACb+b,KACA,aACKzC,EAKJ,mBALW,gBACV,IAAMyE,GAAC,aAAGpC,GAAWf,KAAwB,aAC7CZ,EAAuB/d,EAAQ6e,GAAmBiD,EAAEjE,MAAM,SAAC4C,GAAS,yBAClE7C,EAAckE,EAAEjE,KAAM4C,EACxB,GACF,CACF,GAEA,gBAAC,IAAoB,CAAChe,UAAU,yBAInC,gBAAC2a,IAAa,eAAAA,IAAQ,eAAIhJ,EAAmBsO,oCAAqC,IAAJ,WAC7E,gCACE,gBAAC,IAAO,CAAC7kB,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAAC,IAAM,CACL,aAAY,WACZ0U,KAAK,OACLjW,KAAK,QACLwB,MAAM,UACN9B,MAAO,CACLwI,MAAO,QACPpE,WAAY,MACZC,YAAa,MACbiF,YAAa,EACb+F,aAAc,OAEhBhP,QAAS,SAACoH,GAAU,yBAClBqU,GAAYvC,EAAK0E,UACjB,aACwB,GAApB5C,GAAUzW,QAAa,4BACzBvI,EAA0BC,GAAQ,SAACc,GACjC,GAD4C,yBAE1C,eAAAsc,IAAQ,eACRhJ,EAAmBiE,2BAAuB,eAC1CjE,EAAmBuO,wBACnB,gBACA,IAAIC,GAAG,aAAGxO,EAAmBuO,uBAAuBrI,MAAM,KAAK7S,KAAI,SAACob,GAAM,gCAAAA,EAAEC,MAAK,KAAG,aACpFhiB,EAASA,EAAOuH,QAAO,SAAC9J,GAAU,gCAAAqkB,EAAIxQ,SAAS7T,EAAK,GACtD,MAAC,4BACDygB,GAAale,EACf,KACD,4BACDwe,GAAcnU,EAAMqM,cACtB,GAEA,gBAAC,IAAsB,CAAC/U,UAAU,sBAIpC2a,GAqBU,eAEV,mCAvBY,IAAJ,WACR,gBAAC,IAAO,CAACvf,MAAM,SAAS,aAAW,SAAS0H,oBAAkB,GAC5D,gBAAC,IAAM,CACL,aAAY,gBACZ0U,KAAK,OACLjW,KAAK,QACLwB,MAAM,UACN9B,MAAO,CACLwI,MAAO,QACPpE,WAAY,MACZC,YAAa,MACbiF,YAAa,EACb+F,aAAc,OAEhBhP,QAAS,SAACoH,GAAU,yBAClBmU,GAAcnU,EAAMqM,eAAe,aACnCgI,GAAYvC,EAAK4D,OACnB,GAEA,gBAAC,IAAe,CAACpe,UAAU,0BAMhC,eAEH,sCAKR,gBAAC,KAAkB,KACjB,gBAAC,IAAyB,CAACiB,MAAO,CAAEgS,aAAc,SAChD,gBAAC,IAAS,CACR7N,OAAK,EACL7D,KAAK,QACL+e,SAAU,gBAAC,IAA0B,CAACrf,MAAO,CAAE5B,OAAQ,GAAIoD,UAAW,SACtEzC,UAAU,kBACVqE,YAAY,YACZ,aAAW,SACXvI,MAAO4gB,GACPtY,SAAU,SAACnB,GAAM,uBAAAqE,EAAA,OAAAqV,GAAc1Z,EAAE0F,OAAO7M,MAAK,MAGhD,eAAA8e,IAAK,eAAIsB,IAA0BxB,KAAuB,gBAAKC,IAAQ,eACtE,gBAAC,IAAwB,CACvBtI,QAASkO,EAAAA,GACTxB,SAAUnE,EACVxf,MAAOA,EACPolB,OAAO,EACPC,SAAU,WAAM,WAAC,EACjBC,eAAgB,SAAChY,GAAU,yBACzB+T,GAAkB/B,GAAyB,aAC3CqC,GAAYvC,EAAK2E,WAAW,aAC5BtC,GAAcnU,EAAMqM,cACtB,MACA,eAEF,mCAEDkI,GACErX,QAAO,SAACyZ,GAAM,gCAAAA,EAAEjkB,MAAMulB,cAAchR,SAAS+M,GAAWiE,cAAa,IACrE3b,KAAI,SAACqa,GAEJ,OAFU,yBAGR,gBAAC,IAAwB,CACvBN,SAAU7C,IAA0BmD,EAAE/gB,MACtClD,OAAO,eAAAwf,IAAK,eAAIsB,IAA0BmD,EAAE/gB,QAAK,eAAGlD,IAAK,eAAGikB,EAAEjkB,QAC9DiX,QAASgN,EAAEhN,QACXmO,OAAS,iBAAA5F,IAAK,eAAIsB,IAA0BmD,EAAE/gB,SAC9Cqc,SAAUA,EACV8F,SAAU,WAAM,yBACV,eAAA7F,IAAK,eAAIyE,EAAE/gB,QAAU4d,KAAwB,4BAC/CO,GAAkB4C,EAAE/gB,OAAO,aAC3B0e,GAAavC,EAAMsD,QACd,4BACLzC,EAAuB/d,EAAQ6e,GAAmBiD,EAAEjE,MAAM,SAAC4C,GAAS,yBAClE7C,EAAckE,EAAEjE,KAAM4C,GAAM,aAC5B7B,GAA0BkD,EAAE/gB,MAC9B,IAEJ,EACAoiB,eAAgB,SAAChY,GAAU,yBACzB+T,GAAkB4C,EAAE/gB,OAAO,aAC3Bye,GAAYvC,EAAK2E,WAAW,aAC5BtC,GAAcnU,EAAMqM,cACtB,GAGN,MAKZ,I,4rGCzhBY,gC,4BAAA,IAX0C,WAE/C,IAAM6L,EAA2B,SAAH,GAAgF,IAA1ExlB,EAAK,EAALA,MAAO2jB,EAAQ,EAARA,SAAUpE,EAAQ,EAARA,SAAU6F,EAAK,EAALA,MAAOnO,EAAO,EAAPA,QAASoO,EAAQ,EAARA,SAAUC,EAAc,EAAdA,eAC9F,OAD4G,sBAE1G,gBAAC,IAAyB,KACxB,uBAAKzf,MAAO,CAAEuE,QAAS,WAAYpG,MAAO,SACxC,gBAAC,IAAO,CACNhE,MAAOiX,IAAYkO,EAAAA,IAAe,sCAAoBlO,KAAO,cAAK,IAClE,aAAW,cACXvP,oBAAkB,GAElB,gBAAC,IAAM,CACL,aAAY,YACZ0U,KAAkB,GAAZuH,GAAgB,cAAG,aAAU,cAAG,QACtCxd,KAAK,SACLwB,MAAmB,GAAZgc,GAAoB,IAAJ,UAAa,GAATyB,GAAa,cAAG,YAAS,cAAG,aAAS,cAAI,WACpEvf,MAAO,CACL7B,MAAO,QACPyhB,WAAY,SACZrW,UAAW,OACXsW,eAAgB,OAChBxb,YAAa,OACbiF,YAAa,MACb+F,aAAc,OAEhBhP,QAAS,WAAM,sBACbmf,GACF,GAEU,GAATD,GAAc,cAAG,yBAAG,aAAW,cAAG,kCAClCplB,GAAK,cAAGA,IAAK,cAAG,iBAGP,IAAbuf,GAAqB,IAAJ,UAChB,gBAAC,IAAU,CACT,aAAY,gBACZhY,OAAK,EACLpB,KAAK,QACLwB,MAAO,UACP9B,MAAO,CACL6f,eAAgB,OAChBvW,YAAa,MACbjF,YAAa,QAEfhE,QAAS,SAACoH,GAAU,sBACT,GAAT8X,GAAc,cAAGE,EAAehY,KAAM,cAAGgY,EAAehY,GAC1D,GAEU,GAAT8X,GAAiB,IAAJ,UACZ,gBAAC,IAAO,CAACplB,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAAC,IAA2B,CAC1B7B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACtCtF,UAAU,uBAEJ,cAEV,gBAAC,IAAO,CAAC5E,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAAC,IAA2B,CAC1BC,MAAM,mCACN9B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACtCtF,UAAU,yBAIL,cAEb,mCAKV,E,q3BC5DY,oCAXZ,WAiCA,QA9B6C,SAAH,GAMpC,IALJyU,EAAQ,EAARA,SACA9X,EAAI,EAAJA,KACAmjB,EAAgB,EAAhBA,iBACAC,EAAmB,EAAnBA,oBACA/F,EAAW,EAAXA,YAEA,OAFW,sBAGT,gBAAC,KAAI,CACHhF,aAAc,CACZC,WAAY,OACZC,SAAU,UAEZC,gBAAiB,CACfF,WAAY,OACZC,SAAU,OAEZT,SAAUA,EACV9X,KAAMA,EACN2M,QAAS0Q,EACTzY,KAAK,SAEL,gBAAC,IAAS,KACR,gBAAC,KAAQ,CAACD,QAASwe,EAAkB1kB,MAAM,QAC3C,gBAAC,KAAQ,CAACkG,QAASye,EAAqB3kB,MAAM,YAItD,C,4rCCpBY,oCAAZ,WAoDA,QAjDgD,SAAH,GAavC,IAZJqZ,EAAQ,EAARA,SACAmG,EAAK,EAALA,MACAje,EAAI,EAAJA,KACAyiB,EAAiB,EAAjBA,kBACAI,EAAiB,EAAjBA,kBACAD,EAAoB,EAApBA,qBACAE,EAAiB,EAAjBA,kBACAC,EAAmB,EAAnBA,oBACAC,EAAkB,EAAlBA,mBACAC,EAAmB,EAAnBA,oBACAC,EAAmB,EAAnBA,oBACA7F,EAAW,EAAXA,YAEA,OAFW,sBAGT,gBAAC,KAAI,CACHhF,aAAc,CACZC,WAAY,OACZC,SAAU,UAEZC,gBAAiB,CACfF,WAAY,OACZC,SAAU,OAEZT,SAAUA,EACV9X,KAAMA,EACN2M,QAAS0Q,EACTzY,KAAK,SAEHqZ,GASY,cAEZ,gBAAC,IAAS,KACR,gBAAC,KAAQ,CAACtZ,QAASke,EAAmB/J,KAAM,gBAAC,IAAuB,MAAKra,MAAM,SAC/E,gBAAC,KAAQ,CAACkG,QAASie,EAAsB9J,KAAM,gBAAC,IAAyB,MAAKra,MAAM,qBAb7E,IAAJ,UACL,gBAAC,IAAS,KACR,gBAAC,KAAQ,CAACkG,QAAS8d,EAAmB3J,KAAM,gBAAC,IAA4B,MAAKra,MAAM,SACpF,gBAAC,KAAQ,CAACkG,QAASme,EAAmBhK,KAAM,gBAAC,IAAuB,MAAKra,MAAM,SAE/E,gBAAC,KAAQ,CAACkG,QAASoe,EAAqBjK,KAAM,gBAAC,IAAuB,MAAKra,MAAM,WACjF,gBAAC,KAAQ,CAACkG,QAASse,EAAqBnK,KAAM,gBAAC,IAAsB,MAAKra,MAAM,WAChF,gBAAC,KAAQ,CAACkG,QAASqe,EAAoBlK,KAAM,gBAAC,IAAgB,MAAKra,MAAM,UACzE,gBAAC,KAAQ,CAACkG,QAASue,EAAqBpK,KAAM,gBAAC,IAAgB,MAAKra,MAAM,aAUpF,C,i9CClDY,oCAZZ,WA8CA,QA3C+C,SAAH,GAA0E,IAApEqZ,EAAQ,EAARA,SAAU9X,EAAI,EAAJA,KAAMqd,EAAW,EAAXA,YAAasC,EAAS,EAATA,UAAWyC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAClG,OAD6G,sBAE3G,gBAAC,KAAI,CACHhK,aAAc,CACZC,WAAY,OACZC,SAAU,UAEZC,gBAAiB,CACfF,WAAY,OACZC,SAAU,OAEZT,SAAUA,EACV9X,KAAMA,EACN2M,QAAS0Q,EACTzY,KAAK,SAEL,gBAAC,IAAS,KACP+a,EAAUtX,KAAI,SAACqa,GACd,OADoB,sBAElB,gBAAC,KAAQ,CACP/d,QAAS,WAAM,sBACb0d,EAAYK,EACd,EACAjkB,MAAOikB,EACPpe,MACEoe,GAAKN,GAAQ,cACT,CACEgC,YAAa,MACbC,YAAa,QACbje,MAAO,wCACPyP,YAAa,wCACbyO,aAAc,SACf,cACD,CAAC,IAIb,KAIR,C,m8UChCY,oCAPZ,WA8MA,QAvM8C,SAAH,GAAmD,IAA7CtkB,EAAI,EAAJA,KAAMhC,EAAQ,EAARA,SAAU8G,EAAS,EAATA,UAAWuY,EAAW,EAAXA,YAAW,WACrF,mBAAgC1a,EAAAA,EAAAA,UAAS,OAAK,eAAvCmV,EAAQ,KAAEC,EAAW,KAC5B,eAA4CpV,EAAAA,EAAAA,UAAS,KAAG,eAAjD4hB,EAAc,KAAEC,EAAiB,KACxC,eAAkC7hB,EAAAA,EAAAA,UAAS,KAAG,eAAvC8hB,EAAS,KAAEC,EAAY,KAC9B,eAAsC/hB,EAAAA,EAAAA,UAAS,KAAG,eAA3CgiB,EAAW,KAAEC,EAAc,KAClC,eAAgCjiB,EAAAA,EAAAA,UAAS,KAAG,eAArCkiB,EAAQ,KAAEC,EAAW,KACtBC,GAAa,WAAG,sBACtB,eAAgCpiB,EAAAA,EAAAA,UAAS,KAAG,eAArCqiB,EAAQ,KAAEC,EAAW,KACpBrkB,GAAR,YAAmBK,EAAAA,EAAAA,YAA8BC,EAAAA,eAAzCN,OACFrC,GAAQ,YAAG2mB,EAAAA,EAAAA,OAAc,aAE/BzjB,EAAAA,EAAAA,YAAU,WACR,GADc,wBACTzB,EACH,OADS,+BAEV,2BACDmlB,EAAAA,EAAAA,GACEvkB,EACA5C,EACA,mBACA,CAAC,EACD,KACA,WAAM,UAAC,IACP,SAAConB,GAAY,sBAAAza,EAAA,MAAAia,EAAeQ,EAAQ/c,KAAI,SAACgd,GAAW,8BAAAA,EAAOC,IAAI,QAAO,IAAE,IAG1E,IAAM1mB,GAAK,qCACAmmB,EAAa,oBAAYjgB,EAAU2Z,KAAI,8CAEhD,aACF0G,EAAAA,EAAAA,GACEvkB,EACA5C,EACAY,EACA,CAAC,EACD,KACA,SAACuR,GAAU,uBACToV,QAAQpV,MAAMA,EAChB,IACA,SAACiV,GAAY,uBAEXZ,EAAkBY,EAAQ,GAAGE,IAAI,WAAW,YAC5CZ,EAAaU,EAAQ,GAAGE,IAAI,UAC9B,IACA,YACFL,EAAY,IAAI,YAChBH,EAAY,GACd,GAAG,CAAC9kB,IAAO,aAEXyB,EAAAA,EAAAA,YAAU,WAAM,uBACdijB,EAAa,CAACK,IAAgB,YAC9BP,EAAkB,CAACO,GACrB,GAAG,IAAI,YAIL,YAEF,IAAMS,EAAkB,WAAM,uBAC5BzN,EAAY,KACd,EAAE,YAEF,IAAM0N,EAAoB,SAAC1d,GAAU,wBAC/B,cAACwc,EAAevR,SAASjL,KAAM,cAAIA,IAAUgd,GAEhD,eAF+D,0BAC9DP,EAAkB,GAAD,eAAKD,GAAc,CAAExc,MACvC,YACDyd,GACF,EA+DA,OA/DE,YAOA,YAeA,YAuCA,YAGA,gBAAC,IAAM,CAAC5gB,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBACrE,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,8BAA4BmH,aAAS,EAATA,EAAWrG,MAAM,KACnF,gBAAC,IAAO4F,QAAO,KAAC,4CAEd,2BAAM,+FAEN,2BAAM,4CACoC,IAC1C,qBACEshB,KAAK,2EACL3Z,OAAO,SACP4Z,IAAI,sBACJthB,MAAO,CAAE8B,MAAO,OAAQyf,eAAgB,cACzC,iBAEG,KAGN,2BACE,gBAAC,IAAI,CAAC/N,SAAUA,EAAU9X,KAAMkY,QAAQJ,GAAWnL,QAAS6Y,GAEzDb,EACE1b,QAAO,SAAC3C,GAAM,gCAACie,EAAevR,SAAS1M,EAAC,IACxC+B,KAAI,SAACN,GACJ,+CAAC,IAAQ,CAACtI,IAAKsI,EAAOpD,QAAS,WAAM,+BAAA8gB,EAAkB1d,EAAK,GACzDA,EACO,IAEd,gBAAC,IAAQ,KACP,gBAAC,IAAS,CACR5I,MAAO0lB,EACPpd,SAAU,SAACnB,GAAM,uBAAAqE,EAAA,MAAAma,EAAYxe,EAAE0F,OAAO7M,MAAK,EAC3CwZ,UAAW,SAACrS,GAAqB,wBAvFnB,SAACA,GAAM,wBAC3B,cAAU,UAAVA,EAAE7G,MAAe,cAAwB,KAApBolB,EAASnB,SAAe,0BAC3Ca,EAAevR,SAAS6R,IAAW,0BACrCI,EAAY,sDAAsD,YAClEO,MACK,0BACLhB,EAAkB,GAAD,eAAKD,GAAc,CAAEM,KAAW,YACjDY,EAAkBZ,GAAU,YAC5BC,EAAY,IAAI,YAChBU,IAAkB,YAClBP,EAAY,MAEf,aACH,CA2Eca,CAAkBxf,GAAG,YACrBA,EAAE4W,iBACJ,EACA6I,UAAWf,EACXtd,YAAY,mBACZse,aAAa,UAInB,uBAAK1hB,MAAO,CAAEuE,QAAS,OAAQod,SAAU,OAAQC,WAAY,SAAUpgB,UAAW,SAC/Eye,EAAelc,KAAI,SAACN,GACnB,+CAAC,IAAI,CACHtI,IAAKsI,EACLA,MAAOA,EACPmE,QAAQ,WACRia,SAAUpe,IAAUgd,OAAa,eAAY,cAAG,WAAM,+BA9GxC,SAAChd,GACzB,GADmC,wBAC/BA,IAAUgd,EAAe,eAC3B,IAAMqB,GAAa,YAAG7B,EAAetb,QAAO,SAACod,GAAkB,uBAAA1b,EAAA,MAAA0b,IAAkBte,CAAI,KAAG,YACxFyc,EAAkB4B,EACpB,MAAC,aACH,CAyGkEE,CAAkBve,EAAK,GAC7EzD,MAAO,CAAEqE,YAAa,MAAO2N,aAAc,QAC5C,IAEH,gBAAC,IAAU,CAAC7X,MAAM,YAAYmG,KAAK,QAAQoB,OAAK,EAAC1B,MAAO,CAAEgS,aAAc,OAAS3R,QAjIlE,SAACoH,GAAU,uBAChCgM,EAAYhM,EAAMqM,cACpB,GAgIU,gBAAC,IAAqB,CAAChS,MAAM,eAInC,gBAAC,IAAOmgB,QAAO,KACb,gBAAC,IAAM,CAAC5hB,QAAS0Y,EAAa/Y,MAAO,CAAEwI,MAAO,SAAW+N,KAAK,WAAWhW,UAAQ,GAAC,UAGlF,gBAAC,IAAM,CAACF,QArGK,WAAM,YAEvB,IAAI6hB,GAAQ,YAAG/B,EAAUxb,QAAO,SAACwd,GAAS,uBAAA9b,EAAA,MAAA4Z,EAAe3iB,QAAQ6kB,GAAQ,MAEnE7nB,GAAK,qCACAmmB,EAAa,oBAAYjgB,EAAU2Z,KAAI,0BAC1C8F,EAAemC,KAAK,KAAI,iBAC9BF,EAAStd,OAAS,GAAC,iCAAesd,EAASE,KAAK,QAAI,cAAK,IAAE,0BAE3D,aAEFvB,EAAAA,EAAAA,GACEvkB,EACA5C,EACAY,EACA,CAAE2lB,eAAgBA,GAClB,KACA,SAACoC,GAAW,wBACNA,GAAUC,EAAAA,EAAYC,UAAU,0BAClCtoB,GACEmC,EAAAA,EAAAA,IACE,cACA,wEAEF,YACF2c,MACK,0BACL9e,GACEmC,EAAAA,EAAAA,IACE,2BAA0B,2CACU1C,EAAQ,iBAIpD,IACA,WAAM,WAAC,GAEX,EAgEmCoI,MAAM,UAAU9B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QAAU9D,UAAQ,GAAC,SAM9G,C,82CCrMY,oCAXZ,WAsCA,QAnC8C,SAAH,GAAyC,IAAnC7E,EAAI,EAAJA,KAAMghB,EAAS,EAATA,UAAW3D,EAAW,EAAXA,YAChE,OAD2E,sBAEzE,gBAAC,IAAM,CAACzY,KAAK,QAAQ5E,KAAc,GAARA,EAAc2M,QAAS0Q,EAAa,kBAAgB,qBAC7E,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,kBACtC,gBAAC,IAAOmpB,SAAQ,KAAC,qHAIjB,gBAAC,IAAOP,QAAO,KACb,gBAAC,IAAM,CACL5hB,QAAS,WAAM,sBACb0Y,GACF,EACA/Y,MAAO,CAAEwI,MAAO,UAEhB,gBAAC,IAAoB,CAACzJ,UAAU,oBAAoB,UAGtD,gBAAC,IAAM,CACLsB,QAAS,WAAM,sBACbqc,IAAY,WACZ3D,GACF,EACAjX,MAAM,SACNyU,KAAK,WACLvW,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACvC,WAEC,gBAAC,IAA8B,CAACtF,UAAU,sBAKpD,C,62CCzBY,oCAXZ,WAsCA,QAnC8C,SAAH,GAAgD,IAA1CrD,EAAI,EAAJA,KAAMvB,EAAK,EAALA,MAAOuiB,EAAS,EAATA,UAAW3D,EAAW,EAAXA,YACvE,OADkF,sBAEhF,gBAAC,IAAM,CAACzY,KAAK,QAAQ5E,KAAc,GAARA,EAAc2M,QAAS0Q,EAAa,kBAAgB,qBAC7E,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,qBAAmBc,EAAM,MAC/D,gBAAC,IAAOqoB,SAAQ,KAAC,mDACiC,2BAAM,kCAExD,gBAAC,IAAOP,QAAO,KACb,gBAAC,IAAM,CACL1L,KAAK,WACLlW,QAAS,WAAM,sBACb0Y,GACF,EACA/Y,MAAO,CAAEwI,MAAO,UAEhB,gBAAC,IAAoB,CAACzJ,UAAU,oBAAoB,UAGtD,gBAAC,IAAM,CACLsB,QAAS,WAAM,sBACbqc,IAAY,WACZ3D,GACF,EACAjX,MAAM,SACNyU,KAAK,SACLvW,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACvC,SAEC,gBAAC,IAAc,CAACtF,UAAU,sBAKpC,C,snHCzBY,oCATZ,WAwEA,QArE8C,SAAH,GAAyC,IAAnCrD,EAAI,EAAJA,KAAM8E,EAAS,EAATA,UAAWuY,EAAW,EAAXA,YAAW,sBAI3E,IAuBM0J,GAAiB,YAvBE,SAAnBC,EAAoB7nB,EAAY8nB,GACpC,GAD2D,sBAC9CjkB,MAAT7D,EACF,OADsB,yBACfA,EAGT,GAFC,0BAEG+nB,EAAAA,EAAAA,IAAa/nB,GACf,OADuB,yBAChBA,EAAMkJ,KAAI,SAACsH,GAAM,WAAA8C,EAAA,gBAAAuU,EAAiBrX,EAAGsX,EAAW,IAGzD,GAFC,0BAEGE,EAAAA,EAAAA,IAAchoB,GAAQ,eACxB,IAAM8I,GAAQ,WAAG,CAAC,GAQlB,OARoB,WACpBC,OAAOC,KAAKhJ,GAAOioB,SAAQ,SAACC,GAAM,wBACD,GAA3BJ,EAAYrlB,QAAQylB,IAAU,0BAChCpf,EAASof,QAAKrkB,IACT,0BACLiF,EAASof,GAAKL,EAAiB7nB,EAAMkoB,GAAIJ,GAE7C,IAAG,YACIhf,CACT,CACA,OADC,0BACM9I,CACT,CAE0B6nB,CAAiBliB,EAAW,CACpD,SACA,eACA,uBACA,kBACA,YAGIwiB,GAAe,YAAG9T,KAAKC,UAAUsT,EAAmB,KAAM,IAUhE,OAVmE,YAQjE,YAGA,gBAAC,IAAM,CAACniB,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBACrE,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,oBACtC,gBAAC,IAAO0G,QAAO,KAAC,0EAEd,2BACA,gBAAC,IAAM,CAACM,QAfY,WAAM,WAC9B,IAAMkc,GAAO,YAAGtc,SAASgjB,cAAc,MACjClG,GAAI,YAAG,IAAImG,KAAK,CAACF,GAAkB,CAAEvoB,KAAM,gBAAgB,YACjE8hB,EAAQ8E,KAAO8B,IAAIC,gBAAgBrG,GAAM,YACzCR,EAAQ8G,SAAW,iBAAiB,YACpCpjB,SAASqjB,KAAKC,YAAYhH,GAAU,YACpCA,EAAQiH,OACV,EAQ0CjN,KAAK,WAAWzU,MAAM,UAAUvB,UAAQ,GAAC,eAE3E,gBAAC,IAA4B,CAACxB,UAAU,kBAAkB,aAAY,gBAExE,2BACA,2BACA,gBAAC,IAAgB,CACfiB,MAAO,CAAEwR,UAAW,QAASrT,MAAO,OAAQuR,OAAQ,uBACpD3Q,UAAW,wBACXlE,MAAOmoB,EACP,aAAW,GACX5f,YAAY,mDAKtB,C,qvFC7DY,oCAZkD,WAqE9D,QAnE8C,SAAH,GAAwC,IAAlC1H,EAAI,EAAJA,KAAM4hB,EAAQ,EAARA,SAAUvE,EAAW,EAAXA,YAAW,WAC1E,kBAAwBlc,EAAAA,SAAe,KAAG,eAAnC+I,EAAI,KAAEC,EAAO,KACd4d,GAAY,YAAGC,EAAAA,EAAAA,QAAO,OAAM,WAElC,IAAMC,EAAiB,mCAAG,WAAO3hB,GAAsC,yEAClD,GADkD,sBACrEA,EAAEC,iBAAiB,WAEG,MAAlBD,EAAE0F,OAAOkc,MAAa,kGAII,OAApB,WAAJ7G,EAAO/a,EAAE0F,OAAOkc,MAAM,GAAE,qBACX7G,EAAKnX,OAAM,QAAxBA,EAAO,EAAH,gBAEVC,EAAQD,GAAM,4CACf,gBAXsB,sCAavB,OAFE,YAGA,gBAAC,IAAM,CAACtF,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBACrE,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,oBACtC,gBAAC,IAAO0G,QAAO,KAAC,4EAEd,2BACA,yBAAG,sDACH,2BAAM,IAAC,4BAET,gBAAC,IAAgB,CACfC,MAAO,CAAEwR,UAAW,QAASrT,MAAO,OAAQuR,OAAQ,uBACpD3Q,UAAW,wBACXoE,SAAU,SAACnB,GAAM,sBAAAqE,EAAA,MAAAR,EAAQ7D,EAAE0F,OAAO7M,MAAK,EACvCA,MAAO+K,EACP,aAAW,GACXxC,YAAY,wCAEd,gBAAC,IAAO6e,QAAO,KACb,gBAAC,IAAM,CACL5hB,QAAS,WAAM,uBACbojB,EAAaI,QAAQL,OACvB,EACAjN,KAAK,WACLzU,MAAM,UACN9B,MAAO,CAAEoE,WAAY,QACrB7D,UAAQ,GAER,yBAAO1F,MAAM,GAAGJ,KAAK,OAAOyC,IAAKumB,EAActgB,SAAUwgB,EAAmBG,QAAM,IAAG,mBAErF,gBAAC,IAAuB,CAAC/kB,UAAU,qBAErC,gBAAC,IAAM,CACLsB,QAAS,WAAM,uBACbid,EAAS1X,GAAM,YACfC,EAAQ,IAAI,YACZkT,GACF,EACAjX,MAAO8D,EAAKhB,OAAS,GAAC,cAAG,YAAS,cAAG,WACrCqC,SAAyB,GAAfrB,EAAKhB,OACf5E,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACtC9D,UAAQ,GACT,SAEC,gBAAC,IAAa,CAACxB,UAAU,sBAKnC,C,wxDCvDY,oCAXZ,WA2CA,QAxC4C,SAAH,GAAyC,IAAnCrD,EAAI,EAAJA,KAAM8E,EAAS,EAATA,UAAWuY,EAAW,EAAXA,YAAW,WACzE,IAAMgL,GAAO,WAAG,CACd,CAAExoB,MAAO,QAASyoB,WAAY,QAAS7lB,MAAO,KAC9C,CAAE5C,MAAO,QAASyoB,WAAY,QAAS7lB,MAAO,OAG1C8lB,GAAI,WAAGzjB,GAAS,cAClB,CACE,CAAEnH,GAAI,EAAGkC,MAAO,KAAMV,MAAO2F,EAAU2Z,MACvC,CAAE9gB,GAAI,EAAGkC,MAAO,QAASV,MAAO2F,EAAUrG,OAC1C,CAAEd,GAAI,EAAGkC,MAAO,gBAAiBV,MAAO2F,EAAUka,MAClD,CAAErhB,GAAI,EAAGkC,MAAO,SAAUV,MAAO2F,EAAU0jB,QAC3C,CAAE7qB,GAAI,EAAGkC,MAAO,UAAWV,MAAO2F,EAAU4Q,YAC7C,cACD,KAEJ,OAFO,WAGL,gBAAC,IAAM,CAAC9Q,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBACrE,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,WAAQ,cAAAmH,IAAS,cAAIA,EAAUrG,QAAM,KAC3E,gBAAC,IAAO4F,QAAO,KACb,uBAAKC,MAAO,CAAE5B,OAAQ,UACpB,gBAAC,IAAQ,CACP6lB,KAAMA,EACNF,QAASA,EACTI,SAAU,EACVC,mBAAoB,CAAC,GACrBC,yBAAuB,EACvBC,aAAc,EACdC,YAAY,EACZC,WAAY,CACVC,2BAA4B,WAAM,6DAAI,EACtCC,0BAA2B,WAAM,6DAAI,OAOnD,C,22CC9BY,oCAXZ,WAuCA,QApC4C,SAAH,GAAyC,IAAnChpB,EAAI,EAAJA,KAAMghB,EAAS,EAATA,UAAW3D,EAAW,EAAXA,YAC9D,OADyE,sBAEvE,gBAAC,IAAM,CAACzY,KAAK,QAAQ5E,KAAc,GAARA,EAAc2M,QAAS0Q,EAAa,kBAAgB,qBAC7E,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,kBACtC,gBAAC,IAAOmpB,SAAQ,KAAC,mDAEf,2BACA,yBAAG,wCAEL,gBAAC,IAAOP,QAAO,KACb,gBAAC,IAAM,CACL5hB,QAAS,WAAM,sBACb0Y,GACF,EACAxC,KAAK,WACLvW,MAAO,CAAEwI,MAAO,UAEhB,gBAAC,IAAoB,CAACzJ,UAAU,oBAAoB,QAGtD,gBAAC,IAAM,CACLsB,QAAS,WAAM,sBACbqc,IAAY,WACZ3D,GACF,EACAjX,MAAM,SACN9B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACvC,UAEC,gBAAC,IAAgB,CAACtF,UAAU,sBAKtC,C,i2CC1BY,oCAXZ,WAkCA,QA/B4C,SAAH,GAAoD,IAA9CrD,EAAI,EAAJA,KAAMghB,EAAS,EAATA,UAAW3D,EAAW,EAAXA,YAAa8D,EAAS,EAATA,UAC3E,OADoF,sBAElF,gBAAC,IAAM,CAACvc,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBACrE,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,iBACtC,gBAAC,IAAO0G,QAAO,KAAC,aACJ,yBAAI8c,GAAS,cAAG,cAAW,cAAG,SAAW,wDACnD,2BAAM,0EAGR,gBAAC,IAAOoF,QAAO,KACb,gBAAC,IAAM,CAAC5hB,QAAS0Y,EAAa/Y,MAAO,CAAEwI,MAAO,SAAW+N,KAAK,WAAWhW,UAAQ,GAC/E,gBAAC,IAAoB,CAACxB,UAAU,kBAAkB,aAAY,cAAe,UAG/E,gBAAC,IAAM,CACLsB,QAAS,WAAM,sBACbqc,IAAY,WACZ3D,GACF,EACAjX,MAAM,UACN9B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACtC9D,UAAQ,GACT,OAEC,gBAAC,IAAqB,CAACxB,UAAU,sBAK3C,C,kwHCrBY,oCAZZ,WAwFA,QArF6C,SAAH,GAOpC,IANJob,EAAI,EAAJA,KACAgB,EAAiB,EAAjBA,kBACAvL,EAAU,EAAVA,WACAlU,EAAI,EAAJA,KACAuhB,EAAoB,EAApBA,qBACAlE,EAAW,EAAXA,YAAW,WAEX,IAAM4L,GAAY,WAAG,8BACfC,GAAuB,WAAG,+BAC1BC,GAAa,WAAGpT,OAAOqT,SAASC,OAAOC,WAAW,SAAO,cAAGL,IAAY,cAAGlT,OAAOqT,SAASC,SACjG,cAAoCloB,EAAAA,UAAe,IAAM,eAAlDooB,EAAU,KAAEC,EAAa,KAChC,cAAoCroB,EAAAA,UAAe,IAAM,eAAlD8U,EAAU,KAAEwT,EAAa,KAChC,cAAoDtoB,EAAAA,UAAe,IAAM,eAAlEuoB,EAAkB,KAAEC,EAAqB,KAEhD,SAASC,IAAc,WACrB,IAAMC,GAAM,WAAGN,GAAU,cAAGJ,IAAa,cAAGF,IACtCtrB,GAAE,WAAGmsB,mBAAmBrL,IACxBsL,GAAE,WAAGD,mBAAmBrK,IACxBuK,GAAO,YAAGN,GAAkB,qCACdI,mBAAmB,GAAD,OAC7B5V,EAAWM,SAAQ,cAAMN,EAAWS,SAAQ,YAAIT,EAAWU,SAAQ,YAAIV,EAAWlW,SAAQ,YAAIkW,EAAWO,IAAG,YAAIP,EAAWQ,UAC/H,cACD,KACEuV,GAAO,YAAGhU,GAAU,gDAAuB,KACjD,OADoD,YAC7C,GAAP,OAAU4T,EAAM,oCAA4BlsB,EAAE,8BAAsBosB,GAAE,OAAGC,GAAO,OAAGC,EACrF,CAEA,OAFC,YAGC,gBAAC,IAAM,CAACrlB,KAAK,QAAQ5E,KAAc,GAARA,EAAc2M,QAAS0Q,EAAa,kBAAgB,qBAC7E,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,mBACtC,gBAAC,IAAOmpB,SAAQ,KAAC,+EAC8D,IAC7E,gBAAC,IAAQ,CAACniB,QAAS4c,GAAsB,QAAe,wCAE1D,gBAAC,IAAOld,QAAO,MACZ,cAAA8kB,IAAkBF,IAAY,cAAIE,IAAkBD,IAAuB,cAC1E,gBAAC,IAAQ,CACPnhB,MAAM,cACNzD,MAAO,CAAEkZ,SAAU,SACnBhG,QAAS+R,EACT7lB,KAAK,SACLiB,QAAS,WAAM,uBACb6kB,GAAeD,EACjB,MACA,cAEF,mCAEF,gBAAC,IAAQ,CACPxhB,MAAM,iBACNzD,MAAO,CAAEkZ,SAAU,SACnBhG,QAASvB,EACTvS,KAAK,SACLiB,QAAS,WAAM,uBACb8kB,GAAexT,EACjB,IAGF,gBAAC,IAAQ,CACPlO,MAAO,yBACPzD,MAAO,CAAEkZ,SAAU,SACnBhG,QAASkS,EACThmB,KAAK,SACLiB,QAAS,WAAM,uBACbglB,GAAuBD,EACzB,IAGF,2BACA,4BAAM,wBACN,2BACA,wBAAMplB,MAAO,CAAEuE,QAAS,QAASpG,MAAO,OAAQmR,SAAU,WACxD,gBAAC,IAAQ,CAAC+R,KAAMiE,IAAeM,cAAY,GACxC,IACAN,IAAe,KAElB,2BACCF,GAAkB,cAAG,yBAAG,kEAAgE,cAAG,oCAKtG,C,2oNC1EY,gC,4BAAA,IACZ,IAAMT,GAAY,WAAG,8BACfE,GAAa,WAAGpT,OAAOqT,SAASC,OAAOC,WAAW,SAAO,cAAGL,IAAY,cAAGlT,OAAOqT,SAASC,SAAO,WA0LtG,YAIC,YAIH,SAAe/rB,EAAAA,EAAAA,KANS,SAACC,GAAW,+BAClC2W,YAAYY,EAAAA,EAAAA,IAAyBvX,GACvC,IAE2B,WAAO,+BAAC,IAEnC,EAhM6B,SAAH,GAA0C,IAApCyC,EAAI,EAAJA,KAAMqd,EAAW,EAAXA,YAAanJ,EAAU,EAAVA,WAAU,WAC3D,kBAA4D/S,EAAAA,UAAe,IAAM,eACjF,GAD6B,KAA2B,KACxD,WAA0DA,EAAAA,UAAe,IAAM,eAC/E,GAD4B,KAA0B,KACtD,WAAwBA,EAAAA,SAAe,KAAG,eAIpCgpB,GAJK,KAAS,MACpB,YAAmBlpB,EAAAA,EAAAA,YAA8BC,EAAAA,eAAzCN,OAGO,WAAG,OAClB,cAA8BO,EAAAA,SAAe,OAAK,eAA3CipB,EAAO,KAAEC,EAAU,KAC1B,cAAkClpB,EAAAA,SAAe,OAAK,eACtD,GADgB,KAAc,KAC9B,YAA4DA,EAAAA,SAAe,OAAK,eAAzEmpB,EAAsB,KAAEC,EAAyB,KACxD,eAA8CppB,EAAAA,SAAe,OAAK,eAA3DqpB,EAAe,KAAEC,EAAkB,KAC1C,eAAoCtpB,EAAAA,SAAe,OAAK,eAAjDooB,EAAU,KAAEC,EAAa,KAChC,eAAkCroB,EAAAA,SAAe,OAAK,eAA/CupB,EAAS,KAAEC,EAAY,KAE9B,eAAkDxpB,EAAAA,SAAe,UAAQ,eAAlEse,EAAiB,KAiCxB,OAjC8C,KAEjC,YA6BX,YAGA,gBAAC,IAAM,CAAChgB,IAAK,EAAGmF,KAAK,QAAQ5E,KAAMA,EAAM2M,QAAS0Q,EAAa,kBAAgB,qBAC7E,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAChB,gBAAC,IAAgB,CAAC0F,UAAU,iCAAiC,wBAG/D,gBAAC,IAAOgB,QAAO,KAAC,+KAGd,gBAAC,IAAQ,CAAC6lB,cAAY,EAACvE,KAAK,6DAA4D,iBAE5E,IAAI,0BAEhB,2BACA,2BACA,2BAAM,yDACiD,IACvD,gBAAC,IAAQ,CAACuE,cAAY,EAACle,OAAO,SAAS2Z,KAAK,4BAA2B,UAE5D,IACV,2BAAM,qCACP,gBAAC,IAAU,CACTlmB,IAAK,MACLiE,KAAM,MACNvE,MAAOirB,EACP9lB,MAAO,CAAEoE,WAAY,MAAOjG,MAAO,OAAQ6T,aAAc,QACzDvX,KAAMkP,EAAAA,GAAgBsB,KACtB3H,WAAY,qDACZG,MAAO,GACP6iB,aAAa,4FACbnjB,SAAU,SAACnB,GAAM,uBACfqkB,EAAa,MAAM,YACnBN,EAAW/jB,EACb,IAED8jB,GAAW,IAAJ,UACN,gCACE,2BACA,gBAAC,IAAU,CACT3qB,IAAK,cACLiE,KAAM,cACNvE,MAAOmrB,EACPvrB,KAAMkP,EAAAA,GAAgBmB,KACtB9K,MAAO,CAAEoE,WAAY,MAAOjG,MAAO,OAAQ6T,aAAc,QACzD1O,WAAY,wDACZG,MAAO,6BACP6iB,aAAc,KACdC,QAAS,CAAC,MAAO,MACjBpjB,SAAU,SAACnB,GACT,GADe,uBACX,cAAK,MAALA,IAAS,cAAuB,OAAnBkkB,GACf,OADyC,+BAE1C,0BACDG,EAAa,MAAM,YACnBJ,EAA0BjkB,EAC5B,IAED6iB,GAAiBF,GAAgB,IAAJ,UAC5B,gBAAC,IAAU,CACTxpB,IAAK,aACLiE,KAAM,aACNvE,MAAOqrB,EACPlmB,MAAO,CAAEoE,WAAY,MAAOjG,MAAO,OAAQ6T,aAAc,QACzDvX,KAAMkP,EAAAA,GAAgBmB,KACtBxH,WAAY,2EACZG,MAAO,uBACP6iB,aAAc,KACdC,QAAS,CAAC,MAAO,MACjBpjB,SAAU,SAACnB,GAAM,uBACfqkB,EAAa,MAAM,YACnBF,EAAmBnkB,GAAG,YACb,OAALA,GAAY,0BACdikB,EAA0B,QAC3B,aACH,MACA,cAEF,kCAEF,gBAAC,IAAU,CACT9qB,IAAK,aACLiE,KAAM,aACNvE,MAAOoqB,EACPjlB,MAAO,CAAEoE,WAAY,MAAOjG,MAAO,OAAQ6T,aAAc,QACzDvX,KAAMkP,EAAAA,GAAgBmB,KACtBxH,WAAY,4FACZG,MAAO,wBACP6iB,aAAc,KACdC,QAAS,CAAC,MAAO,MACjBpjB,SAAU,SAACnB,GAAM,uBACfqkB,EAAa,MAAM,YACnBnB,EAAcljB,EAChB,IAEF,gBAAC,IAAM,CACL3B,QAAS,WAAM,uBACbgmB,EAAa,GAAD,OAEM,OAAdpB,GAAmB,cAAGJ,IAAa,cAAGF,GAAY,wBACpCkB,EAAS,eAAOL,mBAAmBM,GAAQ,8BAAsBN,mBAC/ErK,IACD,OAC2B,OAA1B6K,GAA+B,qCACXR,mBAAmB,GAAD,OAC7B5V,EAAWM,SAAQ,cAAMN,EAAWS,SAAQ,YAAIT,EAAWU,SAAQ,YAAIV,EAAWlW,SAAQ,YAAIkW,EAAWO,IAAG,YAAIP,EAAWQ,UAC/H,cACD,KAAE,OACc,OAAnB8V,GAAwB,oCAAkBA,KAAe,cAAK,KAErE,EACA3P,KAAK,WACLzU,MAAM,UACNvB,UAAQ,GACT,gBAEC,gBAAC,IAAgB,CAACxB,UAAU,wBAE7B,cAEH,kCAEDqnB,GAAa,IAAJ,UACR,gCACE,2BAAM,gDAEN,2BACA,gBAAC,IAAQ,CAACR,cAAY,EAACvE,KAAM+E,EAAW1e,OAAO,UAC5C0e,GAEH,8BACC,cAEH,mCAKV,I,+nKC5LY,oCALwC,WAsIlD,YAIC,YAgBH,SAAeptB,EAAAA,EAAAA,KAlBS,SAACC,GAAW,+BAClCK,YAAYC,EAAAA,EAAAA,IAAuBN,GACrC,IAE2B,SAACgB,GAAc,+BACxCusB,oBAAqB,SAACpnB,EAAMqnB,GAAY,8BAAAxsB,GAASusB,EAAAA,EAAAA,IAAoBpnB,EAAMqnB,GAAQ,EACnFC,2BAA4B,SAACtnB,EAAMqnB,GAAY,8BAAAxsB,GAASysB,EAAAA,EAAAA,IAA2BtnB,EAAMqnB,GAAQ,EACjGE,gCAAiC,SAACvnB,GAChC,8BAAAnF,GACEmC,EAAAA,EAAAA,IAAwB,cAAD,OACPgD,EAAI,iBAElB,mJAGJ,EACJ,GAEA,EAxJ2B,SAAH,GAMlB,IALJ9F,EAAU,EAAVA,WACAktB,EAAmB,EAAnBA,oBACAG,EAA+B,EAA/BA,gCACAD,EAA0B,EAA1BA,2BACApN,EAAS,EAATA,UAAS,WAET,kBAAwBzc,EAAAA,UAAe,IAAM,eAAtCnB,EAAI,KAAEkrB,EAAO,KAWpB,OAX8C,WAI5C,WAKA,WAGA,gCACE,gBAAC,IAAO,CAACzsB,MAAM,aAAa,aAAW,aAAa0H,oBAAkB,GACpE,gBAAC,IAAU,CAAC9C,UAAU,SAAS,aAAW,aAAasB,QAZrC,WAAM,sBAC5BumB,GAAQ,EACV,GAWQ,gBAAC,IAAoB,QAIxBlrB,GAAQ,IAAJ,UACH,gBAAC,IAAM,CAAC4E,KAAK,QAAQ5E,KAAMA,EAAM2M,QAdnB,WAAM,sBACxBue,GAAQ,GAAO,WACftN,GACF,EAW6D,kBAAgB,qBACrE,gBAAC,IAAO8H,OAAM,CAAC/nB,GAAG,qBAChB,gBAAC,IAAoB,CAAC0F,UAAU,iCAAiC,cAGnE,gBAAC,IAAOgB,QAAO,KACb,uBAAKhB,UAAU,6EACb,gBAAC,KAAO,KACN,gBAAC,KAAc,KACb,gBAAC,IAAQ,CACP6mB,cAAY,EACZle,OAAO,SACP2Z,KAAK,6DACN,cAEU,mOAOdzd,OAAOijB,OAAOC,EAAAA,IAAY/iB,KAAI,SAAC/B,EAAG7G,GACjC,OADyC,sBAEvC,gBAAC,KAAO,CAACA,IAAKA,GACZ,gBAAC,KAAc,KACb,uBAAK6E,MAAO,CAAE+mB,QAAS/kB,EAAEykB,SAAO,cAAG,IAAG,cAAG,MACvC,6BACE,6BACE,0BACE,0BACE,uBAAK1nB,UAAU,kDACb,gBAAC,IAAU,CAAC6I,QAAQ,MAAM5F,EAAEyB,QAC3B,cAAAzB,EAAEykB,UAAO,cAAgB,+BAAZzkB,EAAEkiB,UAAuC,cACrD,gBAAC,KAAK,CAACpiB,MAAM,OAAOyU,KAAK,YAAW,cAM1C,sBAAIvW,MAAO,CAAE7B,MAAO,MACpB,sBAAI6B,MAAO,CAAEwI,MAAO,UAClB,gBAAC,IAAO,CAACrO,MAAM,uBAAuB,aAAW,GAAG0H,oBAAkB,GACpE,gBAAC,IAAQ,CACPxI,GAAE,mBAAc2I,EAAE5C,MAClBqE,MAAM,SACNwD,UAAWjF,EAAEykB,QACbzmB,MAAO,CAAEkZ,SAAU,SACnBhG,QAAS5Z,EAAW0I,EAAE5C,MACtBA,KAAK,SACLiB,QAAS,WAAM,WACb,IAAIzB,GAAM,WAAyBF,MAAtBpF,EAAW0I,EAAE5C,OAAkB,eAAG,QAAI,eAAa,YAC5D4C,EAAEykB,SAAS,0BACbD,EAAoBxkB,EAAE5C,KAAMR,GAG5B,YACIoD,EAAEglB,eAAe,0BACnBN,EAA2B1kB,EAAEglB,cAAepoB,IAC7C,gBACI,0BACL+nB,EAAgC3kB,EAAEyB,OAClC,YACIzB,EAAEglB,eAAe,0BACnBN,EAA2B1kB,EAAEglB,cAAepoB,IAC7C,cAEL,OAKR,0BACE,sBAAIqoB,OAAO,OACT,2BACA,yBAAIjlB,EAAEuD,aACN,2BACA,yBAAG,UACO,IACR,gBAAC,IAAQ,CAACqgB,cAAY,EAACvE,KAAMrf,EAAEklB,MAC5BllB,EAAEkiB,UAIT,2BACA,sBAAIlkB,MAAO,CAAE7B,MAAO,MAClB,2BACA,uBAAKgpB,IAAKnlB,EAAEolB,MAAOpnB,MAAO,CAAE0P,OAAQ,iBAAkBvR,MAAO,gBAS/E,SAGG,cAET,kCAIR,G,mzCCjIY,oCAXZ,WAGO,IAAMkpB,EAAqB,SAAH,GAA6C,IAAvCxO,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YACxD,OADmE,sBAEjE,gBAAC,IAAM,CAACzY,KAAK,QAAQ5E,KAAmB,GAAbmd,EAAmBxQ,QAAS0Q,EAAa,kBAAgB,qBAClF,gBAAC,IAAOqI,OAAM,CAAC/nB,GAAG,qBAAoB,gBACtC,gBAAC,IAAOmpB,SAAQ,KAAC,qEACjB,gBAAC,IAAOP,QAAO,KACb,gBAAC,IAAM,CACL5hB,QAAS,WAAM,sBACb0Y,GACF,EACAxC,KAAK,WACLvW,MAAO,CAAEwI,MAAO,UAEhB,gBAAC,IAAoB,CAACzJ,UAAU,oBAAoB,UAGtD,gBAAC,IAAM,CACLsB,QAAS,WAAM,sBACbyY,IAAW,WACXC,GACF,EACAjX,MAAM,SACN9B,MAAO,CAAEwI,MAAO,QAASnE,YAAa,QACvC,SAEC,gBAAC,IAAc,CAACtF,UAAU,sBAKpC,C,y1DCtBY,oCARZ,WAsBE,WAIC,WAIH,SAAe/F,EAAAA,EAAAA,KANS,SAACC,GAAW,8BAClCuH,WAAWqZ,EAAAA,EAAAA,GAAiB5gB,GAC9B,IAE2B,WAAO,8BAAC,IAEnC,EA1B8B,SAAH,GAAsB,IAAhBuH,EAAS,EAATA,UAAS,WACxC,kBAAwB3D,EAAAA,UAAe,IAAM,eAAtCnB,EAAI,KAAEkrB,EAAO,KACpB,OAD8C,WAE5C,gCACE,gBAAC,IAAO,CAACzsB,MAAM,SAAS,aAAW,SAAS0H,oBAAkB,GAC5D,gBAAC,IAAU,CAAC9C,UAAU,SAASsB,QAAS,WAAM,sBAAAgG,EAAA,KAAAugB,GAAQ,EAAI,EAAG,aAAW,UACtE,gBAAC,IAA4B,QAGjC,gBAAC,IAA8B,CAC7BlrB,KAAMA,EACN8E,UAAWA,EACXuY,YAAa,WAAM,sBACjB6N,GAAQ,EACV,IAIR,G,0vBCdY,gC,iBAAA,eAfL,IAAM/M,EAAmB,SAAC5gB,GAAe,sBAAAoN,EAAA,KAAApN,EAAMuH,SAAQ,C,2jECelD,oCAT0C,WAE/C,IAAM8mB,EAAyB,SAAH,GAA2C,IAArC5tB,EAAQ,EAARA,SAAUya,EAAQ,EAARA,SAAU7a,EAAU,EAAVA,WAAU,WACrE,kBAAwBuD,EAAAA,UAAe,IAAM,eAAtCnB,EAAI,KAAEkrB,EAAO,KAA0B,WAE9C,IAAMW,EAAkB,WAAM,sBAC5BX,GAAQ,EACV,EAMA,OANE,WAIA,WAGA,gCACE,gBAAC,KAAQ,CACPzsB,MAAM,WACNkG,QAASknB,EACTlT,UAAW,SAACrS,GAAM,8BAAAsS,EAAAA,EAAAA,IAAatS,EAAGulB,EAAe,EACjD/S,KAAM,gBAAC,IAAiB,QAG1B,gBAAC,IAAM,CAAC9Y,KAAMA,EAAM2M,QAbJ,WAAM,sBACxBue,GAAQ,EACV,EAW8C,kBAAgB,oBAAoB7nB,UAAU,aACtF,gBAAC,IAAOqiB,OAAM,CAAC/nB,GAAG,qBAChB,gBAAC,IAAiB,CAAC0F,UAAU,iCAAiC,mBAGhE,gBAAC,IAAOgB,QAAO,KACb,uBAAKhB,UAAU,6EACZoV,EAASpQ,KAAI,SAACyjB,EAASnqB,GACtB,OADgC,sBAE9B,gBAAC,KAAO,CAAClC,IAAG,kBAAakC,IACvB,gBAAC,KAAY,KAAEmqB,EAAQrtB,OACvB,gBAAC,KAAc,KACb,uBAAK4E,UAAU,gCACb,uBAAKA,UAAU,gBAAgByoB,EAAQjiB,aACvC,uBAAKxG,UAAU,gBACb,gBAAC,IAAsB,CACrBvF,UAAU,EACV4J,YAAY,GACZvI,MAAO2sB,EAAQC,aACfzkB,SAA0B,UAAhBwkB,EAAQ/sB,MAAgB,cAAG,QAAK,cAAG,aAIjD,uBACEsE,UAAU,eACViB,MAAO,CACL5B,OAAQ,QACRkR,SAAU,SACVI,OAAQ,wBAGV,gBAAC,KAAS,CACRrW,GAAIgE,EACJ/C,MAAOktB,EAAQE,eACfhuB,SAAUA,EACVuN,UAAWvL,EACXpC,WAAYA,EACZiG,UAAWioB,EAAQjoB,UACnBoG,WAAY6hB,EAAQ1tB,iBACpB2E,SAAU+oB,EAAQ/oB,SAClBzD,OAAQwsB,EAAQxsB,OAChBqR,WAAYmb,EAAQnb,WACpBG,UAAWgb,EAAQG,UACnBltB,KAAM+sB,EAAQ/sB,UAO5B,OAMZ,C,qsaCrEY,gC,4BAAA,IAHZ,IAAMmtB,GAAoB,YAAGC,EAAAA,EAAAA,eAAcC,EAAAA,aAE3C,WAuME,YAOC,YASH,SAAe9uB,EAAAA,EAAAA,KAdS,SAACC,GAAW,gCAClCY,YAAY4W,EAAAA,EAAAA,IAAcxX,GAC1BO,UAAUC,EAAAA,EAAAA,IAAuBR,GACjCW,mBAAmB0Y,EAAAA,EAAAA,IAAqBrZ,GACxCyH,SAASqnB,EAAAA,EAAAA,IAAW9uB,GACtB,IAE2B,SAACgB,GAAc,gCACxCwC,gBAAiB,SAACpD,GAAO,+BAAAY,GAAS8f,EAAAA,EAAAA,IAAkB1gB,GAAG,EACvDqD,eAAgB,SAACrD,EAAI8lB,EAAG6I,GAAM,+BAAA/tB,GAASguB,EAAAA,EAAAA,IAAiB5uB,EAAI8lB,EAAG6I,GAAE,EACjE5nB,gBAAiB,SAAC+e,EAAG6I,EAAG7pB,EAAOC,GAAW,+BAAAnE,GAASiuB,EAAAA,EAAAA,IAAe/I,EAAG6I,EAAG7pB,EAAOC,OAAQM,GAAU,EACjGypB,mBAAoB,SAACC,GAAW,+BAAAnuB,GAASouB,EAAAA,EAAAA,IAAsBD,GAAO,EACxE,GAEA,EApNuB,SAAH,GASd,QARJ5uB,SAAAA,OAAQ,IAAG,GAAH,eAAG,GAAI,EACfI,EAAiB,EAAjBA,kBACAC,EAAU,EAAVA,WAAU,IACV6G,QAAAA,OAAO,IAAG,GAAH,cAAG,IAAE,MACZN,gBAAAA,OAAe,IAAG,GAAH,cAAG,WAAM,UAAC,GAAC,MAC1B1D,eAAAA,OAAc,IAAG,GAAH,cAAG,WAAM,UAAC,GAAC,MACzBD,gBAAAA,OAAe,IAAG,GAAH,cAAG,WAAM,UAAC,GAAC,MAC1B0rB,mBAAAA,OAAkB,IAAG,GAAH,cAAG,WAAM,UAAC,GAAC,wBAE7B,IAAMG,EAAe,SAACzuB,EAAoBR,GACxC,OADuD,sBAChD,GAAP,OAAUQ,EAAU,YAAIR,EAC1B,EAEMkvB,GAAc,WAAG,CACrBC,GAAI,CACF,CACErJ,EAAG,EACH6I,EAAG,EACHhe,EAAGse,EAAazuB,EAAY,UAC5B4uB,EAAG,EACHC,EAAG,EACHC,aAAa,MAKnB,cAAoC9rB,EAAAA,UAAe,IAAM,eAAlDmb,EAAU,KAAE4Q,EAAa,KAChC,cAA8B/rB,EAAAA,SAAe0rB,IAAe,eAArDM,EAAO,KAAEC,EAAU,KAC1B,cAAsCjsB,EAAAA,SAAe,uBAAK1B,IAAKmtB,EAAazuB,EAAY,cAAkB,eAAnGkvB,EAAW,KAAEC,EAAc,KAClC,cAAgCnsB,EAAAA,UAAe,IAAM,eAA9CosB,EAAQ,KAAEC,EAAW,KAA2B,WASvD,YAKA,IAAMC,EAA2B,WAE/B,GAFqC,uBAEf,GAAlBzoB,EAAQkE,OACV,OADuB,0BAChB,CAAEua,EAAG,EAAG6I,EAAG,GACnB,cAED,IAAMoB,GAAI,YAAGC,KAAKC,IAAIC,MACpBF,KACA3oB,EAAQqD,KAAI,SAACnD,GACX,OADiB,uBACVA,EAAEonB,EAAIpnB,EAAExC,MACjB,MAEIorB,GAAY,YAAG,CAAC,GAAG,YACzB,IADyB,kBACM,YAC7BA,EAAaxf,GAAKqf,KAAKC,IACrB,EACAD,KAAKC,IAAIC,MACPF,KACA3oB,EACGiE,QAAO,SAACxL,GAAW,4CAAAA,EAAO6uB,EAAI7uB,EAAOiF,OAAS4L,IAAC,cAAI7Q,EAAO6uB,GAAKhe,EAAA,IAC/DjG,KAAI,SAACnD,GACJ,OADU,wBACHA,EAAEue,EAAIve,EAAEzC,KACjB,KAGR,EAZS6L,GAAC,YAAG,GAAGA,EAAIof,EAAMpf,IAAG,KAY5B,YAED,IAAK,IAAIyf,GAAK,YAAG,GAAGA,EAAQL,EAAMK,IAAS,CACzC,GADyC,YACrC,eAAAD,EAAaC,IAAU,KAAO,oBAA4B/qB,IAA5B8qB,EAAaC,EAAQ,KAAgB,eAAID,EAAaC,EAAQ,IAAM,KACpG,OADyG,2BAClG,CAAEtK,OAA2BzgB,IAAxB8qB,EAAaC,IAAoB,eAAGD,EAAaC,KAAM,eAAG,GAAGzB,EAAGyB,GAC7E,cACH,CACA,OADC,YACM,CAAEtK,EAAG,EAAG6I,EAAGoB,EACpB,EACA,YAGA,IAAMM,EAAkB,WAAM,YAC5B,mBAAiBP,KAAThK,EAAC,EAADA,EAAG6I,EAAC,EAADA,EAAiC,YAC5Cc,EAAW,CAETN,GAAI,GAAF,eACG9nB,EAAQqD,KAAI,SAAC5K,GACd,OADyB,wBAClB,CACLgmB,GAAG,eAAAhmB,EAAOgmB,IAAC,eAAI,IACf6I,GAAG,eAAA7uB,EAAO6uB,IAAC,eAAI,IACfhe,EAAGse,EAAazuB,EAAYV,EAAOE,IACnCovB,GAAG,eAAAY,KAAKC,IAAI3S,SAASxd,EAAOgF,OAAQ,KAAE,eAAI,IAC1CuqB,GAAG,eAAAW,KAAKC,IAAI3S,SAASxd,EAAOiF,QAAS,KAAE,eAAI,IAC3CurB,KAAM,EACNC,KAAM,EACNC,eA/DqB,uBACzB,cAAAjwB,EAAkBkwB,WAAQ,cAAkC,OAA9BlwB,EAAkBkwB,WAAmB,0BAC9D,CAAC,IAAK,IAAK,IAAK,KAAM,QAC9B,0BACM,CAAC,QA4DAnB,aAAa,EAEjB,KAAE,CACF,CACExJ,EAAGA,EACH6I,EAAGA,EACHhe,EAAGse,EAAazuB,EAAY,UAC5B4uB,EAAG,EACHC,EAAG,EACHiB,KAAM,EACNC,KAAM,EACNjB,aAAa,EACboB,aAAa,OAGhB,YACHf,EACE,gBAAC,KAAI,CAAChpB,MAAO,CAAEyB,cAAe,OAAStG,IAAKmtB,EAAazuB,EAAY,WACnE,gBAAC,IAAU,CACTuG,gBAAiB,WAAM,YACrB,mBAAiB+oB,KAAThK,EAAC,EAADA,EAAG6I,EAAC,EAADA,EAAiC,YAC5C5nB,EAAgB+e,EAAG6I,EAAG,EAAG,EAC3B,KAIR,EAAE,aAEF7qB,EAAAA,EAAAA,YAAU,WAAM,wBACd+rB,GAAY,GAAO,YACnBQ,GACF,GAAG,CAAChpB,EAAS9G,EAAkBkwB,SAAUjwB,IAEzC,IAAMwX,GAAW,IAAJ,QACX,uBAAKtS,UAAU,UACb,gBAAC6oB,EAAoB,CACnBoC,gBAAgB,eAChBnB,QAASA,EACT9pB,UAAS,uCAAkCvF,EAAQ,YAAIyvB,GAAQ,eAAG,aAAU,eAAG,iBAC/EgB,YAAa,CAAEzB,GAAI,KAAM0B,GAAI,IAAKC,GAAI,IAAKC,GAAI,IAAKC,IAAK,GACzDC,KAAM,CAAE9B,GAAI,GAAI0B,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,IAAK,GAC5CE,UAAW,IACXC,YAAaja,EAAAA,EACbka,OAAQ,WAAM,wBACPzS,EAIJ,gBAJgB,2BACfkR,GAAY,GAAM,YAClBN,GAAc,GAAM,YACpBc,IAEJ,EACAgB,WAAY,SAACC,GAAc,wBACrB3S,GAAY,2BACdmQ,EAAmBwC,GAAW,YAC9B/B,GAAc,IACf,cACH,EACA5qB,SAAU,WAAM,wBACd4qB,GAAc,GAAM,YACfK,EAEJ,gBAFc,2BACbC,GAAY,GAEhB,EACA0B,aAAc,SAACD,GAAc,wBAC3B/B,GAAc,GAAO,YACrBT,EAAmBwC,EACrB,GAECjqB,EAAQqD,KAAI,SAAC5K,GAAW,YACvB,IAAMsvB,GAAC,YAAG,IACFpvB,GAAR,YAAeF,GAAPE,GAER,OADA,YAEE,gBAAC,KAAI,CACH8B,IAAKmtB,EAAazuB,EAAYR,GAC9B2G,MAAO,CAAEyB,cAAe,OACxB0gB,MAAI,EACJiI,GAAIf,KAAKwB,IAAQ,EAAJpC,EAAO,IACpB0B,GAAId,KAAKwB,IAAQ,EAAJpC,EAAO,IACpByB,GAAIb,KAAKwB,IAAQ,EAAJpC,EAAO,IACpBD,GAAIa,KAAKwB,IAAIpC,EAAG,IAChBqC,GAAIzB,KAAKwB,IAAIpC,EAAG,KAEhB,gBAAC,IAAO,CACNpvB,GAAIA,EACJ8B,IAAKmtB,EAAazuB,EAAYR,GAC9BO,kBAAmBA,EACnB6C,gBAAiBA,EACjBC,eAAgB,SAACrD,GAAO,YACtB,mBAAiB8vB,KAAThK,EAAC,EAADA,EAAG6I,EAAC,EAADA,EAAiC,YAC5CtrB,EAAerD,EAAI8lB,EAAG6I,EACxB,IAIR,KACC,eAAAxuB,IAAQ,gBAAKwe,IAAU,eAAG+Q,IAAW,eAAG,uBAAK5tB,IAAKmtB,EAAazuB,EAAY,iBAIlF,OADE,YACKwX,CACT,I,wwDCtMY,oCAf8B,WACnC,IAAM0W,EAAa,SAAC9uB,GAAe,WACxC,IAAQY,GAAR,WAAuBZ,EAAMuH,UAAU/B,UAA/B5E,WACR,OADgD,WACzCZ,EAAMuH,UAAUC,MAAM5G,IAAW,cAAGZ,EAAMuH,UAAUC,MAAM5G,GAAY6G,UAAO,cAAG,GACzF,EAAE,WAK4B,YAAGqqB,EAAAA,EAAAA,IAAehD,GAAY,SAACrnB,GAAY,6BAAAA,EAAQiE,QAAO,SAACxL,GAAW,+BAAG,GAAC,G,mnBCM5F,oCAbL,IAAM6xB,GAAkB,WAAG,CAChCxxB,SAAU,CACRiK,MAAO,WACPhJ,KAAMkP,EAAAA,GAAgBmB,KACtB+b,OAAQ,EAAC,GAAM,GACfoE,SAAS,EACT3nB,WACE,mHAEJiJ,eAAgB,CACd9I,MAAO,+BACPhJ,KAAMkP,EAAAA,GAAgBoB,OACtBkgB,QAAS,GACT3nB,WAAY,6EAEdkC,qBAAsB,CACpB/B,MAAO,wBACPhJ,KAAMkP,EAAAA,GAAgBmB,KACtB+b,OAAQ,EAAC,GAAM,GACfoE,SAAS,EACT3nB,WAAY,+FAEdkM,mBAAoB,CAClB/L,MAAO,0BACPhJ,KAAMkP,EAAAA,GAAgBmB,KACtB+b,OAAQ,EAAC,GAAM,GACfoE,SAAS,EACT3nB,WACE,gIAEJwmB,SAAU,CACRrmB,MAAO,cACPhJ,KAAMkP,EAAAA,GAAgBmB,KACtB+b,OAAQ,CAAC,eAAgB,OACzBoE,QAAS,eACT3nB,WAAY,mEAEd4nB,SAAU,CACRznB,MAAO,iBACPhJ,KAAMkP,EAAAA,GAAgBoB,OACtBkgB,QAAS,GACT3nB,WAAY,qEAEdzJ,WAAY,CACV4J,MAAO,cACPhJ,KAAMkP,EAAAA,GAAgBoB,OACtB9D,UAAU,EACV3D,WAAY,sDAEdqC,WAAY,CACVlC,MAAO,oBACPhJ,KAAMkP,EAAAA,GAAgBwhB,WACtBlkB,UAAU,EACV3D,WACE,iHAEJhK,WAAY,CACVmK,MAAO,aACPhJ,KAAMkP,EAAAA,GAAgBmB,KACtBM,UAAU,EACVyb,OAAQ,CAAC,WACToE,SAAS,EACTnH,QAAQ,K,8kECjDA,oCAVwC,WA+DpD,QA7DgC,SAAH,GAAsD,IAAhDlqB,EAAiB,EAAjBA,kBAAmB+Y,EAAsB,EAAtBA,uBAAsB,WAC1E,kBAAwB9V,EAAAA,UAAe,IAAM,eAAtCnB,EAAI,KAAEkrB,EAAO,KAA0B,WAI5C,WAEF,IAIMnoB,GAAQ,WAAGusB,GAEXI,GAA6B,IAAJ,OAC7B,uBAAKprB,MAAO,CAAEoE,WAAY,UACvBR,OAAOC,KAAKpF,GACVkG,QAAO,SAAC/J,GAAY,8BAAC6D,EAAS7D,GAASkpB,MAAK,IAC5C/f,KAAI,SAACnJ,GACJ,oDAAKO,IAAKP,GACR,gBAAC,IAAU,CACTO,IAAKP,EACLC,MAAOjB,EAAkBgB,GACzBH,KAAMgE,EAAS7D,GAASH,KACxBwM,SAAUxI,EAAS7D,GAASqM,SAC5B3D,WAAY7E,EAAS7D,GAAS0I,WAC9BG,MAAOhF,EAAS7D,GAAS6I,MACzB6iB,aAAc7nB,EAAS7D,GAAQ,QAC/B2rB,QAAS9nB,EAAS7D,GAASisB,OAC3B1jB,SAAU,SAACnB,GAAM,8BAAA2Q,EAAuB/X,EAASoH,EAAC,IAEpD,2BACG,MAKb,OAFE,YAGA,gCACE,gBAACJ,EAAA,EAAO,CAACzH,MAAM,WAAW,aAAW,WAAW0H,oBAAkB,GAChE,gBAACX,EAAA,EAAU,CAACnC,UAAU,SAASsB,QApCb,WAAM,sBAC5BumB,GAAQ,EACV,EAkC+D,aAAW,YAClE,gBAAC,IAAoB,QAIzB,gBAACxe,EAAA,EAAM,CAAC9H,KAAK,QAAQ5E,KAAMA,EAAM2M,QArCjB,WAAM,sBACxBue,GAAQ,EACV,EAmC2D,kBAAgB,qBACrE,gBAACxe,EAAA,EAAOgZ,OAAM,CAAC/nB,GAAG,qBAChB,gBAAC,IAAoB,CAAC0F,UAAU,iCAAiC,sBAGnE,gBAACqJ,EAAA,EAAOrI,QAAO,KAAC,0DAEd,2BACA,2BACCqrB,EACD,6BAKV,C,s3FCnDY,4dAXL,IAAMxV,EAAW,iHAASyV,EAAAA,KAShC,OATYzV,EAAW,yBACF,CAClB,CACE0V,UAAW,cACXC,QAAS,YAAwC,IAAxB9jB,EAAK,EAAlB+jB,YACV,OADqB,sBACdC,EAAkBhkB,EAAMC,OACjC,MAKC,IAAMsO,EAAc,iHAAS0V,EAAAA,IAWpC,SAASD,EAAkBlP,GAA6B,WACtD,IAAIoP,GAAG,WAAGpP,GAEV,IAFkB,WAEXoP,GAAK,SACV,GADU,WACH,QAAP,EAAIA,SAAG,OAAS,QAAT,EAAH,EAAKC,eAAO,OAAZ,EAAcC,MAChB,OADuB,0BAChB,EACR,yBACDF,EAAMA,EAAIG,aACZ,CAEA,OAFC,YAEM,CACT,EAbC,OATY9V,EAAc,yBACL,CAClB,CACEsV,UAAW,YACXC,QAAS,YAAoD,IAApC9jB,EAAK,EAAlB+jB,YACV,OADqB,sBACdC,EAAkBhkB,EAAMC,OACjC,MAgBL,YAEM,IAAM4M,EAAe,SAAC7M,EAAyClL,GAAa,uBAC/D,UAAdkL,EAAMtM,KAAiB,0BAEzBoB,EAASkL,GAAO,YAChBA,EAAMmR,kBAAkB,YACxBnR,EAAMxF,kBACP,aACH,EAAE,YAEK,IAAMsS,EAAU,SAACpE,GAA2B,IAAtBzI,EAAS,UAAH,4DAAG,UAAQ,uBAC5C+J,OAAO/V,KAAKyU,EAAKzI,EACnB,C","sources":["webpack://neodash/./src/card/Card.tsx","webpack://neodash/./src/card/CardAddButton.tsx","webpack://neodash/./src/card/CardSelectors.ts","webpack://neodash/./src/card/CardStyle.ts","webpack://neodash/./src/card/settings/CardSettingsHeader.tsx","webpack://neodash/./src/card/settings/CardSettingsContent.tsx","webpack://neodash/./src/card/settings/CardSettings.tsx","webpack://neodash/./src/card/view/CardViewHeader.tsx","webpack://neodash/./src/card/view/CardViewFooter.tsx","webpack://neodash/./src/report/ReportWrapper.tsx","webpack://neodash/./src/card/view/CardView.tsx","webpack://neodash/./src/component/misc/DashboardConnectionUpdateHandler.tsx","webpack://neodash/./src/config/PageConfig.ts","webpack://neodash/./src/dashboard/Dashboard.tsx","webpack://neodash/./src/dashboard/header/DashboardHeader.tsx","webpack://neodash/./src/dashboard/header/DashboardHeaderAboutButton.tsx","webpack://neodash/./src/dashboard/header/DashboardHeaderDownloadImageButton.tsx","webpack://neodash/./src/dashboard/header/DashboardHeaderLogoutButton.tsx","webpack://neodash/./src/dashboard/header/DashboardHeaderPageList.tsx","webpack://neodash/./src/dashboard/header/DashboardHeaderPageTitle.tsx","webpack://neodash/./src/dashboard/header/DashboardTitle.tsx","webpack://neodash/./src/dashboard/sidebar/DashboardSidebar.tsx","webpack://neodash/./src/dashboard/sidebar/DashboardSidebarListItem.tsx","webpack://neodash/./src/dashboard/sidebar/menu/DashboardSidebarCreateMenu.tsx","webpack://neodash/./src/dashboard/sidebar/menu/DashboardSidebarDashboardMenu.tsx","webpack://neodash/./src/dashboard/sidebar/menu/DashboardSidebarDatabaseMenu.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarAccessModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarCreateModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarDeleteModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarExportModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarImportModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarInfoModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarLoadModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarSaveModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/DashboardSidebarShareModal.tsx","webpack://neodash/./src/dashboard/sidebar/modal/legacy/LegacyShareModal.tsx","webpack://neodash/./src/extensions/ExtensionsModal.tsx","webpack://neodash/./src/modal/DeletePageModal.tsx","webpack://neodash/./src/modal/ExportModal.tsx","webpack://neodash/./src/modal/ModalSelectors.tsx","webpack://neodash/./src/modal/ReportExamplesModal.tsx","webpack://neodash/./src/page/Page.tsx","webpack://neodash/./src/page/PageSelectors.ts","webpack://neodash/./src/config/DashboardConfig.ts","webpack://neodash/./src/settings/SettingsModal.tsx","webpack://neodash/./src/utils/accessibility.ts"],"sourcesContent":["import { Card, Collapse, debounce } from '@mui/material';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport NeoCardSettings from './settings/CardSettings';\nimport NeoCardView from './view/CardView';\nimport { connect } from 'react-redux';\nimport {\n  updateFieldsThunk,\n  updateSelectionThunk,\n  updateReportQueryThunk,\n  toggleCardSettingsThunk,\n  updateReportSettingThunk,\n  updateReportTitleThunk,\n  updateReportTypeThunk,\n  updateReportDatabaseThunk,\n} from './CardThunks';\nimport { toggleReportSettings } from './CardActions';\nimport { getReportState } from './CardSelectors';\nimport {\n  getDashboardIsEditable,\n  getDatabase,\n  getGlobalParameters,\n  getSessionParameters,\n} from '../settings/SettingsSelectors';\nimport { updateGlobalParameterThunk } from '../settings/SettingsThunks';\nimport useDimensions from 'react-cool-dimensions';\nimport { setReportHelpModalOpen } from '../application/ApplicationActions';\nimport { loadDatabaseListFromNeo4jThunk } from '../dashboard/DashboardThunks';\nimport { Neo4jContext, Neo4jContextState } from 'use-neo4j/dist/neo4j.context';\nimport { getDashboardExtensions } from '../dashboard/DashboardSelectors';\nimport { downloadComponentAsImage } from '../chart/ChartUtils';\nimport { Dialog } from '@neo4j-ndl/react';\nimport { createNotificationThunk } from '../page/PageThunks';\n\nconst NeoCard = ({\n  id, // id of the card.\n  report, // state of the card, retrieved based on card id.\n  editable, // whether the card is editable.\n  database, // the neo4j database that the card is running against.\n  extensions, // A set of enabled extensions.\n  globalParameters, // Query parameters that are globally set for the entire dashboard.\n  dashboardSettings, // Dictionary of settings for the entire dashboard.\n  onRemovePressed, // action to take when the card is removed. (passed from parent)\n  onClonePressed, // action to take when user presses the clone button\n  onReportHelpButtonPressed, // action to take when someone clicks the 'help' button in the report settings.\n  onTitleUpdate, // action to take when the card title is updated.\n  onTypeUpdate, // action to take when the card report type is updated.\n  onFieldsUpdate, // action to take when the set of returned query fields is updated.\n  onQueryUpdate, // action to take when the card query is updated.\n  onReportSettingUpdate, // action to take when an advanced report setting is updated.\n  onSelectionUpdate, // action to take when the selected visualization fields are updated.\n  onGlobalParameterUpdate, // action to take when a report updates a dashboard parameter.\n  onToggleCardSettings, // action to take when the card settings button is clicked.\n  onToggleReportSettings, // action to take when the report settings (advanced settings) button is clicked.\n  onDatabaseChanged, // action to take when the user changes the database related to the card\n  loadDatabaseListFromNeo4j, // Thunk to get the list of databases\n  createNotification, // Thunk to create a global notification pop-up.\n}) => {\n  // Will be used to fetch the list of current databases\n  const { driver } = useContext<Neo4jContextState>(Neo4jContext);\n\n  const [databaseList, setDatabaseList] = React.useState([database]);\n  const [databaseListLoaded, setDatabaseListLoaded] = React.useState(false);\n\n  const ref = React.useRef();\n\n  // fetching the list of databases from neo4j, filtering out the 'system' db\n  useEffect(() => {\n    if (!databaseListLoaded) {\n      loadDatabaseListFromNeo4j(driver, (result) => {\n        let index = result.indexOf('system');\n        if (index > -1) {\n          // only splice array when item is found\n          result.splice(index, 1); // 2nd parameter means remove one item only\n        }\n        setDatabaseList(result);\n      });\n      setDatabaseListLoaded(true);\n    }\n  }, [report.query]);\n\n  const [settingsOpen, setSettingsOpen] = React.useState(false);\n  const debouncedOnToggleCardSettings = useCallback(debounce(onToggleCardSettings, 500), []);\n  const [collapseTimeout, setCollapseTimeout] = React.useState(report.collapseTimeout);\n\n  const { observe, width, height } = useDimensions({\n    onResize: ({ observe, unobserve }) => {\n      // Triggered whenever the size of the target is changed...\n      unobserve(); // To stop observing the current target element\n      observe(); // To re-start observing the current target element\n    },\n  });\n\n  const [expanded, setExpanded] = useState(false);\n  const onToggleCardExpand = () => {\n    // When we re-minimize a card, close the settings to avoid position issues.\n    if (expanded && settingsOpen) {\n      onToggleCardSettings(id, false);\n    }\n    setExpanded(!expanded);\n  };\n\n  const [active, setActive] = React.useState(\n    report.settings && report.settings.autorun !== undefined ? report.settings.autorun : true\n  );\n\n  useEffect(() => {\n    if (!report.settingsOpen) {\n      setActive(report.settings && report.settings.autorun !== undefined ? report.settings.autorun : true);\n    }\n  }, [report.query]);\n\n  useEffect(() => {\n    setSettingsOpen(report.settingsOpen);\n  }, [report.settingsOpen]);\n\n  useEffect(() => {\n    setCollapseTimeout(report.collapseTimeout);\n  }, [report.collapseTimeout]);\n\n  // TODO - get rid of some of the props-drilling here...\n  const component = (\n    <div\n      ref={observe}\n      className='n-bg-neutral-bg-weak overflow-hidden n-shadow-l4 border-2 border-neutral-border-strong min-w-max rounded-lg px-4 py-5 sm:p-6 n-h-full'\n    >\n      {/* The front of the card, referred to as the 'view' */}\n      <Collapse disablestrictmodecompat='true' in={!settingsOpen} timeout={collapseTimeout} className='n-h-full'>\n        <Card ref={ref} className='n-h-full'>\n          <NeoCardView\n            id={id}\n            settingsOpen={settingsOpen}\n            editable={editable}\n            dashboardSettings={dashboardSettings}\n            extensions={extensions}\n            settings={report.settings ? report.settings : {}}\n            updateReportSetting={(name, value) => onReportSettingUpdate(id, name, value)}\n            createNotification={(title, message) => createNotification(title, message)}\n            type={report.type}\n            database={database}\n            active={active}\n            setActive={setActive}\n            onDownloadImage={() => downloadComponentAsImage(ref)}\n            query={report.query}\n            globalParameters={globalParameters}\n            fields={report.fields ? report.fields : []}\n            selection={report.selection}\n            widthPx={width}\n            heightPx={height}\n            title={report.title}\n            expanded={expanded}\n            onToggleCardExpand={onToggleCardExpand}\n            onGlobalParameterUpdate={onGlobalParameterUpdate}\n            onSelectionUpdate={(selectable, field) => onSelectionUpdate(id, selectable, field)}\n            onTitleUpdate={(title) => onTitleUpdate(id, title)}\n            onFieldsUpdate={(fields) => onFieldsUpdate(id, fields)}\n            onToggleCardSettings={() => {\n              setSettingsOpen(true);\n              setCollapseTimeout('auto');\n              debouncedOnToggleCardSettings(id, true);\n            }}\n          />\n        </Card>\n      </Collapse>\n      {/* The back of the card, referred to as the 'settings' */}\n      <Collapse disablestrictmodecompat='true' in={settingsOpen} timeout={collapseTimeout}>\n        <Card className='n-h-full'>\n          <NeoCardSettings\n            pagenumber={dashboardSettings.pagenumber}\n            reportId={id}\n            settingsOpen={settingsOpen}\n            query={report.query}\n            database={database}\n            databaseList={databaseList}\n            width={report.width}\n            height={report.height}\n            heightPx={height}\n            fields={report.fields}\n            schema={report.schema}\n            type={report.type}\n            expanded={expanded}\n            extensions={extensions}\n            dashboardSettings={dashboardSettings}\n            onToggleCardExpand={onToggleCardExpand}\n            setActive={setActive}\n            reportSettings={report.settings}\n            reportSettingsOpen={report.advancedSettingsOpen}\n            onQueryUpdate={(query) => onQueryUpdate(id, query)}\n            onDatabaseChanged={(database) => onDatabaseChanged(id, database)}\n            onReportSettingUpdate={(setting, value) => onReportSettingUpdate(id, setting, value)}\n            onTypeUpdate={(type) => onTypeUpdate(id, type)}\n            onReportHelpButtonPressed={() => onReportHelpButtonPressed()}\n            onRemovePressed={() => onRemovePressed(id)}\n            onClonePressed={() => onClonePressed(id)}\n            onToggleCardSettings={() => {\n              setSettingsOpen(false);\n              setCollapseTimeout('auto');\n              debouncedOnToggleCardSettings(id, false);\n            }}\n            onToggleReportSettings={() => onToggleReportSettings(id)}\n          />\n        </Card>\n      </Collapse>\n    </div>\n  );\n\n  // If the card is viewed in fullscreen, wrap it in a dialog.\n  // TODO - this causes a re-render (and therefore, a re-run of the report)\n  // Look into React Portals: https://stackoverflow.com/questions/61432878/how-to-render-child-component-outside-of-its-parent-component-dom-hierarchy\n  if (expanded) {\n    return (\n      <Dialog open={expanded} aria-labelledby='form-dialog-title' className='dialog-xxl'>\n        <Dialog.Content style={{ height: document.documentElement.clientHeight - 200 }}>{component}</Dialog.Content>\n      </Dialog>\n    );\n  }\n  return component;\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  report: getReportState(state, ownProps.id),\n  extensions: getDashboardExtensions(state),\n  editable: getDashboardIsEditable(state),\n  database: getDatabase(\n    state,\n    ownProps && ownProps.dashboardSettings ? ownProps.dashboardSettings.pagenumber : undefined,\n    ownProps.id\n  ),\n  globalParameters: { ...getGlobalParameters(state), ...getSessionParameters(state) },\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onTitleUpdate: (id: any, title: any) => {\n    dispatch(updateReportTitleThunk(id, title));\n  },\n  onQueryUpdate: (id: any, query: any) => {\n    dispatch(updateReportQueryThunk(id, query));\n  },\n  onTypeUpdate: (id: any, type: any) => {\n    dispatch(updateReportTypeThunk(id, type));\n  },\n  onReportSettingUpdate: (id: any, setting: any, value: any) => {\n    dispatch(updateReportSettingThunk(id, setting, value));\n  },\n  onFieldsUpdate: (id: any, fields: any) => {\n    dispatch(updateFieldsThunk(id, fields));\n  },\n  onGlobalParameterUpdate: (key: any, value: any) => {\n    dispatch(updateGlobalParameterThunk(key, value));\n  },\n  onSelectionUpdate: (id: any, selectable: any, field: any) => {\n    dispatch(updateSelectionThunk(id, selectable, field));\n  },\n  onToggleCardSettings: (id: any, open: any) => {\n    dispatch(toggleCardSettingsThunk(id, open));\n  },\n  onReportHelpButtonPressed: () => {\n    dispatch(setReportHelpModalOpen(true));\n  },\n  onToggleReportSettings: (id: any) => {\n    dispatch(toggleReportSettings(id));\n  },\n  onDatabaseChanged: (id: any, database: any) => {\n    dispatch(updateReportDatabaseThunk(id, database));\n  },\n  createNotification: (title: any, message: any) => {\n    dispatch(createNotificationThunk(title, message));\n  },\n  loadDatabaseListFromNeo4j: (driver, callback) => dispatch(loadDatabaseListFromNeo4jThunk(driver, callback)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoCard);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardContent } from '@mui/material';\nimport { IconButton } from '@neo4j-ndl/react';\nimport { SquaresPlusIconOutline } from '@neo4j-ndl/react/icons';\n\n/**\n * Button to add a new report to the current page.\n */\nconst NeoAddNewCard = ({ onCreatePressed }) => {\n  return (\n    <div>\n      <Card className='n-bg-dark-neutral-text-weak'>\n        <CardContent style={{ height: '429px' }}>\n          <IconButton\n            aria-label='add report'\n            className='centered'\n            onClick={() => {\n              onCreatePressed();\n            }}\n            size='large'\n            floating\n          >\n            <SquaresPlusIconOutline />\n          </IconButton>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoAddNewCard);\n","export const getDashboardTitle = (state: any) => state.dashboard.title;\n\nexport const getReportState = (state: any, id: any) => {\n  const { pagenumber } = state.dashboard.settings;\n  return state.dashboard.pages[pagenumber].reports.find((o) => o.id === id);\n};\n","// TODO We need to refactor styled components\nimport styled from 'styled-components';\n\nexport const ReportItemContainer = styled.div``;\n","import React from 'react';\nimport { Tooltip, CardHeader } from '@mui/material';\nimport { IconButton } from '@neo4j-ndl/react';\nimport {\n  ExpandIcon,\n  ShrinkIcon,\n  DragIcon,\n  QuestionMarkCircleIconOutline,\n  TrashIconOutline,\n  DocumentDuplicateIconOutline,\n  PlayCircleIconSolid,\n} from '@neo4j-ndl/react/icons';\n\nconst NeoCardSettingsHeader = ({\n  onRemovePressed,\n  onToggleCardSettings,\n  onToggleCardExpand,\n  expanded,\n  fullscreenEnabled,\n  onReportHelpButtonPressed,\n  onClonePressed,\n}) => {\n  const maximizeButton = (\n    <IconButton aria-label='maximize' onClick={onToggleCardExpand}>\n      <ExpandIcon />\n    </IconButton>\n  );\n\n  const unMaximizeButton = (\n    <IconButton aria-label='un-maximize' onClick={onToggleCardExpand}>\n      <ShrinkIcon />\n    </IconButton>\n  );\n\n  return (\n    <CardHeader\n      avatar={\n        <div style={{ marginTop: '-8px', paddingBottom: '1px' }}>\n          <IconButton clean size='medium' aria-label={'Move Report'} className='n-relative -n-left-3 drag-handle'>\n            <DragIcon aria-label={'Move Report'} />\n          </IconButton>\n          <Tooltip title='Help' aria-label='Help' disableInteractive>\n            <IconButton aria-label='Help' onClick={onReportHelpButtonPressed} clean size='medium'>\n              <QuestionMarkCircleIconOutline aria-label={'Help'} />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Delete' aria-label='Delete' disableInteractive>\n            <IconButton style={{ color: 'red' }} aria-label='remove' onClick={onRemovePressed} clean size='medium'>\n              <TrashIconOutline aria-label={'Delete'} />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Clone' aria-label='Clone' disableInteractive>\n            <IconButton style={{ color: 'green' }} aria-label='Clone' onClick={onClonePressed} clean size='medium'>\n              <DocumentDuplicateIconOutline aria-label={'Clone'} />\n            </IconButton>\n          </Tooltip>\n        </div>\n      }\n      action={\n        <>\n          {fullscreenEnabled ? expanded ? unMaximizeButton : maximizeButton : <></>}\n          <Tooltip title='Run' aria-label='run' disableInteractive>\n            <IconButton\n              aria-label='run'\n              onClick={(e) => {\n                e.preventDefault();\n                onToggleCardSettings();\n              }}\n              clean\n              size='medium'\n            >\n              <PlayCircleIconSolid />\n            </IconButton>\n          </Tooltip>\n        </>\n      }\n      title=''\n      subheader=''\n    />\n  );\n};\n\nexport default NeoCardSettingsHeader;\n","import React, { useEffect } from 'react';\nimport CardContent from '@mui/material/CardContent';\nimport debounce from 'lodash/debounce';\nimport { useCallback } from 'react';\nimport NeoCodeEditorComponent, {\n  DEFAULT_CARD_SETTINGS_HELPER_TEXT_STYLE,\n} from '../../component/editor/CodeEditorComponent';\nimport { getReportTypes } from '../../extensions/ExtensionUtils';\nimport { Dropdown } from '@neo4j-ndl/react';\nimport { EXTENSIONS_CARD_SETTINGS_COMPONENT } from '../../extensions/ExtensionConfig';\nimport { objMerge } from '../../utils/ObjectManipulation';\n\nconst NeoCardSettingsContent = ({\n  pagenumber,\n  reportId,\n  query,\n  database, // Current report database\n  databaseList, // List of databases the user can choose from ('system' is filtered out)\n  reportSettings,\n  type,\n  extensions,\n  onQueryUpdate,\n  onReportSettingUpdate,\n  onTypeUpdate,\n  forceRunQuery, // Callback to force close the card settings.\n  onDatabaseChanged, // When the database related to a report is changed it must be stored in the report state\n}) => {\n  // Ensure that we only trigger a text update event after the user has stopped typing.\n  const [queryText, setQueryText] = React.useState(query);\n  const debouncedQueryUpdate = useCallback(debounce(onQueryUpdate, 200), []);\n  // State to manage the current database entry inside the form\n  const [databaseText, setDatabaseText] = React.useState(database);\n  const debouncedDatabaseUpdate = useCallback(debounce(onDatabaseChanged, 200), []);\n\n  useEffect(() => {\n    // Reset text to the dashboard state when the page gets reorganized.\n    if (query !== queryText) {\n      setQueryText(query);\n    }\n  }, [query]);\n\n  const reportTypes = getReportTypes(extensions);\n  const report = reportTypes[type];\n  const SettingsComponent = report?.settingsComponent || {};\n\n  function hasExtensionComponents() {\n    return (\n      Object.keys(EXTENSIONS_CARD_SETTINGS_COMPONENT).filter(\n        (name) => extensions[name] && EXTENSIONS_CARD_SETTINGS_COMPONENT[name]\n      ).length > 0\n    );\n  }\n\n  function updateCypherQuery(value) {\n    debouncedQueryUpdate(value);\n    setQueryText(value);\n  }\n\n  function renderExtensionsComponents() {\n    const res = (\n      <>\n        {Object.keys(EXTENSIONS_CARD_SETTINGS_COMPONENT).map((name) => {\n          const Component = extensions[name] ? EXTENSIONS_CARD_SETTINGS_COMPONENT[name] : '';\n          return Component ? (\n            <Component\n              pagenumber={pagenumber}\n              reportId={reportId}\n              reportType={type}\n              extensions={extensions}\n              onExecute={() => {\n                onQueryUpdate(queryText);\n                forceRunQuery();\n              }}\n              cypherQuery={queryText}\n              updateCypherQuery={updateCypherQuery}\n            />\n          ) : (\n            <></>\n          );\n        })}\n      </>\n    );\n    return res;\n  }\n\n  const defaultQueryBoxComponent = (\n    <>\n      <NeoCodeEditorComponent\n        value={queryText}\n        editable={true}\n        language={report?.inputMode || 'cypher'}\n        onExecute={() => {\n          onQueryUpdate(queryText);\n          forceRunQuery();\n        }}\n        onChange={(value) => {\n          updateCypherQuery(value);\n        }}\n        placeholder={`Enter Cypher here...`}\n      />\n      <div style={DEFAULT_CARD_SETTINGS_HELPER_TEXT_STYLE}>{report?.helperText || ''}</div>\n    </>\n  );\n\n  return (\n    <CardContent className='n-py-2'>\n      <Dropdown\n        data-test='type-dropdown'\n        id='type'\n        label='Type'\n        type='select'\n        selectProps={{\n          onChange: (newValue) =>\n            newValue && onTypeUpdate(Object.keys(reportTypes).find((key) => reportTypes[key].label === newValue.value)),\n          options: Object.keys(reportTypes).map((option) => ({\n            label: report && reportTypes[option].label,\n            value: report && reportTypes[option].label,\n          })),\n          value: {\n            label: report?.label || '',\n            value: report?.label || '',\n          },\n          menuPortalTarget: document.querySelector('#overlay'),\n        }}\n        fluid\n        style={{ marginLeft: '0px', marginRight: '10px', width: '47%', maxWidth: '200px', display: 'inline-block' }}\n      />\n\n      {report?.disableDatabaseSelector == undefined ? (\n        <Dropdown\n          id='databaseSelector'\n          label='Database'\n          placeholder='neo4j'\n          type='select'\n          selectProps={{\n            onChange: (newValue) => {\n              newValue && setDatabaseText(newValue.value);\n              newValue && debouncedDatabaseUpdate(newValue.value);\n            },\n            options: databaseList.map((database) => ({\n              label: database,\n              value: database,\n            })),\n            value: { label: databaseText, value: databaseText },\n            menuPortalTarget: document.querySelector('#overlay'),\n          }}\n          fluid\n          style={{ marginLeft: '0px', marginRight: '10px', width: '47%', maxWidth: '200px', display: 'inline-block' }}\n        />\n      ) : (\n        <></>\n      )}\n\n      <br />\n      <br />\n      {/* Allow for overriding the code box with a custom component */}\n      {report && report.settingsComponent ? (\n        <SettingsComponent\n          onReportSettingUpdate={onReportSettingUpdate}\n          settings={objMerge({ helperText: report.helperText, inputMode: report.inputMode }, reportSettings)}\n          database={database}\n          query={query}\n          onQueryUpdate={onQueryUpdate}\n          onExecute={() => {\n            onQueryUpdate(queryText);\n            forceRunQuery();\n          }}\n        />\n      ) : (\n        <div>{hasExtensionComponents() ? renderExtensionsComponents() : defaultQueryBoxComponent}</div>\n      )}\n    </CardContent>\n  );\n};\n\nexport default NeoCardSettingsContent;\n","import React from 'react';\nimport { ReportItemContainer } from '../CardStyle';\nimport NeoCardSettingsHeader from './CardSettingsHeader';\nimport NeoCardSettingsContent from './CardSettingsContent';\nimport NeoCardSettingsFooter from './CardSettingsFooter';\nimport { CardContent } from '@mui/material';\nimport { CARD_HEADER_HEIGHT } from '../../config/CardConfig';\n\nconst NeoCardSettings = ({\n  settingsOpen,\n  pagenumber,\n  reportId,\n  query,\n  database, // Current database related to the report\n  databaseList, // List of databases the user can choose from ('system' is filtered out)\n  width,\n  height,\n  type,\n  reportSettings,\n  reportSettingsOpen,\n  fields,\n  schema,\n  heightPx,\n  extensions, // A set of enabled extensions.\n  onQueryUpdate,\n  onDatabaseChanged, // When the database related to a report is changed it must be stored in the report state\n  onRemovePressed,\n  onClonePressed,\n  onReportSettingUpdate,\n  onToggleCardSettings,\n  onTypeUpdate,\n  setActive,\n  onReportHelpButtonPressed,\n  onToggleReportSettings,\n  dashboardSettings,\n  expanded,\n  onToggleCardExpand,\n}) => {\n  const reportHeight = heightPx - CARD_HEADER_HEIGHT + 19;\n\n  const cardSettingsHeader = (\n    <NeoCardSettingsHeader\n      expanded={expanded}\n      onToggleCardExpand={onToggleCardExpand}\n      onRemovePressed={onRemovePressed}\n      onClonePressed={onClonePressed}\n      onReportHelpButtonPressed={onReportHelpButtonPressed}\n      fullscreenEnabled={dashboardSettings.fullscreenEnabled}\n      onToggleCardSettings={(e) => {\n        setActive(reportSettings.autorun !== undefined ? reportSettings.autorun : true);\n        onToggleCardSettings(e);\n      }}\n    />\n  );\n\n  // TODO - instead of hiding everything based on settingsopen, only hide the components that slow down render (cypher editor)\n  const cardSettingsContent = settingsOpen ? (\n    <NeoCardSettingsContent\n      pagenumber={pagenumber}\n      reportId={reportId}\n      query={query}\n      database={database}\n      reportSettings={reportSettings}\n      width={width}\n      height={height}\n      type={type}\n      extensions={extensions}\n      databaseList={databaseList}\n      onDatabaseChanged={onDatabaseChanged}\n      onQueryUpdate={onQueryUpdate}\n      onReportSettingUpdate={onReportSettingUpdate}\n      onTypeUpdate={onTypeUpdate}\n      forceRunQuery={onToggleCardSettings}\n    ></NeoCardSettingsContent>\n  ) : (\n    <CardContent className='n-py-2' />\n  );\n\n  const cardSettingsFooter = settingsOpen ? (\n    <NeoCardSettingsFooter\n      type={type}\n      fields={fields}\n      schema={schema}\n      extensions={extensions}\n      reportSettings={reportSettings}\n      reportSettingsOpen={reportSettingsOpen}\n      onToggleReportSettings={onToggleReportSettings}\n      onReportSettingUpdate={onReportSettingUpdate}\n    ></NeoCardSettingsFooter>\n  ) : (\n    <div></div>\n  );\n\n  return (\n    <div\n      className={`card-view n-bg-palette-neutral-bg-weak n-text-palette-neutral-text-default ${\n        expanded ? 'expanded' : ''\n      } n-overflow-y-auto n-h-full`}\n    >\n      {cardSettingsHeader}\n      <ReportItemContainer style={{ height: reportHeight }} className='-n-mt-2'>\n        {cardSettingsContent}\n        {cardSettingsFooter}\n      </ReportItemContainer>\n    </div>\n  );\n};\n\nexport default NeoCardSettings;\n","import React, { useEffect } from 'react';\nimport { Badge, CardHeader, Dialog, DialogContent, DialogTitle, TextField, Tooltip } from '@mui/material';\nimport debounce from 'lodash/debounce';\nimport { useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { replaceDashboardParameters } from '../../chart/ChartUtils';\n\nimport { IconButton } from '@neo4j-ndl/react';\nimport {\n  DragIcon,\n  EllipsisVerticalIconOutline,\n  ArrowPathIconOutline,\n  ExpandIcon,\n  ShrinkIcon,\n  CameraIconSolid,\n  InformationCircleIconOutline,\n  XMarkIconOutline,\n} from '@neo4j-ndl/react/icons';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst NeoCardViewHeader = ({\n  title,\n  description,\n  editable,\n  onTitleUpdate,\n  fullscreenEnabled,\n  downloadImageEnabled,\n  refreshButtonEnabled,\n  onToggleCardSettings,\n  onManualRefreshCard,\n  onDownloadImage,\n  onToggleCardExpand,\n  expanded,\n  parameters,\n}) => {\n  const [text, setText] = React.useState(title);\n  const [parsedText, setParsedText] = React.useState(title);\n  const [editing, setEditing] = React.useState(false);\n  const [descriptionModalOpen, setDescriptionModalOpen] = React.useState(false);\n\n  function replaceParamsOnString(s, p) {\n    let parsed: string;\n    parsed = replaceDashboardParameters(s, p);\n    return parsed;\n  }\n\n  // Ensure that we only trigger a text update event after the user has stopped typing.\n  const debouncedTitleUpdate = useCallback(debounce(onTitleUpdate, 250), []);\n\n  useEffect(() => {\n    let titleParsed = replaceParamsOnString(`${title}`, parameters);\n    if (!editing) {\n      setParsedText(titleParsed);\n    }\n  }, [editing, parameters]);\n\n  useEffect(() => {\n    // Reset text to the dashboard state when the page gets reorganized.\n    if (text !== title) {\n      setText(title);\n    }\n  }, [title]);\n\n  const theme = createTheme({\n    typography: {\n      fontFamily: \"'Nunito Sans', sans-serif !important\",\n      allVariants: { color: 'rgb(var(--palette-neutral-text-weak))' },\n    },\n    palette: {\n      text: {\n        primary: 'rgb(var(--palette-neutral-text))',\n      },\n      action: {\n        disabled: 'rgb(var(--palette-neutral-text-weak))',\n      },\n    },\n  });\n\n  const cardTitle = (\n    <ThemeProvider theme={theme}>\n      <table style={{ width: '100%' }}>\n        <tbody>\n          <tr>\n            {editable ? (\n              <td>\n                <IconButton\n                  className='n-mb-3 n-relative -n-left-3 drag-handle'\n                  clean\n                  size='medium'\n                  aria-label={'drag'}\n                  onClick={() => {}}\n                >\n                  <DragIcon />\n                </IconButton>\n              </td>\n            ) : (\n              <></>\n            )}\n            <td style={{ width: '100%' }}>\n              <TextField\n                id='standard-outlined'\n                onFocus={() => {\n                  setEditing(true);\n                }}\n                onBlur={() => {\n                  setEditing(false);\n                }}\n                className={'no-underline large'}\n                label=''\n                disabled={!editable}\n                placeholder='Report name...'\n                fullWidth\n                maxRows={4}\n                value={editing ? text : parsedText !== ' ' ? parsedText : ''}\n                onChange={(event) => {\n                  setText(event.target.value);\n                  debouncedTitleUpdate(event.target.value);\n                }}\n                size={'small'}\n                style={{ paddingTop: '0px important!' }}\n                variant={'standard'}\n                sx={{\n                  '& .MuiInputBase-input.Mui-disabled': {\n                    WebkitTextFillColor: 'inherit',\n                  },\n                }}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ThemeProvider>\n  );\n\n  const descriptionEnabled = description && description.length > 0;\n\n  // TODO: all components like buttons should probably be seperate files\n  const settingsButton = (\n    <Tooltip title='Settings' aria-label='settings' disableInteractive>\n      <IconButton aria-label='settings' onClick={onToggleCardSettings} clean size='medium'>\n        <EllipsisVerticalIconOutline />\n      </IconButton>\n    </Tooltip>\n  );\n\n  const refreshButton = (\n    <Tooltip title='Refresh' aria-label='refresh' disableInteractive>\n      <IconButton aria-label='refresh' onClick={onManualRefreshCard} clean size='medium'>\n        <ArrowPathIconOutline />\n      </IconButton>\n    </Tooltip>\n  );\n\n  const maximizeButton = (\n    <Tooltip title='Maximize' aria-label='maximize' disableInteractive>\n      <IconButton aria-label='maximize' onClick={onToggleCardExpand} clean size='medium'>\n        <ExpandIcon />\n      </IconButton>\n    </Tooltip>\n  );\n\n  const unMaximizeButton = (\n    <IconButton aria-label='un-maximize' onClick={onToggleCardExpand} clean size='medium'>\n      <ShrinkIcon />\n    </IconButton>\n  );\n\n  const downloadImageButton = (\n    <Tooltip title='Download as Image' aria-label='download' disableInteractive>\n      <IconButton onClick={onDownloadImage} aria-label='download csv' clean size='medium'>\n        <CameraIconSolid />\n      </IconButton>\n    </Tooltip>\n  );\n\n  const descriptionButton = (\n    <Tooltip title='Details' aria-label='details' disableInteractive>\n      <IconButton onClick={() => setDescriptionModalOpen(true)} aria-label='details' clean size='medium'>\n        <InformationCircleIconOutline />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return (\n    <>\n      <Dialog\n        maxWidth={'lg'}\n        open={descriptionModalOpen}\n        onClose={() => setDescriptionModalOpen(false)}\n        aria-labelledby='form-dialog-title'\n      >\n        <DialogTitle id='form-dialog-title'>\n          {title}\n          <IconButton\n            onClick={() => setDescriptionModalOpen(false)}\n            style={{ padding: '3px', float: 'right' }}\n            aria-label={'rect badge'}\n            clean\n          >\n            <XMarkIconOutline />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent style={{ minWidth: '400px' }}>\n          <div>\n            <base target='_blank' /> <ReactMarkdown plugins={[gfm]} children={description} />\n          </div>\n        </DialogContent>\n      </Dialog>\n      <CardHeader\n        style={{ height: '72px' }}\n        action={\n          <>\n            {downloadImageEnabled ? downloadImageButton : <></>}\n            {fullscreenEnabled ? expanded ? unMaximizeButton : maximizeButton : <></>}\n            {descriptionEnabled ? descriptionButton : <></>}\n            {refreshButtonEnabled ? refreshButton : <></>}\n            {editable ? settingsButton : <></>}\n          </>\n        }\n        title={cardTitle}\n      />\n    </>\n  );\n};\n\nexport default NeoCardViewHeader;\n","import React from 'react';\nimport { CardActions, FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { categoricalColorSchemes } from '../../config/ColorConfig';\nimport { getReportTypes } from '../../extensions/ExtensionUtils';\nimport { SELECTION_TYPES } from '../../config/CardConfig';\nimport { Dropdown, Label } from '@neo4j-ndl/react';\n\nconst NeoCardViewFooter = ({\n  fields,\n  settings,\n  selection,\n  type,\n  extensions,\n  showOptionalSelections,\n  onSelectionUpdate,\n  dashboardSettings,\n}) => {\n  /**\n   * For each selectable field in the visualization, give the user an option to select them from the query output fields.\n   */\n  const reportTypes = getReportTypes(extensions);\n  const selectableFields = reportTypes[type].selection;\n  const selectables = selectableFields ? Object.keys(selectableFields) : [];\n  const nodeColorScheme = settings && settings.nodeColorScheme ? settings.nodeColorScheme : 'neodash';\n  const hideSelections = settings && settings.hideSelections ? settings.hideSelections : false;\n  const { ignoreLabelColors } = reportTypes[type];\n  if (!fields || fields.length == 0 || hideSelections) {\n    return <div></div>;\n  }\n  return (\n    <CardActions\n      style={{\n        position: 'relative',\n        paddingLeft: '15px',\n        overflowX: 'scroll',\n        paddingBottom: '100px',\n      }}\n      disableSpacing\n    >\n      {selectables.map((selectable, index) => {\n        const selectionIsMandatory = !selectableFields[selectable].optional;\n\n        // Creates the component for node property selections.\n        if (selectableFields[selectable].type == SELECTION_TYPES.NODE_PROPERTIES) {\n          // Only show optional selections if we explicitly allow it.\n          if (showOptionalSelections || selectionIsMandatory) {\n            const totalColors = categoricalColorSchemes[nodeColorScheme]\n              ? categoricalColorSchemes[nodeColorScheme].length\n              : 0;\n            const fieldSelections = fields.map((field, i) => {\n              // TODO logically, it should be the last element in the field (node labels) array, as that is typically\n              // the most specific node label when we have multi-labels\n              const nodeLabel = field[0];\n              // TODO this convention that we have for storing node labels and properties in fields should be documented\n              // , and probably even converted to a generic type.\n              const discoveredProperties = field.slice(1);\n              const properties = (discoveredProperties ? [...discoveredProperties].sort() : []).concat([\n                '(label)',\n                '(id)',\n                '(no label)',\n              ]);\n              const color =\n                totalColors > 0 && !ignoreLabelColors\n                  ? categoricalColorSchemes[nodeColorScheme][i % totalColors]\n                  : 'lightgrey';\n              const inputColor =\n                dashboardSettings.theme === 'dark' ? 'var(--palette-dark-neutral-border-strong)' : 'rgba(0, 0, 0, 0.6)';\n              return (\n                <FormControl key={nodeLabel} size={'small'} variant='standard'>\n                  <InputLabel id={nodeLabel} style={{ color: inputColor }}>\n                    {nodeLabel}\n                  </InputLabel>\n                  <Select\n                    labelId={nodeLabel}\n                    id={nodeLabel}\n                    className={'MuiChip-root'}\n                    style={{ backgroundColor: color, paddingLeft: 10, minWidth: 75, marginRight: 5 }}\n                    onChange={(e) => onSelectionUpdate(nodeLabel, e.target.value)}\n                    value={selection && selection[nodeLabel] ? selection[nodeLabel] : ''}\n                  >\n                    {/* Render choices */}\n                    {properties.length &&\n                      properties.map &&\n                      properties.map((field) => {\n                        return (\n                          <MenuItem key={field} value={field}>\n                            {field}\n                          </MenuItem>\n                        );\n                      })}\n                  </Select>\n                </FormControl>\n              );\n            });\n            return fieldSelections;\n          }\n        }\n        // Creates the selection for all other types of components\n        if (\n          selectableFields[selectable].type == SELECTION_TYPES.LIST ||\n          selectableFields[selectable].type == SELECTION_TYPES.NUMBER ||\n          selectableFields[selectable].type == SELECTION_TYPES.NUMBER_OR_DATETIME ||\n          selectableFields[selectable].type == SELECTION_TYPES.TEXT\n        ) {\n          if (selectionIsMandatory || showOptionalSelections) {\n            const sortedFields = fields ? [...fields].sort() : [];\n\n            const fieldsToRender = selectionIsMandatory ? sortedFields : sortedFields.concat(['(none)']);\n            return (\n              <FormControl key={index} size={'small'}>\n                <Dropdown\n                  id={selectable}\n                  label={selectableFields[selectable].label}\n                  type='select'\n                  selectProps={{\n                    onChange: (newValue) =>\n                      (newValue && selectableFields[selectable].multiple\n                        ? onSelectionUpdate(\n                            selectable,\n                            newValue.map((v) => v.value)\n                          )\n                        : onSelectionUpdate(selectable, newValue.value)),\n                    options: fieldsToRender.map((option) => ({ label: option, value: option })),\n                    value: selectableFields[selectable].multiple\n                      ? selection[selectable].map((sel) => ({ label: sel, value: sel }))\n                      : { label: selection[selectable], value: selection[selectable] },\n                    isMulti: selectableFields[selectable].multiple,\n                    isClearable: false,\n                    menuPortalTarget: document.querySelector('#overlay'),\n                  }}\n                  fluid\n                  style={{\n                    minWidth: selectableFields[selectable].multiple ? 170 : 120,\n                    marginRight: 20,\n                    display: 'inline-block',\n                  }}\n                  placeholder={selectableFields[selectable].multiple ? 'Select (multiple)' : 'Select'}\n                ></Dropdown>\n              </FormControl>\n            );\n          }\n        }\n      })}\n    </CardActions>\n  );\n};\n\nexport default NeoCardViewFooter;\n","import React, { useEffect } from 'react';\nimport NeoReport from './Report';\nimport { withErrorBoundary, useErrorBoundary } from 'react-use-error-boundary';\nimport NeoCodeViewerComponent from '../component/editor/CodeViewerComponent';\n\n/**\n * Error boundary wrapping the report object, to ensure that unexpected errors are handled at the report level.\n */\nconst ErrorBoundary = withErrorBoundary(({ children, resetTrigger }) => {\n  const [error, resetError] = useErrorBoundary();\n\n  useEffect(() => {\n    if (resetTrigger && error) {\n      resetError();\n    }\n  }, [resetTrigger]);\n\n  if (error) {\n    return (\n      <NeoCodeViewerComponent\n        value={`An unexpected error occurred. Try refreshing the component. \\n\\n${error.stack}`}\n      />\n    );\n  }\n  return children;\n});\n\nexport const NeoReportWrapper = ({\n  id,\n  database,\n  query,\n  lastRunTimestamp,\n  parameters,\n  disabled,\n  selection,\n  fields,\n  settings,\n  setFields,\n  setGlobalParameter,\n  getGlobalParameter,\n  updateReportSetting,\n  createNotification,\n  dimensions,\n  rowLimit,\n  queryTimeLimit,\n  type,\n  expanded,\n  extensions,\n  ChartType,\n}) => {\n  return (\n    <ErrorBoundary resetTrigger={disabled}>\n      <NeoReport\n        id={id}\n        database={database}\n        query={query}\n        lastRunTimestamp={lastRunTimestamp}\n        parameters={parameters}\n        disabled={disabled}\n        selection={selection}\n        fields={fields}\n        settings={settings}\n        setFields={setFields}\n        setGlobalParameter={setGlobalParameter}\n        getGlobalParameter={getGlobalParameter}\n        updateReportSetting={updateReportSetting}\n        createNotification={createNotification}\n        dimensions={dimensions}\n        rowLimit={rowLimit}\n        queryTimeLimit={queryTimeLimit}\n        type={type}\n        expanded={expanded}\n        extensions={extensions}\n        ChartType={ChartType}\n      />\n    </ErrorBoundary>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ReportItemContainer } from '../CardStyle';\nimport NeoCardViewHeader from './CardViewHeader';\nimport NeoCardViewFooter from './CardViewFooter';\nimport { CardContent } from '@mui/material';\nimport NeoCodeEditorComponent from '../../component/editor/CodeEditorComponent';\nimport { CARD_FOOTER_HEIGHT, CARD_HEADER_HEIGHT } from '../../config/CardConfig';\nimport { getReportTypes } from '../../extensions/ExtensionUtils';\nimport NeoCodeViewerComponent from '../../component/editor/CodeViewerComponent';\nimport { NeoReportWrapper } from '../../report/ReportWrapper';\nimport { identifyStyleRuleParameters } from '../../extensions/styling/StyleRuleEvaluator';\nimport { IconButton } from '@neo4j-ndl/react';\nimport { PlayCircleIconSolid } from '@neo4j-ndl/react/icons';\nimport { extensionEnabled } from '../../utils/ReportUtils';\nimport { objMerge } from '../../utils/ObjectManipulation';\nimport { REPORT_TYPES } from '../../config/ReportConfig';\n\nconst NeoCardView = ({\n  id,\n  title,\n  database,\n  query,\n  globalParameters,\n  widthPx,\n  heightPx,\n  fields,\n  extensions,\n  active,\n  setActive,\n  onDownloadImage,\n  type,\n  selection,\n  dashboardSettings,\n  settings,\n  updateReportSetting,\n  createNotification,\n  settingsOpen,\n  editable,\n  onGlobalParameterUpdate,\n  onSelectionUpdate,\n  onToggleCardSettings,\n  onTitleUpdate,\n  onFieldsUpdate,\n  expanded,\n  onToggleCardExpand,\n}) => {\n  const reportHeight = heightPx - CARD_FOOTER_HEIGHT - CARD_HEADER_HEIGHT + 20;\n  const cardHeight = heightPx - CARD_FOOTER_HEIGHT + 23;\n  const ref = React.useRef();\n\n  const settingsSelector = Object.keys(\n    Object.fromEntries(Object.entries(REPORT_TYPES[type]?.settings || {}).filter(([_, value]) => value.refresh))\n  ).reduce((obj, key) => {\n    return Object.assign(obj, {\n      [key]: settings[key],\n    });\n  }, {});\n\n  const [lastRunTimestamp, setLastRunTimestamp] = useState(Date.now());\n\n  // TODO : selectorChange should handle every case where query execution needs to be re-executed\n  // e.g. Change of query, type, some advanced settings...\n  const [selectorChange, setSelectorChange] = useState(false);\n\n  const getLocalParameters = (parse_string, drilldown = true): unknown => {\n    if (!parse_string || !globalParameters) {\n      return {};\n    }\n\n    let re = /(?:^|\\W|%20)\\$(\\w+)(?!\\w)/g;\n    let match;\n\n    // If the report styling extension is enabled, extend the list of local (relevant) parameters with those used by the style rules.\n    const styleRules = settings.styleRules ? settings.styleRules : [];\n    const styleParams = extensionEnabled(extensions, 'styling') ? identifyStyleRuleParameters(styleRules) : [];\n\n    // Similarly, if the forms extension is enabled, extract nested parameters used by parameter selectors inside the form.\n    const formFields = settings.formFields ? settings.formFields : [];\n    const formsParams =\n      drilldown && extensionEnabled(extensions, 'forms')\n        ? formFields\n            .map((f) => {\n              return Object.keys(getLocalParameters(f.query, false));\n            })\n            .flat()\n        : [];\n\n    let localQueryVariables: string[] = [...styleParams, ...formsParams];\n    while ((match = re.exec(parse_string))) {\n      localQueryVariables.push(match[1]);\n    }\n\n    let params = Object.fromEntries(\n      Object.entries(globalParameters).filter(([local]) => localQueryVariables.includes(local))\n    );\n\n    return settings.ignoreNonDefinedParams\n      ? objMerge(Object.fromEntries(localQueryVariables.map((name) => [name, null])), params)\n      : params;\n  };\n\n  // @ts-ignore\n  const reportHeader = (\n    <NeoCardViewHeader\n      title={title}\n      editable={editable}\n      description={settings.description}\n      fullscreenEnabled={settings.fullscreenEnabled}\n      downloadImageEnabled={settings.downloadImageEnabled}\n      refreshButtonEnabled={settings.refreshButtonEnabled}\n      onTitleUpdate={onTitleUpdate}\n      onToggleCardSettings={onToggleCardSettings}\n      onManualRefreshCard={() => setLastRunTimestamp(Date.now())}\n      settings={settings}\n      onDownloadImage={onDownloadImage}\n      onToggleCardExpand={onToggleCardExpand}\n      expanded={expanded}\n      parameters={getLocalParameters(title)}\n    ></NeoCardViewHeader>\n  );\n\n  // @ts-ignore\n  const reportFooter = active ? (\n    <NeoCardViewFooter\n      fields={fields}\n      settings={settings}\n      extensions={extensions}\n      selection={selection}\n      type={type}\n      onSelectionUpdate={onSelectionUpdate}\n      showOptionalSelections={settings.showOptionalSelections}\n      dashboardSettings={dashboardSettings}\n    ></NeoCardViewFooter>\n  ) : (\n    <></>\n  );\n\n  const localParameters = { ...getLocalParameters(query), ...getLocalParameters(settings.drilldownLink) };\n  const reportTypes = getReportTypes(extensions);\n  const reportTypeHasNoFooter = reportTypes[type] && reportTypes[type].withoutFooter;\n  const withoutFooter = reportTypeHasNoFooter\n    ? reportTypes[type].withoutFooter\n    : (reportTypes[type] && !reportTypes[type].selection) || (settings && settings.hideSelections);\n\n  const getGlobalParameter = (key: string): unknown => {\n    return globalParameters ? globalParameters[key] : undefined;\n  };\n\n  useEffect(() => {\n    if (!settingsOpen) {\n      setLastRunTimestamp(Date.now());\n    }\n  }, [JSON.stringify(localParameters)]);\n\n  useEffect(() => {\n    if (!settingsOpen && (selectorChange || type === 'select')) {\n      setLastRunTimestamp(Date.now());\n    }\n    setSelectorChange(false);\n  }, [settingsOpen]);\n\n  useEffect(() => {\n    setSelectorChange(true);\n  }, [query, type, database, JSON.stringify(settingsSelector)]);\n\n  // TODO - understand why CardContent is throwing a warning based on this style config.\n  const cardContentStyle = {\n    paddingBottom: '0px',\n    paddingLeft: '0px',\n    paddingRight: '0px',\n    paddingTop: '0px',\n    width: '100%',\n    marginTop: '-9px',\n    height: expanded\n      ? withoutFooter\n        ? '100%'\n        : `calc(100% - ${CARD_FOOTER_HEIGHT}px)`\n      : withoutFooter\n      ? `${reportHeight + CARD_FOOTER_HEIGHT - (reportTypeHasNoFooter ? 0 : 20)}px`\n      : `${reportHeight}px`,\n    overflow: 'auto',\n  };\n  const reportContent = (\n    <CardContent ref={ref} style={cardContentStyle}>\n      {active ? (\n        <NeoReportWrapper\n          id={id}\n          query={query}\n          database={database}\n          parameters={localParameters}\n          lastRunTimestamp={lastRunTimestamp}\n          extensions={extensions}\n          disabled={settingsOpen}\n          selection={selection}\n          fields={fields}\n          settings={settings}\n          expanded={expanded}\n          rowLimit={dashboardSettings.disableRowLimiting ? 1000000 : reportTypes[type] && reportTypes[type].maxRecords}\n          dimensions={{ width: widthPx, height: heightPx }}\n          type={type}\n          ChartType={reportTypes[type] && reportTypes[type].component}\n          setGlobalParameter={onGlobalParameterUpdate}\n          getGlobalParameter={getGlobalParameter}\n          updateReportSetting={updateReportSetting}\n          createNotification={createNotification}\n          queryTimeLimit={dashboardSettings.queryTimeLimit ? dashboardSettings.queryTimeLimit : 20}\n          setFields={onFieldsUpdate}\n        />\n      ) : (\n        <>\n          <IconButton\n            style={{ float: 'right', marginRight: '9px' }}\n            aria-label='run'\n            onClick={() => {\n              setActive(true);\n            }}\n            clean\n          >\n            <PlayCircleIconSolid className='n-w-5 n-h-5' aria-label={'play'} />\n          </IconButton>\n          <NeoCodeEditorComponent\n            value={query}\n            language={'cypher'}\n            editable={false}\n            style={{\n              border: '1px solid lightgray',\n              borderRight: '35px solid #eee',\n              marginTop: '0px',\n              marginLeft: '10px',\n              marginRight: '10px',\n            }}\n            onChange={() => {}}\n            placeholder={'No query specified...'}\n          />\n        </>\n      )}\n    </CardContent>\n  );\n\n  return (\n    <div\n      className={`card-view n-bg-palette-neutral-bg-weak n-text-palette-neutral-text-default ${\n        expanded ? 'expanded' : ''\n      }`}\n      style={settings && settings.backgroundColor ? { backgroundColor: settings.backgroundColor } : {}}\n    >\n      {reportHeader}\n      {/* if there's no selection for this report, we don't have a footer, so the report can be taller. */}\n      <ReportItemContainer\n        style={{ height: expanded ? (withoutFooter ? 'calc(100% - 69px)' : 'calc(100% - 49px)') : cardHeight }}\n      >\n        {reportTypes[type] ? (\n          reportContent\n        ) : (\n          <NeoCodeViewerComponent value={'Invalid report type. Are you missing an extension?'} />\n        )}\n        {reportTypes[type] ? reportFooter : <></>}\n      </ReportItemContainer>\n    </div>\n  );\n};\n\nexport default NeoCardView;\n","import { useConnection } from 'use-neo4j';\nimport React from 'react';\nimport isEqual from 'lodash.isequal';\n/**\n * Updates the Neo4j context when noticing an update in the global connection state.\n * TODO - there's probably a better way to do this, but I'm not sure how at the moment.\n */\nconst NeoDashboardConnectionUpdateHandler = ({ pagenumber, connection, onConnectionUpdate }) => {\n  const [existingConnection, setExistingConnection] = React.useState(null);\n  if (!isEqual(connection, existingConnection)) {\n    // Only trigger connection settings refreshes if the connection was once set before.\n    if (existingConnection != null) {\n      useConnection(connection.protocol, connection.url, connection.port, connection.username, connection.password);\n      onConnectionUpdate(pagenumber);\n    }\n    setExistingConnection(connection);\n  }\n  return <div></div>;\n};\n\nexport default NeoDashboardConnectionUpdateHandler;\n","export const GRID_COMPACTION_TYPE = 'vertical'; // Can be set to vertical or horizontal or none.\n","import React from 'react';\nimport NeoPage from '../page/Page';\nimport NeoDashboardHeader from './header/DashboardHeader';\nimport NeoDashboardTitle from './header/DashboardTitle';\nimport NeoDashboardHeaderPageList from './header/DashboardHeaderPageList';\nimport { createDriver, Neo4jProvider } from 'use-neo4j';\nimport { applicationGetConnection, applicationGetStandaloneSettings } from '../application/ApplicationSelectors';\nimport { connect } from 'react-redux';\nimport NeoDashboardConnectionUpdateHandler from '../component/misc/DashboardConnectionUpdateHandler';\nimport { forceRefreshPage } from '../page/PageActions';\nimport { getPageNumber } from '../settings/SettingsSelectors';\nimport { createNotificationThunk } from '../page/PageThunks';\nimport { version } from '../modal/AboutModal';\nimport NeoDashboardSidebar from './sidebar/DashboardSidebar';\n\nconst Dashboard = ({\n  pagenumber,\n  connection,\n  standaloneSettings,\n  onConnectionUpdate,\n  onDownloadDashboardAsImage,\n  onAboutModalOpen,\n  resetApplication,\n}) => {\n  const [driver, setDriver] = React.useState(undefined);\n\n  // If no driver is yet instantiated, create a new one.\n  if (driver == undefined) {\n    const newDriver = createDriver(\n      connection.protocol,\n      connection.url,\n      connection.port,\n      connection.username,\n      connection.password,\n      { userAgent: `neodash/v${version}` }\n    );\n    setDriver(newDriver);\n  }\n  const content = (\n    <Neo4jProvider driver={driver}>\n      <NeoDashboardConnectionUpdateHandler\n        pagenumber={pagenumber}\n        connection={connection}\n        onConnectionUpdate={onConnectionUpdate}\n      />\n\n      {/* Navigation Bar */}\n      <div\n        className='n-w-screen n-flex n-flex-row n-items-center n-bg-neutral-bg-weak n-border-b'\n        style={{ borderColor: 'lightgrey' }}\n      >\n        <NeoDashboardHeader\n          connection={connection}\n          onDownloadImage={onDownloadDashboardAsImage}\n          onAboutModalOpen={onAboutModalOpen}\n          resetApplication={resetApplication}\n        ></NeoDashboardHeader>\n      </div>\n      {/* Main Page */}\n      <div\n        style={{\n          display: 'flex',\n          height: 'calc(40vh - 32px)',\n          minHeight: window.innerHeight - 62,\n          overflow: 'hidden',\n          position: 'relative',\n        }}\n      >\n        {!standaloneSettings.standalone || (standaloneSettings.standalone && standaloneSettings.standaloneAllowLoad) ? (\n          <NeoDashboardSidebar />\n        ) : (\n          <></>\n        )}\n        <div className='n-w-full n-h-full n-flex n-flex-col n-items-center n-justify-center n-rounded-md'>\n          <div className='n-w-full n-h-full n-overflow-y-scroll n-flex n-flex-row'>\n            {/* Main Content */}\n            <main className='n-flex-1 n-relative n-z-0 n-scroll-smooth n-w-full'>\n              <div className='n-absolute n-inset-0 page-spacing'>\n                <div className='page-spacing-overflow'>\n                  {/* The main content of the page */}\n\n                  <div>\n                    {standaloneSettings.standalonePassword &&\n                    standaloneSettings.standalonePasswordWarningHidden !== true ? (\n                      <div style={{ textAlign: 'center', color: 'red', paddingTop: 60, marginBottom: -50 }}>\n                        Warning: NeoDash is running with a plaintext password in config.json.\n                      </div>\n                    ) : (\n                      <></>\n                    )}\n                    <NeoDashboardTitle />\n                    <NeoDashboardHeaderPageList />\n                    <NeoPage></NeoPage>\n                  </div>\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    </Neo4jProvider>\n  );\n  return content;\n};\n\nconst mapStateToProps = (state) => ({\n  connection: applicationGetConnection(state),\n  pagenumber: getPageNumber(state),\n  standaloneSettings: applicationGetStandaloneSettings(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onConnectionUpdate: (pagenumber) => {\n    dispatch(\n      createNotificationThunk(\n        'Connection Updated',\n        'You have updated your Neo4j connection, your reports have been reloaded.'\n      )\n    );\n    dispatch(forceRefreshPage(pagenumber));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setDashboardTitle } from '../DashboardActions';\nimport { getDashboardSettings, getDashboardTheme, getDashboardTitle, getPages } from '../DashboardSelectors';\nimport { setConnectionModalOpen } from '../../application/ApplicationActions';\nimport { applicationGetStandaloneSettings, applicationGetCustomHeader } from '../../application/ApplicationSelectors';\nimport { getDashboardIsEditable, getPageNumber } from '../../settings/SettingsSelectors';\nimport { NeoDashboardHeaderLogo } from './DashboardHeaderLogo';\nimport NeoAboutButton from './DashboardHeaderAboutButton';\nimport { NeoLogoutButton } from './DashboardHeaderLogoutButton';\nimport { NeoDashboardHeaderDownloadImageButton } from './DashboardHeaderDownloadImageButton';\nimport { updateDashboardSetting } from '../../settings/SettingsActions';\nimport { DarkModeSwitch } from 'react-toggle-dark-mode';\nimport { DASHBOARD_HEADER_BUTTON_COLOR } from '../../config/ApplicationConfig';\nimport { Tooltip } from '@mui/material';\n\nexport const NeoDashboardHeader = ({\n  standaloneSettings,\n  dashboardTitle,\n  customHeader,\n  connection,\n  settings,\n  onConnectionModalOpen,\n  onDownloadImage,\n  onAboutModalOpen,\n  resetApplication,\n  themeMode,\n  setTheme,\n}) => {\n  const downloadImageEnabled = settings ? settings.downloadImageEnabled : false;\n  const [dashboardTitleText, setDashboardTitleText] = React.useState(dashboardTitle);\n\n  const [isDarkMode, setDarkMode] = React.useState(themeMode !== 'light');\n\n  const toggleDarkMode = (checked: boolean) => {\n    setDarkMode(checked);\n  };\n\n  useEffect(() => {\n    // Reset text to the dashboard state when the page gets reorganized.\n    if (dashboardTitle !== dashboardTitleText) {\n      setDashboardTitleText(dashboardTitle);\n    }\n  }, [dashboardTitle]);\n\n  useEffect(() => {\n    setTheme(isDarkMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n  const content = (\n    <div className='n-relative n-bg-palette-neutral-bg-weak n-w-full'>\n      <div className='n-min-w-full'>\n        <div className='n-flex n-justify-between n-h-16 n-items-center n-py-6 md:n-justify-start md:n-space-x-10 n-mx-4'>\n          <NeoDashboardHeaderLogo resetApplication={resetApplication} />\n          <nav className='n-items-center n-justify-center n-flex n-flex-1 n-w-full n-font-semibold'>\n            {customHeader && customHeader.length > 0\n              ? `${customHeader}`\n              : `${connection.protocol}://${connection.url}:${connection.port}`}\n          </nav>\n          <div className='sm:n-flex n-items-center n-justify-end md:n-flex-1 lg:n-w-0 n-gap-6'>\n            <div className='n-flex n-flex-row n-gap-x-2'>\n              <Tooltip title={'Change Theme'} disableInteractive>\n                <div>\n                  <DarkModeSwitch\n                    className={'ndl-icon-btn n-p-2 ndl-large ndl-clean'}\n                    style={{}}\n                    checked={isDarkMode}\n                    onChange={toggleDarkMode}\n                    size={24}\n                    sunColor={DASHBOARD_HEADER_BUTTON_COLOR || '#000000'}\n                    moonColor={'#ff0000'}\n                  />\n                </div>\n              </Tooltip>\n\n              {downloadImageEnabled && <NeoDashboardHeaderDownloadImageButton onDownloadImage={onDownloadImage} />}\n              <NeoAboutButton connection={connection} onAboutModalOpen={onAboutModalOpen} />\n              <NeoLogoutButton standaloneSettings={standaloneSettings} onConnectionModalOpen={onConnectionModalOpen} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  return content;\n};\n\nconst mapStateToProps = (state) => ({\n  dashboardTitle: getDashboardTitle(state),\n  standaloneSettings: applicationGetStandaloneSettings(state),\n  customHeader: applicationGetCustomHeader(state),\n  pages: getPages(state),\n  settings: getDashboardSettings(state),\n  editable: getDashboardIsEditable(state),\n  pagenumber: getPageNumber(state),\n  themeMode: getDashboardTheme(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setDashboardTitle: (title: any) => {\n    dispatch(setDashboardTitle(title));\n  },\n\n  setTheme: (theme: string) => {\n    dispatch(updateDashboardSetting('theme', theme));\n  },\n\n  onConnectionModalOpen: () => {\n    dispatch(setConnectionModalOpen(true));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoDashboardHeader);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IconButton, Menu, MenuItems, MenuItem } from '@neo4j-ndl/react';\nimport {\n  QuestionMarkCircleIconOutline,\n  BookOpenIconOutline,\n  InformationCircleIconOutline,\n} from '@neo4j-ndl/react/icons';\nimport { Tooltip } from '@mui/material';\n\nimport { DASHBOARD_HEADER_BUTTON_COLOR } from '../../config/ApplicationConfig';\nimport StyleConfig from '../../config/StyleConfig';\nimport { getDashboardExtensions } from '../DashboardSelectors';\nimport { getExampleReports } from '../../extensions/ExtensionUtils';\nimport { NeoReportExamplesModal } from '../../modal/ReportExamplesModal';\nimport { enterHandler, openTab } from '../../utils/accessibility';\n\ntype HelpMenuOpenEvent = React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n\nawait StyleConfig.getInstance();\n\nexport const NeoAboutButton = ({ connection, onAboutModalOpen, extensions }) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const handleHelpMenuOpen = (event: HelpMenuOpenEvent) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleHelpMenuClose = () => {\n    setAnchorEl(null);\n  };\n  const menuOpen = Boolean(anchorEl);\n\n  const menuAboutHandler = (e) => {\n    onAboutModalOpen(e);\n    handleHelpMenuClose();\n  };\n\n  return (\n    <>\n      <Tooltip title={'Help and documentation'} disableInteractive>\n        <IconButton\n          className='logo-btn n-p-1'\n          aria-label={'help'}\n          style={DASHBOARD_HEADER_BUTTON_COLOR ? { color: DASHBOARD_HEADER_BUTTON_COLOR } : {}}\n          size='large'\n          onClick={handleHelpMenuOpen}\n          clean\n        >\n          <QuestionMarkCircleIconOutline className='header-icon' type='outline' />\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorOrigin={{\n          horizontal: 'right',\n          vertical: 'bottom',\n        }}\n        transformOrigin={{\n          horizontal: 'right',\n          vertical: 'top',\n        }}\n        anchorEl={anchorEl}\n        open={menuOpen}\n        onClose={handleHelpMenuClose}\n        size='large'\n      >\n        <MenuItems>\n          <NeoReportExamplesModal\n            extensions={extensions}\n            examples={getExampleReports(extensions)}\n            database={connection.database}\n          ></NeoReportExamplesModal>\n          <MenuItem\n            onKeyDown={(e) => enterHandler(e, () => openTab('https://neo4j.com/labs/neodash/2.4/user-guide/'))}\n            onClick={() => openTab('https://neo4j.com/labs/neodash/2.4/user-guide/')}\n            title={'Documentation'}\n            icon={<BookOpenIconOutline />}\n          />\n          <MenuItem\n            title={'About'}\n            onClick={menuAboutHandler}\n            onKeyDown={(e) => enterHandler(e, menuAboutHandler)}\n            icon={<InformationCircleIconOutline />}\n          />\n        </MenuItems>\n      </Menu>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  extensions: getDashboardExtensions(state),\n});\n\nexport default connect(mapStateToProps, null)(NeoAboutButton);\n","import React from 'react';\nimport { IconButton } from '@neo4j-ndl/react';\nimport { Tooltip } from '@mui/material';\nimport { CameraIconSolid } from '@neo4j-ndl/react/icons';\n\nimport { DASHBOARD_HEADER_BUTTON_COLOR } from '../../config/ApplicationConfig';\nimport StyleConfig from '../../config/StyleConfig';\n\nawait StyleConfig.getInstance();\n\nexport const NeoDashboardHeaderDownloadImageButton = (onDownloadImage) => {\n  const content = (\n    <Tooltip title={'Download Dashboard as Image'} disableInteractive>\n      <IconButton\n        aria-label={'camera'}\n        style={DASHBOARD_HEADER_BUTTON_COLOR ? { color: DASHBOARD_HEADER_BUTTON_COLOR } : {}}\n        onClick={() => onDownloadImage()}\n        size='large'\n        clean\n      >\n        <CameraIconSolid aria-label={'camera icon'} />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return content;\n};\n\nexport default NeoDashboardHeaderDownloadImageButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IconButton } from '@neo4j-ndl/react';\nimport { Tooltip } from '@mui/material';\n\nimport { DASHBOARD_HEADER_BUTTON_COLOR } from '../../config/ApplicationConfig';\nimport StyleConfig from '../../config/StyleConfig';\nimport { ArrowRightOnRectangleIconOutline } from '@neo4j-ndl/react/icons';\n\nawait StyleConfig.getInstance();\n\nexport const NeoLogoutButton = ({ standaloneSettings, onConnectionModalOpen }) => {\n  return standaloneSettings.standalone && !standaloneSettings.standaloneMultiDatabase ? (\n    <></>\n  ) : (\n    <Tooltip title={'Log out'} disableInteractive>\n      <IconButton\n        className='logo-btn n-p-1'\n        aria-label={'connection '}\n        style={DASHBOARD_HEADER_BUTTON_COLOR ? { color: DASHBOARD_HEADER_BUTTON_COLOR } : {}}\n        onClick={() => {\n          onConnectionModalOpen();\n        }}\n        size='large'\n        clean\n      >\n        <ArrowRightOnRectangleIconOutline className='header-icon' type='outline' />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoLogoutButton);\n","import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { setDashboardTitle } from '../DashboardActions';\nimport { getPages } from '../DashboardSelectors';\nimport debounce from 'lodash/debounce';\nimport { addPageThunk, movePageThunk } from '../DashboardThunks';\nimport { setConnectionModalOpen } from '../../application/ApplicationActions';\nimport { setPageNumberThunk } from '../../settings/SettingsThunks';\nimport { getDashboardIsEditable, getPageNumber } from '../../settings/SettingsSelectors';\nimport { applicationIsStandalone } from '../../application/ApplicationSelectors';\nimport { Tabs, IconButton } from '@neo4j-ndl/react';\nimport { PlusIconOutline } from '@neo4j-ndl/react/icons';\nimport DashboardHeaderPageTitle from './DashboardHeaderPageTitle';\nimport { DndContext, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, horizontalListSortingStrategy } from '@dnd-kit/sortable';\nimport { KeyboardSensor, MouseSensor } from '../../utils/accessibility';\n\n/**\n * The component responsible for rendering the list of pages, as well as the logic for adding, removing, selecting and updating pages.\n */\nexport const NeoDashboardHeaderPageList = ({\n  // standalone,\n  editable,\n  pages,\n  pagenumber,\n  addPage,\n  movePage,\n  selectPage,\n}) => {\n  const [canSwitchPages, setCanSwitchPages] = React.useState(true);\n\n  // We debounce several state changes to improve user experience.\n  const debouncedSetCanSwitchPages = useCallback(debounce(setCanSwitchPages, 50), []);\n\n  const pageAddButton = (\n    <IconButton aria-label={'add page'} className='n-relative -n-top-1' size='large' onClick={addPage} clean>\n      <PlusIconOutline />\n    </IconButton>\n  );\n\n  function handleDragEnd(event) {\n    const { active, over } = event;\n\n    if (!over || !editable) {\n      return;\n    }\n    if (active.id !== over.id) {\n      const oldIndex = parseInt(active.id.split('_')[1]);\n      const newIndex = parseInt(over.id.split('_')[1]);\n      movePage(oldIndex, newIndex);\n    }\n\n    debouncedSetCanSwitchPages(true);\n  }\n\n  const mouseSensor = useSensor(MouseSensor, {\n    activationConstraint: {\n      distance: 5, // Enable sort function when dragging 10px\n    },\n  });\n\n  const keySensor = useSensor(KeyboardSensor, {\n    keyboardCodes: {\n      start: ['Space'],\n      cancel: ['Escape'],\n      end: ['Space'],\n    },\n  });\n\n  const sensors = useSensors(mouseSensor, keySensor);\n\n  const content = (\n    <div className='n-flex n-flex-row n-w-full'>\n      <Tabs fill='underline' onChange={(tabId) => (canSwitchPages ? selectPage(tabId) : null)} value={pagenumber}>\n        <DndContext onDragEnd={handleDragEnd} sensors={sensors}>\n          <SortableContext items={pages} strategy={horizontalListSortingStrategy}>\n            {pages.map((page, i) => (\n              <DashboardHeaderPageTitle\n                title={page.title}\n                tabIndex={i}\n                key={`DashboardHeaderPageTitle_${i}`}\n                disabled={!editable}\n              />\n            ))}\n          </SortableContext>\n        </DndContext>\n      </Tabs>\n      {editable && pageAddButton}\n    </div>\n  );\n  return content;\n};\n\nconst mapStateToProps = (state) => ({\n  standalone: applicationIsStandalone(state),\n  pages: getPages(state),\n  editable: getDashboardIsEditable(state),\n  pagenumber: getPageNumber(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setDashboardTitle: (title: any) => {\n    dispatch(setDashboardTitle(title));\n  },\n  selectPage: (number: any) => {\n    dispatch(setPageNumberThunk(number));\n  },\n  addPage: () => {\n    dispatch(addPageThunk());\n  },\n  movePage: (oldIndex: number, newIndex: number) => {\n    dispatch(movePageThunk(oldIndex, newIndex));\n  },\n  onConnectionModalOpen: () => {\n    dispatch(setConnectionModalOpen(true));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoDashboardHeaderPageList);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { setPageTitle } from '../../page/PageActions';\nimport { removePageThunk } from '../DashboardThunks';\nimport { Tab, Menu, MenuItems, MenuItem, IconButton } from '@neo4j-ndl/react';\nimport { EllipsisHorizontalIconOutline, PencilIconOutline, TrashIconOutline } from '@neo4j-ndl/react/icons';\nimport { NeoDeletePageModal } from '../../modal/DeletePageModal';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\ntype MenuEditEvent = React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n\nexport const DashboardHeaderPageTitle = ({ title, tabIndex, removePage, setPageTitle, disabled = false }) => {\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const menuOpen = Boolean(anchorEl);\n  const [deleteModalOpen, setDeleteModalOpen] = React.useState(false);\n  const [editing, setEditing] = React.useState(false);\n  const [inputWidth, setInputWidth] = React.useState(125);\n  const handleMenuEditClick = (event: MenuEditEvent) => {\n    event.preventDefault();\n    setEditing(!editing);\n    setAnchorEl(null);\n  };\n\n  const handleDeleteModalClose = () => {\n    setAnchorEl(null);\n    setDeleteModalOpen(false);\n  };\n\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging, isSorting } = useSortable({\n    id: `tab_${tabIndex}`,\n  });\n\n  useEffect(() => {\n    // Reset text to the dashboard state when the page gets reorganized.\n    if ((isDragging || isSorting) && editing) {\n      setEditing(false);\n    }\n    setAnchorEl(null);\n  }, [isDragging, isSorting]);\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  const debouncedSetPageTitle = useCallback(debounce(setPageTitle, 200), []);\n\n  const [titleText, setTitleText] = React.useState(title);\n  useEffect(() => {\n    // Reset text to the dashboard state when the page gets reorganized.\n    if (titleText !== title) {\n      setTitleText(title);\n    }\n  }, [title]);\n\n  const content = (\n    <div className='n-inline-flex' ref={setNodeRef} style={style} id={`tab_${tabIndex}`} {...attributes} {...listeners}>\n      <Tab tabId={tabIndex} key={tabIndex}>\n        {!editing ? (\n          title ? (\n            title\n          ) : (\n            '(no title)'\n          )\n        ) : (\n          <form\n            onSubmit={(event) => {\n              if (editing) {\n                handleMenuEditClick(event);\n              }\n            }}\n          >\n            <input\n              data-no-dnd='true'\n              autoFocus={true}\n              value={titleText}\n              className=''\n              onBlur={(event) => {\n                if (editing) {\n                  handleMenuEditClick(event);\n                }\n              }}\n              onChange={(event) => {\n                const { target } = event;\n                target.style.width = '125px';\n                setInputWidth(target.scrollWidth);\n\n                if (disabled) {\n                  return;\n                }\n                setTitleText(event.target.value);\n                debouncedSetPageTitle(tabIndex, event.target.value);\n              }}\n              style={{\n                height: '1.9rem',\n                marginBottom: -5,\n                width: inputWidth,\n                paddingLeft: 5,\n                paddingRight: 5,\n              }}\n              placeholder='Page name...'\n            />\n          </form>\n        )}\n        {!disabled && !editing && (\n          <>\n            <IconButton\n              aria-label='Page actions'\n              className={classnames('n-relative n-top-1 visible-on-tab-hover', {\n                'open-menu': menuOpen,\n              })}\n              style={{ height: '1.1rem' }}\n              onClick={(e) => {\n                e.stopPropagation();\n                setAnchorEl(e.currentTarget);\n              }}\n              size='small'\n              clean\n            >\n              <EllipsisHorizontalIconOutline />\n            </IconButton>\n            <Menu anchorEl={anchorEl} open={menuOpen} onClose={() => setAnchorEl(null)}>\n              <MenuItems>\n                <MenuItem\n                  icon={<PencilIconOutline />}\n                  title={'Edit name'}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (editing) {\n                      debouncedSetPageTitle(tabIndex, titleText);\n                    }\n                    !disabled && handleMenuEditClick(e);\n                  }}\n                />\n                <MenuItem\n                  className='n-text-palette-danger-text'\n                  icon={<TrashIconOutline />}\n                  title='Delete'\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    !disabled && setDeleteModalOpen(true);\n                  }}\n                />\n              </MenuItems>\n            </Menu>\n          </>\n        )}\n      </Tab>\n      <NeoDeletePageModal\n        modalOpen={deleteModalOpen}\n        onRemove={() => removePage(tabIndex)}\n        handleClose={handleDeleteModalClose}\n      />\n    </div>\n  );\n\n  return content;\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPageTitle: (number: any, title: any) => {\n    dispatch(setPageTitle(number, title));\n  },\n  removePage: (index: any) => {\n    dispatch(removePageThunk(index));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(DashboardHeaderPageTitle);\n","import React, { Suspense, useCallback, useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { connect } from 'react-redux';\nimport { setDashboardTitle } from '../DashboardActions';\nimport { applicationGetConnection, applicationGetStandaloneSettings } from '../../application/ApplicationSelectors';\nimport { getDashboardTitle, getDashboardExtensions, getDashboardSettings } from '../DashboardSelectors';\nimport { getDashboardIsEditable } from '../../settings/SettingsSelectors';\nimport { updateDashboardSetting } from '../../settings/SettingsActions';\nimport { Typography, IconButton, Menu, MenuItems, TextInput } from '@neo4j-ndl/react';\nimport {\n  CheckBadgeIconOutline,\n  CheckIconOutline,\n  EllipsisHorizontalIconOutline,\n  PencilSquareIconOutline,\n} from '@neo4j-ndl/react/icons';\nimport NeoSettingsModal from '../../settings/SettingsModal';\nimport NeoExtensionsModal from '../../extensions/ExtensionsModal';\nimport { EXTENSIONS_DRAWER_BUTTONS } from '../../extensions/ExtensionConfig';\nimport { Tooltip } from '@mui/material';\nimport NeoExportModal from '../../modal/ExportModal';\nimport { setDraft } from '../../application/ApplicationActions';\n\ntype SettingsMenuOpenEvent = React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n\nexport const NeoDashboardTitle = ({\n  dashboardTitle,\n  setDashboardTitle,\n  editable,\n  standaloneSettings,\n  dashboardSettings,\n  extensions,\n  updateDashboardSetting,\n  connection,\n}) => {\n  const [dashboardTitleText, setDashboardTitleText] = React.useState(dashboardTitle);\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [editing, setEditing] = React.useState(false);\n  const debouncedDashboardTitleUpdate = useCallback(debounce(setDashboardTitle, 250), []);\n  const [inputWidth, setInputWidth] = React.useState(350);\n  const handleSettingsMenuOpen = (event: SettingsMenuOpenEvent) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleSettingsMenuClose = () => {\n    setAnchorEl(null);\n  };\n  const menuOpen = Boolean(anchorEl);\n\n  /**\n   * Function to render dynamically the buttons in the drawer related to all the extension that\n   * are enabled and present a button (EX: node-sidebar)\n   * @returns JSX element containing all the buttons related to their enabled extensions\n   */\n  function renderExtensionsButtons() {\n    const res = (\n      <>\n        {Object.keys(EXTENSIONS_DRAWER_BUTTONS).map((name) => {\n          const Component = extensions[name] ? EXTENSIONS_DRAWER_BUTTONS[name] : '';\n          return Component ? <Component key={`ext-${name}`} database={connection.database} /> : <></>;\n        })}\n      </>\n    );\n    return res;\n  }\n\n  useEffect(() => {\n    document.title = dashboardTitle ? `NeoDash - ${dashboardTitle}` : 'NeoDash - Neo4j Dashboard Builder';\n    // Reset text to the dashboard state when the page gets reorganized.\n    if (dashboardTitle !== dashboardTitleText) {\n      setDashboardTitleText(dashboardTitle);\n    }\n  }, [dashboardTitle]);\n  return (\n    <div className='n-flex n-flex-row n-flex-wrap n-justify-between n-items-center'>\n      {/* TODO : Replace with editable field if dashboard is editable */}\n      {/* only allow edit title if dashboard is not standalone - here we are in Title edit mode*/}\n      {editing && !standaloneSettings.standalone ? (\n        <div className={'n-flex n-flex-row n-flex-wrap n-justify-between n-items-center'}>\n          <form\n            onSubmit={() => {\n              if (editing) {\n                setEditing(false);\n              }\n            }}\n          >\n            <input\n              autoFocus={true}\n              value={dashboardTitleText}\n              style={{\n                height: '1.9rem',\n                fontSize: '1.875rem', // h3\n                fontWeight: 700, // h3\n                padding: 10,\n                width: inputWidth,\n              }}\n              placeholder='Dashboard name...'\n              onBlur={() => {\n                if (editing) {\n                  setEditing(false);\n                }\n              }}\n              onChange={(event) => {\n                if (editable) {\n                  const { target } = event;\n                  target.style.width = '350px';\n                  setInputWidth(target.scrollWidth);\n                  setDashboardTitleText(event.target.value);\n                  debouncedDashboardTitleUpdate(event.target.value);\n                }\n              }}\n            />\n          </form>\n          <Tooltip title={'Stop Editing'} disableInteractive>\n            <IconButton\n              className='logo-btn n-p-1'\n              aria-label={'stop-editing'}\n              size='large'\n              onClick={() => setEditing(false)}\n              clean\n            >\n              <CheckIconOutline className='header-icon' type='outline' />\n            </IconButton>\n          </Tooltip>\n        </div>\n      ) : !standaloneSettings.standalone /* out of edit mode - if Not Standalone we display the edit button */ ? (\n        <div className={'n-flex n-flex-row n-flex-wrap n-justify-between n-items-center'}>\n          <Typography variant='h3'>{dashboardTitle ? dashboardTitle : '(no title)'}</Typography>\n          <Tooltip title={'Edit'} disableInteractive>\n            {editable ? (\n              <IconButton\n                className='logo-btn n-p-1'\n                aria-label={'edit'}\n                size='large'\n                onClick={() => setEditing(true)}\n                clean\n              >\n                <PencilSquareIconOutline className='header-icon' type='outline' />\n              </IconButton>\n            ) : (\n              <></>\n            )}\n          </Tooltip>\n        </div>\n      ) : (\n        /* if we are in Standalone just title is displayed with no edit button */\n        <div className={'n-flex n-flex-row n-flex-wrap n-justify-between n-items-center'}>\n          <Typography variant='h3'>{dashboardTitle}</Typography>\n        </div>\n      )}\n      {/* If the app is not running in standalone mode (i.e. in edit mode) always show dashboard settings. */}\n      {!standaloneSettings.standalone ? (\n        <div className='flex flex-row flex-wrap items-center gap-2'>\n          {editable ? renderExtensionsButtons() : <></>}\n          <NeoSettingsModal dashboardSettings={dashboardSettings} updateDashboardSetting={updateDashboardSetting} />\n          {editable ? <NeoExportModal /> : <></>}\n          {editable ? <NeoExtensionsModal closeMenu={handleSettingsMenuClose} /> : <></>}\n        </div>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  dashboardTitle: getDashboardTitle(state),\n  editable: getDashboardIsEditable(state),\n  standaloneSettings: applicationGetStandaloneSettings(state),\n  dashboardSettings: getDashboardSettings(state),\n  extensions: getDashboardExtensions(state),\n  connection: applicationGetConnection(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setDashboardTitle: (title: any) => {\n    dispatch(setDashboardTitle(title));\n  },\n  updateDashboardSetting: (setting, value) => {\n    dispatch(setDraft(true));\n    dispatch(updateDashboardSetting(setting, value));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoDashboardTitle);\n","import React, { useContext, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getDashboardIsEditable, getPageNumber } from '../../settings/SettingsSelectors';\nimport { getDashboardSettings, getDashboardTitle } from '../DashboardSelectors';\nimport { Button, SideNavigation, SideNavigationGroupHeader, SideNavigationList, TextInput } from '@neo4j-ndl/react';\nimport { removeReportThunk } from '../../page/PageThunks';\nimport {\n  PlusIconOutline,\n  MagnifyingGlassIconOutline,\n  CircleStackIconOutline,\n  ArrowPathIconOutline,\n} from '@neo4j-ndl/react/icons';\n\nimport Tooltip from '@mui/material/Tooltip';\nimport { DashboardSidebarListItem } from './DashboardSidebarListItem';\nimport {\n  applicationGetConnection,\n  applicationGetConnectionDatabase,\n  applicationGetStandaloneSettings,\n  applicationIsStandalone,\n  dashboardIsDraft,\n} from '../../application/ApplicationSelectors';\nimport { setDraft } from '../../application/ApplicationActions';\nimport NeoDashboardSidebarLoadModal from './modal/DashboardSidebarLoadModal';\nimport { resetDashboardState } from '../DashboardActions';\nimport NeoDashboardSidebarCreateModal from './modal/DashboardSidebarCreateModal';\nimport NeoDashboardSidebarDatabaseMenu from './menu/DashboardSidebarDatabaseMenu';\nimport NeoDashboardSidebarDashboardMenu from './menu/DashboardSidebarDashboardMenu';\nimport {\n  deleteDashboardFromNeo4jThunk,\n  loadDashboardFromNeo4jThunk,\n  loadDashboardListFromNeo4jThunk,\n  loadDashboardThunk,\n  loadDatabaseListFromNeo4jThunk,\n  saveDashboardToNeo4jThunk,\n} from '../DashboardThunks';\nimport { Neo4jContext, Neo4jContextState } from 'use-neo4j/dist/neo4j.context';\nimport NeoDashboardSidebarSaveModal from './modal/DashboardSidebarSaveModal';\nimport { getDashboardJson } from '../../modal/ModalSelectors';\nimport NeoDashboardSidebarCreateMenu from './menu/DashboardSidebarCreateMenu';\nimport NeoDashboardSidebarImportModal from './modal/DashboardSidebarImportModal';\nimport { createUUID } from '../../utils/uuid';\nimport NeoDashboardSidebarExportModal from './modal/DashboardSidebarExportModal';\nimport NeoDashboardSidebarDeleteModal from './modal/DashboardSidebarDeleteModal';\nimport NeoDashboardSidebarInfoModal from './modal/DashboardSidebarInfoModal';\nimport NeoDashboardSidebarShareModal from './modal/DashboardSidebarShareModal';\nimport NeoDashboardSidebarAccessModal from './modal/DashboardSidebarAccessModal';\nimport LegacyShareModal from './modal/legacy/LegacyShareModal';\nimport { NEODASH_VERSION } from '../DashboardReducer';\n\n// Which (small) pop-up menu is currently open for the sidebar.\nenum Menu {\n  DASHBOARD = 0,\n  DATABASE = 1,\n  CREATE = 2,\n  NONE = 3,\n}\n\n// Which (large) pop-up modal is currently open for the sidebar.\nenum Modal {\n  CREATE = 0,\n  IMPORT = 1,\n  EXPORT = 2,\n  DELETE = 3,\n  SHARE = 4,\n  SHARE_LEGACY = 5,\n  INFO = 6,\n  LOAD = 7,\n  SAVE = 8,\n  NONE = 9,\n  ACCESS = 10,\n}\n\n// We use \"index = -1\" to represent a non-saved draft dashboard in the sidebar's dashboard list.\nconst UNSAVED_DASHBOARD_INDEX = -1;\n\n/**\n * A component responsible for rendering the sidebar on the left of the screen.\n */\nexport const NeoDashboardSidebar = ({\n  database,\n  connection,\n  title,\n  readonly,\n  draft,\n  setDraft,\n  dashboard,\n  resetLocalDashboard,\n  loadDashboard,\n  loadDatabaseListFromNeo4j,\n  loadDashboardListFromNeo4j,\n  loadDashboardFromNeo4j,\n  saveDashboardToNeo4j,\n  deleteDashboardFromNeo4j,\n  standaloneSettings,\n}) => {\n  const { driver } = useContext<Neo4jContextState>(Neo4jContext);\n  const [expanded, setOnExpanded] = useState(false);\n  const [selectedDashboardIndex, setSelectedDashboardIndex] = React.useState(UNSAVED_DASHBOARD_INDEX);\n  const [dashboardDatabase, setDashboardDatabase] = React.useState(database ? database : 'neo4j');\n  const [databases, setDatabases] = useState([]);\n  const [inspectedIndex, setInspectedIndex] = useState(UNSAVED_DASHBOARD_INDEX);\n  const [searchText, setSearchText] = useState('');\n  const [menuAnchor, setMenuAnchor] = useState<HTMLElement | null>(null);\n  const [menuOpen, setMenuOpen] = useState(Menu.NONE);\n  const [modalOpen, setModalOpen] = useState(Modal.NONE);\n  const [dashboards, setDashboards] = React.useState([]);\n  const [cachedDashboard, setCachedDashboard] = React.useState('');\n\n  const getDashboardListFromNeo4j = () => {\n    // Retrieves list of all dashboards stored in a given database.\n    loadDashboardListFromNeo4j(driver, dashboardDatabase, (list) => {\n      setDashboards(list);\n\n      // Update the UI to reflect the currently selected dashboard.\n      if (dashboard && dashboard.uuid) {\n        const index = list.findIndex((element) => element.uuid == dashboard.uuid);\n        setSelectedDashboardIndex(index);\n        if (index == UNSAVED_DASHBOARD_INDEX) {\n          // If we can't find the currently dashboard in the database, we are drafting a new one.\n          setDraft(true);\n        }\n      }\n    });\n  };\n\n  function createDashboard() {\n    // Creates new dashboard in draft state (not yet saved to Neo4j)\n    resetLocalDashboard();\n    setDraft(true);\n  }\n\n  function deleteDashboard(uuid) {\n    // Creates new dashboard in draft state (not yet saved to Neo4j)\n    deleteDashboardFromNeo4j(driver, dashboardDatabase, uuid, () => {\n      if (uuid == dashboard.uuid) {\n        setSelectedDashboardIndex(UNSAVED_DASHBOARD_INDEX);\n        resetLocalDashboard();\n        loadDashboardListFromNeo4j();\n        setDraft(true);\n      }\n      setTimeout(() => {\n        getDashboardListFromNeo4j();\n      }, 100);\n    });\n  }\n\n  return (\n    <div>\n      <NeoDashboardSidebarSaveModal\n        open={modalOpen == Modal.SAVE}\n        onConfirm={() => {\n          saveDashboardToNeo4j(\n            driver,\n            dashboardDatabase,\n            dashboard,\n            new Date().toISOString(),\n            connection.username,\n            () => {\n              // After saving successfully, refresh the list after a small delay.\n              // The new dashboard will always be on top (the latest), so we select index 0.\n              setDashboards([]);\n              setTimeout(() => {\n                getDashboardListFromNeo4j();\n                setSelectedDashboardIndex(0);\n                setDraft(false);\n              }, 100);\n            }\n          );\n        }}\n        overwrite={selectedDashboardIndex >= 0}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <NeoDashboardSidebarLoadModal\n        open={modalOpen == Modal.LOAD}\n        onConfirm={() => {\n          if (inspectedIndex == UNSAVED_DASHBOARD_INDEX) {\n            // Someone attempted to load the unsaved draft dashboard... this isn't possible, we create a fresh one.\n            setSelectedDashboardIndex(UNSAVED_DASHBOARD_INDEX);\n            createDashboard();\n          } else {\n            // Load one of the dashboards from the database.\n            setModalOpen(Modal.LOAD);\n            const { uuid } = dashboards[inspectedIndex];\n            loadDashboardFromNeo4j(driver, dashboardDatabase, uuid, (file) => {\n              setDraft(false);\n              loadDashboard(uuid, file);\n              setSelectedDashboardIndex(inspectedIndex);\n            });\n          }\n        }}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <NeoDashboardSidebarShareModal\n        connection={connection}\n        uuid={dashboards[inspectedIndex] && dashboards[inspectedIndex].uuid}\n        dashboardDatabase={dashboardDatabase}\n        open={modalOpen == Modal.SHARE}\n        onConfirm={() => {\n          setModalOpen(Modal.NONE);\n        }}\n        onLegacyShareClicked={() => setModalOpen(Modal.SHARE_LEGACY)}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <LegacyShareModal open={modalOpen == Modal.SHARE_LEGACY} handleClose={() => setModalOpen(Modal.NONE)} />\n\n      <NeoDashboardSidebarCreateModal\n        open={modalOpen == Modal.CREATE}\n        onConfirm={() => {\n          setModalOpen(Modal.NONE);\n          createDashboard();\n          setSelectedDashboardIndex(UNSAVED_DASHBOARD_INDEX);\n        }}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <NeoDashboardSidebarDeleteModal\n        open={modalOpen == Modal.DELETE}\n        title={dashboards[inspectedIndex] && dashboards[inspectedIndex].title}\n        onConfirm={() => {\n          setModalOpen(Modal.NONE);\n          if (dashboards[inspectedIndex]) {\n            deleteDashboard(dashboards[inspectedIndex].uuid);\n          }\n        }}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <NeoDashboardSidebarImportModal\n        open={modalOpen == Modal.IMPORT}\n        onImport={(text) => {\n          setModalOpen(Modal.NONE);\n          setDraft(true);\n          setSelectedDashboardIndex(UNSAVED_DASHBOARD_INDEX);\n          loadDashboard(createUUID(), text);\n        }}\n        handleClose={() => setModalOpen(Modal.NONE)}\n      />\n\n      <NeoDashboardSidebarInfoModal\n        open={modalOpen == Modal.INFO}\n        dashboard={dashboards[inspectedIndex]}\n        handleClose={() => {\n          setModalOpen(Modal.NONE);\n          setCachedDashboard('');\n        }}\n      />\n\n      <NeoDashboardSidebarExportModal\n        open={modalOpen == Modal.EXPORT}\n        dashboard={cachedDashboard}\n        handleClose={() => {\n          setModalOpen(Modal.NONE);\n          setCachedDashboard('');\n        }}\n      />\n\n      <NeoDashboardSidebarAccessModal\n        open={modalOpen == Modal.ACCESS}\n        database={dashboardDatabase}\n        dashboard={dashboards[inspectedIndex]}\n        handleClose={() => {\n          setModalOpen(Modal.NONE);\n          setCachedDashboard('');\n        }}\n      />\n\n      <SideNavigation\n        position='left'\n        type='overlay'\n        expanded={expanded}\n        onExpandedChange={(open) => {\n          setOnExpanded(open);\n          if (open) {\n            getDashboardListFromNeo4j();\n          }\n          // Wait until the sidebar has fully opened. Then trigger a resize event to align the grid layout.\n          const timeout = setTimeout(() => {\n            window.dispatchEvent(new Event('resize'));\n          }, 300);\n        }}\n      >\n        <SideNavigationList>\n          <NeoDashboardSidebarDatabaseMenu\n            databases={databases}\n            selected={dashboardDatabase}\n            setSelected={(newDatabase) => {\n              setDashboardDatabase(newDatabase);\n              // We changed the active dashboard database, reload the list in the sidebar.\n              loadDashboardListFromNeo4j(driver, newDatabase, (list) => {\n                setDashboards(list);\n                if (!readonly) {\n                  setDraft(true);\n                }\n              });\n            }}\n            open={menuOpen == Menu.DATABASE}\n            anchorEl={menuAnchor}\n            handleClose={() => {\n              setMenuOpen(Menu.NONE);\n              setMenuAnchor(null);\n            }}\n          />\n          <NeoDashboardSidebarDashboardMenu\n            draft={draft && selectedDashboardIndex == inspectedIndex}\n            open={menuOpen == Menu.DASHBOARD}\n            anchorEl={menuAnchor}\n            handleInfoClicked={() => {\n              setMenuOpen(Menu.NONE);\n              const d = dashboards[inspectedIndex];\n              loadDashboardFromNeo4j(driver, dashboardDatabase, d.uuid, (text) => {\n                setCachedDashboard(JSON.parse(text));\n              });\n              setModalOpen(Modal.INFO);\n            }}\n            handleDiscardClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.LOAD);\n            }}\n            handleSaveClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.SAVE);\n            }}\n            handleLoadClicked={() => {\n              setMenuOpen(Menu.NONE);\n              if (draft) {\n                setModalOpen(Modal.LOAD);\n              } else {\n                const d = dashboards[inspectedIndex];\n                loadDashboardFromNeo4j(driver, dashboardDatabase, d.uuid, (file) => {\n                  loadDashboard(d.uuid, file);\n                  setSelectedDashboardIndex(inspectedIndex);\n                });\n              }\n            }}\n            handleExportClicked={() => {\n              setMenuOpen(Menu.NONE);\n              const d = dashboards[inspectedIndex];\n              loadDashboardFromNeo4j(driver, dashboardDatabase, d.uuid, (text) => {\n                setCachedDashboard(JSON.parse(text));\n              });\n              setModalOpen(Modal.EXPORT);\n            }}\n            handleShareClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.SHARE);\n            }}\n            handleAccessClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.ACCESS);\n            }}\n            handleDeleteClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.DELETE);\n            }}\n            handleClose={() => {\n              setMenuOpen(Menu.NONE);\n              setMenuAnchor(null);\n            }}\n          />\n\n          <NeoDashboardSidebarCreateMenu\n            open={menuOpen == Menu.CREATE}\n            anchorEl={menuAnchor}\n            handleNewClicked={() => {\n              setMenuOpen(Menu.NONE);\n              if (draft) {\n                setModalOpen(Modal.CREATE);\n              } else {\n                setSelectedDashboardIndex(UNSAVED_DASHBOARD_INDEX);\n                createDashboard();\n              }\n            }}\n            handleImportClicked={() => {\n              setMenuOpen(Menu.NONE);\n              setModalOpen(Modal.IMPORT);\n            }}\n            handleClose={() => {\n              setMenuOpen(Menu.NONE);\n              setMenuAnchor(null);\n            }}\n          />\n\n          <SideNavigationGroupHeader>\n            <div style={{ display: 'inline-block', width: '100%' }}>\n              <span className='n-text-palette-neutral-text-weak' style={{ lineHeight: '28px' }}>\n                Dashboards\n              </span>\n              <Tooltip title='Refresh' aria-label='refresh' disableInteractive>\n                <Button\n                  aria-label={'refresh'}\n                  fill='text'\n                  size='small'\n                  color='neutral'\n                  style={{\n                    float: 'right',\n                    marginLeft: '3px',\n                    marginRight: '12px',\n                    paddingLeft: 0,\n                    paddingRight: '3px',\n                  }}\n                  onClick={() => {\n                    getDashboardListFromNeo4j();\n                    // When reloading, if the dashboard is not in DRAFT mode, we can directly refresh it.\n                    if (!draft) {\n                      const d = dashboards[selectedDashboardIndex];\n                      loadDashboardFromNeo4j(driver, dashboardDatabase, d.uuid, (file) => {\n                        loadDashboard(d.uuid, file);\n                      });\n                    }\n                  }}\n                >\n                  <ArrowPathIconOutline className='btn-icon-base-r-m' />\n                </Button>\n              </Tooltip>\n              {/* Only let users create dashboards and change database when running in editor mode. */}\n              {!readonly || (readonly && standaloneSettings.standaloneLoadFromOtherDatabases) ? (\n                <>\n                  <Tooltip title='Database' aria-label='database' disableInteractive>\n                    <Button\n                      aria-label={'settings'}\n                      fill='text'\n                      size='small'\n                      color='neutral'\n                      style={{\n                        float: 'right',\n                        marginLeft: '0px',\n                        marginRight: '3px',\n                        paddingLeft: 0,\n                        paddingRight: '3px',\n                      }}\n                      onClick={(event) => {\n                        setMenuOpen(Menu.DATABASE);\n                        // Only when not yet retrieved, and needed, get the list of databases from Neo4j.\n                        if (databases.length == 0) {\n                          loadDatabaseListFromNeo4j(driver, (result) => {\n                            if (\n                              readonly &&\n                              standaloneSettings.standaloneMultiDatabase &&\n                              standaloneSettings.standaloneDatabaseList\n                            ) {\n                              let tmp = standaloneSettings.standaloneDatabaseList.split(',').map((x) => x.trim());\n                              result = result.filter((value) => tmp.includes(value));\n                            }\n                            setDatabases(result);\n                          });\n                        }\n                        setMenuAnchor(event.currentTarget);\n                      }}\n                    >\n                      <CircleStackIconOutline className='btn-icon-base-r' />\n                    </Button>\n                  </Tooltip>\n\n                  {!readonly ? (\n                    <Tooltip title='Create' aria-label='create' disableInteractive>\n                      <Button\n                        aria-label={'new dashboard'}\n                        fill='text'\n                        size='small'\n                        color='neutral'\n                        style={{\n                          float: 'right',\n                          marginLeft: '0px',\n                          marginRight: '5px',\n                          paddingLeft: 0,\n                          paddingRight: '3px',\n                        }}\n                        onClick={(event) => {\n                          setMenuAnchor(event.currentTarget);\n                          setMenuOpen(Menu.CREATE);\n                        }}\n                      >\n                        <PlusIconOutline className='btn-icon-base-r' />\n                      </Button>\n                    </Tooltip>\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ) : (\n                <></>\n              )}\n            </div>\n          </SideNavigationGroupHeader>\n        </SideNavigationList>\n        <SideNavigationList>\n          <SideNavigationGroupHeader style={{ marginBottom: '10px' }}>\n            <TextInput\n              fluid\n              size='small'\n              leftIcon={<MagnifyingGlassIconOutline style={{ height: 16, marginTop: '2px' }} />}\n              className='n-w-full n-mr-2'\n              placeholder='Search...'\n              aria-label='Search'\n              value={searchText}\n              onChange={(e) => setSearchText(e.target.value)}\n            />\n          </SideNavigationGroupHeader>\n          {draft && selectedDashboardIndex == UNSAVED_DASHBOARD_INDEX && !readonly ? (\n            <DashboardSidebarListItem\n              version={NEODASH_VERSION}\n              selected={draft}\n              title={title}\n              saved={false}\n              onSelect={() => {}}\n              onSettingsOpen={(event) => {\n                setInspectedIndex(UNSAVED_DASHBOARD_INDEX);\n                setMenuOpen(Menu.DASHBOARD);\n                setMenuAnchor(event.currentTarget);\n              }}\n            />\n          ) : (\n            <></>\n          )}\n          {dashboards\n            .filter((d) => d.title.toLowerCase().includes(searchText.toLowerCase()))\n            .map((d) => {\n              // index stored in list\n              return (\n                <DashboardSidebarListItem\n                  selected={selectedDashboardIndex == d.index}\n                  title={draft && selectedDashboardIndex == d.index ? title : d.title}\n                  version={d.version}\n                  saved={!(draft && selectedDashboardIndex == d.index)}\n                  readonly={readonly}\n                  onSelect={() => {\n                    if (draft && d.index !== selectedDashboardIndex) {\n                      setInspectedIndex(d.index);\n                      setModalOpen(Modal.LOAD);\n                    } else {\n                      loadDashboardFromNeo4j(driver, dashboardDatabase, d.uuid, (file) => {\n                        loadDashboard(d.uuid, file);\n                        setSelectedDashboardIndex(d.index);\n                      });\n                    }\n                  }}\n                  onSettingsOpen={(event) => {\n                    setInspectedIndex(d.index);\n                    setMenuOpen(Menu.DASHBOARD);\n                    setMenuAnchor(event.currentTarget);\n                  }}\n                />\n              );\n            })}\n        </SideNavigationList>\n      </SideNavigation>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  readonly: applicationIsStandalone(state),\n  connection: applicationGetConnection(state),\n  pagenumber: getPageNumber(state),\n  title: getDashboardTitle(state),\n  editable: getDashboardIsEditable(state),\n  draft: dashboardIsDraft(state),\n  dashboard: getDashboardJson(state),\n  dashboardSettings: getDashboardSettings(state),\n  database: applicationGetConnectionDatabase(state),\n  standaloneSettings: applicationGetStandaloneSettings(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemovePressed: (id) => dispatch(removeReportThunk(id)),\n  resetLocalDashboard: () => dispatch(resetDashboardState()),\n  setDraft: (draft) => dispatch(setDraft(draft)),\n  loadDashboard: (uuid, text) => dispatch(loadDashboardThunk(uuid, text)),\n  loadDatabaseListFromNeo4j: (driver, callback) => dispatch(loadDatabaseListFromNeo4jThunk(driver, callback)),\n  loadDashboardFromNeo4j: (driver, database, uuid, callback) =>\n    dispatch(loadDashboardFromNeo4jThunk(driver, database, uuid, callback)),\n  loadDashboardListFromNeo4j: (driver, database, callback) =>\n    dispatch(loadDashboardListFromNeo4jThunk(driver, database, callback)),\n  saveDashboardToNeo4j: (driver: any, database: string, dashboard: any, date: any, user: any, onSuccess) => {\n    dispatch(saveDashboardToNeo4jThunk(driver, database, dashboard, date, user, onSuccess));\n  },\n  deleteDashboardFromNeo4j: (driver: any, database: string, uuid: string, onSuccess) => {\n    dispatch(deleteDashboardFromNeo4jThunk(driver, database, uuid, onSuccess));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoDashboardSidebar);\n","import { Button, IconButton, SideNavigationGroupHeader } from '@neo4j-ndl/react';\nimport React from 'react';\nimport { CloudArrowUpIconOutline, EllipsisVerticalIconOutline } from '@neo4j-ndl/react/icons';\nimport Tooltip from '@mui/material/Tooltip';\nimport { NEODASH_VERSION } from '../DashboardReducer';\n\nexport const DashboardSidebarListItem = ({ title, selected, readonly, saved, version, onSelect, onSettingsOpen }) => {\n  return (\n    <SideNavigationGroupHeader>\n      <div style={{ display: 'contents', width: '100%' }}>\n        <Tooltip\n          title={version !== NEODASH_VERSION ? `Old version: v${version}` : ''}\n          aria-label='old version'\n          disableInteractive\n        >\n          <Button\n            aria-label={'dashboard'}\n            fill={selected == true ? 'outlined' : 'text'}\n            size='medium'\n            color={selected == true ? (saved == true ? 'primary' : 'warning') : 'neutral'}\n            style={{\n              width: '240px',\n              whiteSpace: 'nowrap',\n              overflowX: 'clip',\n              justifyContent: 'left',\n              marginRight: '10px',\n              paddingLeft: '5px',\n              paddingRight: '5px',\n            }}\n            onClick={() => {\n              onSelect();\n            }}\n          >\n            {saved == false ? <b>(Draft)</b> : <></>}\n            {title ? title : '(no title)'}\n          </Button>\n        </Tooltip>\n        {readonly !== true ? (\n          <IconButton\n            aria-label={'new dashboard'}\n            clean\n            size='small'\n            color={'neutral'}\n            style={{\n              justifyContent: 'left',\n              paddingLeft: '0px',\n              marginRight: '10px',\n            }}\n            onClick={(event) => {\n              saved == false ? onSettingsOpen(event) : onSettingsOpen(event);\n            }}\n          >\n            {saved == true ? (\n              <Tooltip title='Settings' aria-label='settings' disableInteractive>\n                <EllipsisVerticalIconOutline\n                  style={{ float: 'right', marginRight: '-6px' }}\n                  className='btn-icon-base-r'\n                />\n              </Tooltip>\n            ) : (\n              <Tooltip title='Settings' aria-label='settings' disableInteractive>\n                <EllipsisVerticalIconOutline\n                  color='rgb(var(--palette-warning-text))'\n                  style={{ float: 'right', marginRight: '-6px' }}\n                  className='btn-icon-base-r'\n                />\n              </Tooltip>\n            )}\n          </IconButton>\n        ) : (\n          <></>\n        )}\n      </div>\n    </SideNavigationGroupHeader>\n  );\n};\n","import React from 'react';\nimport { Menu, MenuItem, MenuItems } from '@neo4j-ndl/react';\nimport { DocumentTextIconOutline, PlusCircleIconOutline } from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarCreateMenu = ({\n  anchorEl,\n  open,\n  handleNewClicked,\n  handleImportClicked,\n  handleClose,\n}) => {\n  return (\n    <Menu\n      anchorOrigin={{\n        horizontal: 'left',\n        vertical: 'bottom',\n      }}\n      transformOrigin={{\n        horizontal: 'left',\n        vertical: 'top',\n      }}\n      anchorEl={anchorEl}\n      open={open}\n      onClose={handleClose}\n      size='small'\n    >\n      <MenuItems>\n        <MenuItem onClick={handleNewClicked} title='New' />\n        <MenuItem onClick={handleImportClicked} title='Import' />\n      </MenuItems>\n    </Menu>\n  );\n};\n\nexport default NeoDashboardSidebarCreateMenu;\n","import React from 'react';\nimport { Menu, MenuItem, MenuItems } from '@neo4j-ndl/react';\nimport {\n  ArchiveBoxIconOutline,\n  ArrowUturnLeftIconOutline,\n  CloudArrowUpIconOutline,\n  DocumentDuplicateIconOutline,\n  DocumentTextIconOutline,\n  InformationCircleIconOutline,\n  ShareIconOutline,\n  FingerPrintIconOutline,\n  TrashIconOutline,\n  XMarkIconOutline,\n} from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarDashboardMenu = ({\n  anchorEl,\n  draft,\n  open,\n  handleInfoClicked,\n  handleSaveClicked,\n  handleDiscardClicked,\n  handleLoadClicked,\n  handleExportClicked,\n  handleShareClicked,\n  handleAccessClicked,\n  handleDeleteClicked,\n  handleClose,\n}) => {\n  return (\n    <Menu\n      anchorOrigin={{\n        horizontal: 'left',\n        vertical: 'bottom',\n      }}\n      transformOrigin={{\n        horizontal: 'left',\n        vertical: 'top',\n      }}\n      anchorEl={anchorEl}\n      open={open}\n      onClose={handleClose}\n      size='small'\n    >\n      {!draft ? (\n        <MenuItems>\n          <MenuItem onClick={handleInfoClicked} icon={<InformationCircleIconOutline />} title='Info' />\n          <MenuItem onClick={handleLoadClicked} icon={<CloudArrowUpIconOutline />} title='Load' />\n          {/* <MenuItem onClick={() => {}} icon={<DocumentDuplicateIconOutline />} title='Clone' /> */}\n          <MenuItem onClick={handleExportClicked} icon={<DocumentTextIconOutline />} title='Export' />\n          <MenuItem onClick={handleAccessClicked} icon={<FingerPrintIconOutline />} title='Access' />\n          <MenuItem onClick={handleShareClicked} icon={<ShareIconOutline />} title='Share' />\n          <MenuItem onClick={handleDeleteClicked} icon={<TrashIconOutline />} title='Delete' />\n        </MenuItems>\n      ) : (\n        <MenuItems>\n          <MenuItem onClick={handleSaveClicked} icon={<CloudArrowUpIconOutline />} title='Save' />\n          <MenuItem onClick={handleDiscardClicked} icon={<ArrowUturnLeftIconOutline />} title='Discard Draft' />\n        </MenuItems>\n      )}\n    </Menu>\n  );\n};\n\nexport default NeoDashboardSidebarDashboardMenu;\n","import React from 'react';\nimport { Button, Dialog, Menu, MenuItem, MenuItems } from '@neo4j-ndl/react';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarDatabaseMenu = ({ anchorEl, open, handleClose, databases, selected, setSelected }) => {\n  return (\n    <Menu\n      anchorOrigin={{\n        horizontal: 'left',\n        vertical: 'bottom',\n      }}\n      transformOrigin={{\n        horizontal: 'left',\n        vertical: 'top',\n      }}\n      anchorEl={anchorEl}\n      open={open}\n      onClose={handleClose}\n      size='small'\n    >\n      <MenuItems>\n        {databases.map((d) => {\n          return (\n            <MenuItem\n              onClick={() => {\n                setSelected(d);\n              }}\n              title={d}\n              style={\n                d == selected\n                  ? {\n                      borderWidth: '1px',\n                      borderStyle: 'solid',\n                      color: 'rgb(var(--palette-primary-bg-strong))',\n                      borderColor: 'rgb(var(--palette-primary-bg-strong))',\n                      borderRadius: '8px',\n                    }\n                  : {}\n              }\n            />\n          );\n        })}\n      </MenuItems>\n    </Menu>\n  );\n};\n\nexport default NeoDashboardSidebarDatabaseMenu;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { IconButton, Button, Dialog, TextInput } from '@neo4j-ndl/react';\nimport { Menu, MenuItem, Chip } from '@mui/material';\nimport { Neo4jContext, Neo4jContextState } from 'use-neo4j/dist/neo4j.context';\nimport { PlusCircleIconOutline } from '@neo4j-ndl/react/icons';\nimport { QueryStatus, runCypherQuery } from '../../../report/ReportQueryRunner';\nimport { createNotificationThunk } from '../../../page/PageThunks';\nimport { useDispatch } from 'react-redux';\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n * @param open - Whether the modal is open or not.\n * @param database - The current Neo4j database.\n * @param dashboard - The current dashboard.\n * @param handleClose - The function to close the modal.\n */\nexport const NeoDashboardSidebarAccessModal = ({ open, database, dashboard, handleClose }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedLabels, setSelectedLabels] = useState([]);\n  const [allLabels, setAllLabels] = useState([]);\n  const [neo4jLabels, setNeo4jLabels] = useState([]);\n  const [newLabel, setNewLabel] = useState('');\n  const INITIAL_LABEL = '_Neodash_Dashboard';\n  const [feedback, setFeedback] = useState('');\n  const { driver } = useContext<Neo4jContextState>(Neo4jContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!open) {\n      return;\n    }\n    runCypherQuery(\n      driver,\n      database,\n      'CALL db.labels()',\n      {},\n      1000,\n      () => {},\n      (records) => setNeo4jLabels(records.map((record) => record.get('label')))\n    );\n\n    const query = `\n    MATCH (d:${INITIAL_LABEL} {uuid: \"${dashboard.uuid}\"})\n    RETURN labels(d) as labels\n    `;\n    runCypherQuery(\n      driver,\n      database,\n      query,\n      {},\n      1000,\n      (error) => {\n        console.error(error);\n      },\n      (records) => {\n        // Set the selectedLabels state to the labels of the dashboard\n        setSelectedLabels(records[0].get('labels'));\n        setAllLabels(records[0].get('labels'));\n      }\n    );\n    setFeedback('');\n    setNewLabel('');\n  }, [open]);\n\n  useEffect(() => {\n    setAllLabels([INITIAL_LABEL]);\n    setSelectedLabels([INITIAL_LABEL]);\n  }, []);\n\n  const handleOpenMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const handleLabelSelect = (label) => {\n    if (!selectedLabels.includes(label) && label !== INITIAL_LABEL) {\n      setSelectedLabels([...selectedLabels, label]);\n    }\n    handleCloseMenu();\n  };\n\n  const handleDeleteLabel = (label) => {\n    if (label !== INITIAL_LABEL) {\n      const updatedLabels = selectedLabels.filter((selectedLabel) => selectedLabel !== label);\n      setSelectedLabels(updatedLabels);\n    }\n  };\n\n  const handleAddNewLabel = (e) => {\n    if (e.key === 'Enter' && newLabel.trim() !== '') {\n      if (selectedLabels.includes(newLabel)) {\n        setFeedback('Label already exists. Please enter a unique label.');\n        handleCloseMenu();\n      } else {\n        setSelectedLabels([...selectedLabels, newLabel]);\n        handleLabelSelect(newLabel);\n        setNewLabel('');\n        handleCloseMenu();\n        setFeedback('');\n      }\n    }\n  };\n\n  const handleSave = () => {\n    // Finding the difference between what is stored and what has been selected in the UI\n    let toDelete = allLabels.filter((item) => selectedLabels.indexOf(item) < 0);\n\n    const query = `\n    MATCH (d:${INITIAL_LABEL} {uuid: \"${dashboard.uuid}\"})\n    SET d:${selectedLabels.join(':')}\n    ${toDelete.length > 0 ? `REMOVE d:${toDelete.join(':')}` : ''}\n    RETURN 1;\n    `;\n\n    runCypherQuery(\n      driver,\n      database,\n      query,\n      { selectedLabels: selectedLabels },\n      1000,\n      (status) => {\n        if (status == QueryStatus.COMPLETE) {\n          dispatch(\n            createNotificationThunk(\n              '🎉 Success!',\n              'Selected Labels have successfully been added to the dashboard node.'\n            )\n          );\n          handleClose();\n        } else {\n          dispatch(\n            createNotificationThunk(\n              'Unable to save dashboard',\n              `Do you have write access to the '${database}' database?`\n            )\n          );\n        }\n      },\n      () => {}\n    );\n  };\n\n  return (\n    <Dialog size='small' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Dasboard Access Control - '{dashboard?.title}'</Dialog.Header>\n      <Dialog.Content>\n        Welcome to the Dashboard Access settings!\n        <br />\n        In this modal, you can select the labels that you want to add to the current dashboard node.\n        <br />\n        For more information, please refer to the{' '}\n        <a\n          href='https://neo4j.com/labs/neodash/2.4/user-guide/access-control-management/'\n          target='_blank'\n          rel='noopener noreferrer'\n          style={{ color: 'blue', textDecoration: 'underline' }}\n        >\n          documentation\n        </a>\n        .\n      </Dialog.Content>\n      <div>\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>\n          {/* Fetch labels dynamically from Neo4j and map to menu items */}\n          {neo4jLabels\n            .filter((e) => !selectedLabels.includes(e))\n            .map((label) => (\n              <MenuItem key={label} onClick={() => handleLabelSelect(label)}>\n                {label}\n              </MenuItem>\n            ))}\n          <MenuItem>\n            <TextInput\n              value={newLabel}\n              onChange={(e) => setNewLabel(e.target.value)}\n              onKeyDown={(e: KeyboardEvent) => {\n                handleAddNewLabel(e);\n                e.stopPropagation();\n              }}\n              errorText={feedback}\n              placeholder='Create New label'\n              autoComplete='off'\n            />\n          </MenuItem>\n        </Menu>\n        <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', marginTop: '10px' }}>\n          {selectedLabels.map((label) => (\n            <Chip\n              key={label}\n              label={label}\n              variant='outlined'\n              onDelete={label === INITIAL_LABEL ? undefined : () => handleDeleteLabel(label)}\n              style={{ marginRight: '5px', marginBottom: '5px' }}\n            />\n          ))}\n          <IconButton title='Add Label' size='large' clean style={{ marginBottom: '5px' }} onClick={handleOpenMenu}>\n            <PlusCircleIconOutline color='#018BFF' />\n          </IconButton>\n        </div>\n      </div>\n      <Dialog.Actions>\n        <Button onClick={handleClose} style={{ float: 'right' }} fill='outlined' floating>\n          Cancel\n        </Button>\n        <Button onClick={handleSave} color='primary' style={{ float: 'right', marginRight: '10px' }} floating>\n          Save\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarAccessModal;\n","import React from 'react';\nimport { Button, Dialog } from '@neo4j-ndl/react';\nimport { BackspaceIconOutline, ExclamationTriangleIconOutline } from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarCreateModal = ({ open, onConfirm, handleClose }) => {\n  return (\n    <Dialog size='small' open={open == true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Discard Draft?</Dialog.Header>\n      <Dialog.Subtitle>\n        Creating a new dashboard will delete your current draft. Save the draft first to ensure your dashboard is\n        stored.\n      </Dialog.Subtitle>\n      <Dialog.Actions>\n        <Button\n          onClick={() => {\n            handleClose();\n          }}\n          style={{ float: 'right' }}\n        >\n          <BackspaceIconOutline className='btn-icon-base-l' />\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            onConfirm();\n            handleClose();\n          }}\n          color='danger'\n          fill='outlined'\n          style={{ float: 'right', marginRight: '5px' }}\n        >\n          Continue\n          <ExclamationTriangleIconOutline className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarCreateModal;\n","import React from 'react';\nimport { Button, Dialog } from '@neo4j-ndl/react';\nimport { BackspaceIconOutline, TrashIconSolid } from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarDeleteModal = ({ open, title, onConfirm, handleClose }) => {\n  return (\n    <Dialog size='small' open={open == true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Delete Dashboard '{title}'?</Dialog.Header>\n      <Dialog.Subtitle>\n        Are you sure you want to delete this dashboard? <br /> This action cannot be undone.\n      </Dialog.Subtitle>\n      <Dialog.Actions>\n        <Button\n          fill='outlined'\n          onClick={() => {\n            handleClose();\n          }}\n          style={{ float: 'right' }}\n        >\n          <BackspaceIconOutline className='btn-icon-base-l' />\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            onConfirm();\n            handleClose();\n          }}\n          color='danger'\n          fill='filled'\n          style={{ float: 'right', marginRight: '5px' }}\n        >\n          Delete\n          <TrashIconSolid className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarDeleteModal;\n","import React from 'react';\nimport { DocumentArrowDownIconOutline } from '@neo4j-ndl/react/icons';\nimport { Button, Dialog } from '@neo4j-ndl/react';\nimport { valueIsArray, valueIsObject } from '../../../chart/ChartUtils';\nimport { TextareaAutosize } from '@mui/material';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarExportModal = ({ open, dashboard, handleClose }) => {\n  /**\n   * Removes the specified set of keys from the nested dictionary.\n   */\n  const filterNestedDict = (value: any, removedKeys: any[]) => {\n    if (value == undefined) {\n      return value;\n    }\n\n    if (valueIsArray(value)) {\n      return value.map((v) => filterNestedDict(v, removedKeys));\n    }\n\n    if (valueIsObject(value)) {\n      const newValue = {};\n      Object.keys(value).forEach((k) => {\n        if (removedKeys.indexOf(k) != -1) {\n          newValue[k] = undefined;\n        } else {\n          newValue[k] = filterNestedDict(value[k], removedKeys);\n        }\n      });\n      return newValue;\n    }\n    return value;\n  };\n\n  const filteredDashboard = filterNestedDict(dashboard, [\n    'fields',\n    'settingsOpen',\n    'advancedSettingsOpen',\n    'collapseTimeout',\n    'apiKey', // Added for query-translator extension\n  ]);\n\n  const dashboardString = JSON.stringify(filteredDashboard, null, 2);\n  const downloadDashboard = () => {\n    const element = document.createElement('a');\n    const file = new Blob([dashboardString], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = 'dashboard.json';\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n\n  return (\n    <Dialog size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Export Dashboard</Dialog.Header>\n      <Dialog.Content>\n        Export your dashboard as a JSON file, or copy-paste the file from here.\n        <br />\n        <Button onClick={downloadDashboard} fill='outlined' color='neutral' floating>\n          Save to file\n          <DocumentArrowDownIconOutline className='btn-icon-base-r' aria-label={'save arrow'} />\n        </Button>\n        <br />\n        <br />\n        <TextareaAutosize\n          style={{ minHeight: '500px', width: '100%', border: '1px solid lightgray' }}\n          className={'textinput-linenumbers'}\n          value={dashboardString}\n          aria-label=''\n          placeholder='Your dashboard JSON should be displayed here.'\n        />\n      </Dialog.Content>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarExportModal;\n","import React, { useRef } from 'react';\nimport { PlayIconSolid, DocumentPlusIconOutline } from '@neo4j-ndl/react/icons';\nimport { Button, Checkbox, Dialog, Dropdown } from '@neo4j-ndl/react';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\n\nexport const NeoDashboardSidebarImportModal = ({ open, onImport, handleClose }) => {\n  const [text, setText] = React.useState('');\n  const loadFromFile = useRef(null);\n\n  const onSelectFileClick = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    if (e.target.files == null) {\n      return;\n    }\n\n    const file = e.target.files[0];\n    const text = await file.text();\n\n    setText(text);\n  };\n\n  return (\n    <Dialog size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Import Dashboard</Dialog.Header>\n      <Dialog.Content>\n        Import your dashboard from a JSON file, or copy-paste the save file here.\n        <br />\n        <b>Importing will discard your current draft, if any.</b>\n        <br /> <br />\n      </Dialog.Content>\n      <TextareaAutosize\n        style={{ minHeight: '200px', width: '100%', border: '1px solid lightgray' }}\n        className={'textinput-linenumbers'}\n        onChange={(e) => setText(e.target.value)}\n        value={text}\n        aria-label=''\n        placeholder='Paste a dashboard JSON file here...'\n      />\n      <Dialog.Actions>\n        <Button\n          onClick={() => {\n            loadFromFile.current.click();\n          }}\n          fill='outlined'\n          color='neutral'\n          style={{ marginLeft: '10px' }}\n          floating\n        >\n          <input value='' type='file' ref={loadFromFile} onChange={onSelectFileClick} hidden />\n          Select From File\n          <DocumentPlusIconOutline className='btn-icon-base-r' />\n        </Button>\n        <Button\n          onClick={() => {\n            onImport(text);\n            setText('');\n            handleClose();\n          }}\n          color={text.length > 0 ? 'success' : 'neutral'}\n          disabled={text.length == 0}\n          style={{ float: 'right', marginRight: '10px' }}\n          floating\n        >\n          Import\n          <PlayIconSolid className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarImportModal;\n","import React from 'react';\nimport { Dialog } from '@neo4j-ndl/react';\nimport { DataGrid } from '@mui/x-data-grid';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarInfoModal = ({ open, dashboard, handleClose }) => {\n  const columns = [\n    { field: 'field', headerName: 'Field', width: 150 },\n    { field: 'value', headerName: 'Value', width: 600 },\n  ];\n\n  const rows = dashboard\n    ? [\n        { id: 0, field: 'ID', value: dashboard.uuid },\n        { id: 1, field: 'Title', value: dashboard.title },\n        { id: 2, field: 'Last Modified', value: dashboard.date },\n        { id: 3, field: 'Author', value: dashboard.author },\n        { id: 4, field: 'Version', value: dashboard.version },\n      ]\n    : [];\n\n  return (\n    <Dialog size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>About '{dashboard && dashboard.title}'</Dialog.Header>\n      <Dialog.Content>\n        <div style={{ height: '300px' }}>\n          <DataGrid\n            rows={rows}\n            columns={columns}\n            pageSize={5}\n            rowsPerPageOptions={[5]}\n            disableSelectionOnClick\n            headerHeight={0}\n            hideFooter={true}\n            components={{\n              ColumnSortedDescendingIcon: () => <></>,\n              ColumnSortedAscendingIcon: () => <></>,\n            }}\n          />\n        </div>\n      </Dialog.Content>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarInfoModal;\n","import React from 'react';\nimport { Button, Dialog } from '@neo4j-ndl/react';\nimport { BackspaceIconOutline, ExclamationTriangleIconOutline, TrashIconOutline } from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarLoadModal = ({ open, onConfirm, handleClose }) => {\n  return (\n    <Dialog size='small' open={open == true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Discard Draft?</Dialog.Header>\n      <Dialog.Subtitle>\n        You are discarding your current draft dashboard.\n        <br />\n        <b>Your draft will not be recoverable.</b>\n      </Dialog.Subtitle>\n      <Dialog.Actions>\n        <Button\n          onClick={() => {\n            handleClose();\n          }}\n          fill='outlined'\n          style={{ float: 'right' }}\n        >\n          <BackspaceIconOutline className='btn-icon-base-l' />\n          Keep\n        </Button>\n        <Button\n          onClick={() => {\n            onConfirm();\n            handleClose();\n          }}\n          color='danger'\n          style={{ float: 'right', marginRight: '5px' }}\n        >\n          Discard\n          <TrashIconOutline className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarLoadModal;\n","import React from 'react';\nimport { DatabaseAddCircleIcon, BackspaceIconOutline } from '@neo4j-ndl/react/icons';\nimport { Button, Dialog } from '@neo4j-ndl/react';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarSaveModal = ({ open, onConfirm, handleClose, overwrite }) => {\n  return (\n    <Dialog size='small' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Save to Neo4j</Dialog.Header>\n      <Dialog.Content>\n        This will <b>{overwrite ? 'overwrite' : 'save'}</b> your current draft as a node in your Neo4j database.\n        <br />\n        Ensure you have write permissions to the database to use this feature.\n      </Dialog.Content>\n      <Dialog.Actions>\n        <Button onClick={handleClose} style={{ float: 'right' }} fill='outlined' floating>\n          <BackspaceIconOutline className='btn-icon-base-l' aria-label={'save back'} />\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            onConfirm();\n            handleClose();\n          }}\n          color='success'\n          style={{ float: 'right', marginRight: '10px' }}\n          floating\n        >\n          Save\n          <DatabaseAddCircleIcon className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarSaveModal;\n","import React from 'react';\nimport { Checkbox, Dialog, TextLink } from '@neo4j-ndl/react';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDashboardSidebarShareModal = ({\n  uuid,\n  dashboardDatabase,\n  connection,\n  open,\n  onLegacyShareClicked,\n  handleClose,\n}) => {\n  const shareBaseURL = 'http://neodash.graphapp.io';\n  const shareBaseURLAlternative = 'https://neodash.graphapp.io';\n  const shareLocalURL = window.location.origin.startsWith('file') ? shareBaseURL : window.location.origin;\n  const [selfHosted, setSelfHosted] = React.useState(false);\n  const [standalone, setStandalone] = React.useState(false);\n  const [includeCredentials, setIncludeCredentials] = React.useState(false);\n\n  function getShareURL() {\n    const prefix = selfHosted ? shareLocalURL : shareBaseURL;\n    const id = encodeURIComponent(uuid);\n    const db = encodeURIComponent(dashboardDatabase);\n    const suffix1 = includeCredentials\n      ? `&credentials=${encodeURIComponent(\n          `${connection.protocol}://${connection.username}:${connection.password}@${connection.database}:${connection.url}:${connection.port}`\n        )}`\n      : '';\n    const suffix2 = standalone ? `&standalone=Yes` : '';\n    return `${prefix}/?share&type=database&id=${id}&dashboardDatabase=${db}${suffix1}${suffix2}`;\n  }\n\n  return (\n    <Dialog size='small' open={open == true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Share Dashboard</Dialog.Header>\n      <Dialog.Subtitle>\n        This screen lets you create a one-off, direct link for your dashboard. Click{' '}\n        <TextLink onClick={onLegacyShareClicked}>here</TextLink> to use legacy file-sharing instead.\n      </Dialog.Subtitle>\n      <Dialog.Content>\n        {shareLocalURL !== shareBaseURL && shareLocalURL !== shareBaseURLAlternative ? (\n          <Checkbox\n            label='Self-hosted'\n            style={{ fontSize: 'small' }}\n            checked={selfHosted}\n            name='enable'\n            onClick={() => {\n              setSelfHosted(!selfHosted);\n            }}\n          />\n        ) : (\n          <></>\n        )}\n        <Checkbox\n          label='Hide Editor UI'\n          style={{ fontSize: 'small' }}\n          checked={standalone}\n          name='enable'\n          onClick={() => {\n            setStandalone(!standalone);\n          }}\n        />\n\n        <Checkbox\n          label={'Include credentials ⚠️'}\n          style={{ fontSize: 'small' }}\n          checked={includeCredentials}\n          name='enable'\n          onClick={() => {\n            setIncludeCredentials(!includeCredentials);\n          }}\n        />\n\n        <br />\n        <span>Your Temporary Link:</span>\n        <br />\n        <span style={{ display: 'block', width: '100%', overflow: 'hidden' }}>\n          <TextLink href={getShareURL()} externalLink>\n            {' '}\n            {getShareURL()}{' '}\n          </TextLink>\n          <br />\n          {includeCredentials ? <i>Caution: this link embeds your current database credentials.</i> : <></>}\n        </span>\n      </Dialog.Content>\n    </Dialog>\n  );\n};\n\nexport default NeoDashboardSidebarShareModal;\n","import React, { useContext } from 'react';\n\nimport { connect } from 'react-redux';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { Neo4jContext, Neo4jContextState } from 'use-neo4j/dist/neo4j.context';\nimport NeoSetting from '../../../../component/field/Setting';\nimport { applicationGetConnection } from '../../../../application/ApplicationSelectors';\nimport { SELECTION_TYPES } from '../../../../config/CardConfig';\nimport { MenuItem, Button, Dialog, Dropdown, TextLink } from '@neo4j-ndl/react';\nimport {\n  ShareIconOutline,\n  PlayIconSolid,\n  DocumentCheckIconOutline,\n  DatabaseAddCircleIcon,\n} from '@neo4j-ndl/react/icons';\n\nconst shareBaseURL = 'http://neodash.graphapp.io';\nconst shareLocalURL = window.location.origin.startsWith('file') ? shareBaseURL : window.location.origin;\n\nexport const NeoShareModal = ({ open, handleClose, connection }) => {\n  const [loadFromNeo4jModalOpen, setLoadFromNeo4jModalOpen] = React.useState(false);\n  const [loadFromFileModalOpen, setLoadFromFileModalOpen] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n  const { driver } = useContext<Neo4jContextState>(Neo4jContext);\n\n  // One of [null, database, file]\n  const shareType = 'url';\n  const [shareID, setShareID] = React.useState(null);\n  const [shareName, setShareName] = React.useState(null);\n  const [shareConnectionDetails, setShareConnectionDetails] = React.useState('No');\n  const [shareStandalone, setShareStandalone] = React.useState('No');\n  const [selfHosted, setSelfHosted] = React.useState('No');\n  const [shareLink, setShareLink] = React.useState(null);\n\n  const [dashboardDatabase, setDashboardDatabase] = React.useState('neo4j');\n\n  const columns = [\n    { field: 'uuid', hide: true, headerName: 'ID', width: 150 },\n    { field: 'date', headerName: 'Date', width: 200 },\n    { field: 'title', headerName: 'Title', width: 370 },\n    { field: 'author', headerName: 'Author', width: 160 },\n    {\n      field: 'load',\n      headerName: ' ',\n      renderCell: (c) => {\n        return (\n          <Button\n            onClick={() => {\n              setShareID(c.uuid);\n              setShareName(c.row.title);\n              setShareType('database');\n              setLoadFromNeo4jModalOpen(false);\n            }}\n            style={{ float: 'right' }}\n            fill='outlined'\n            color='neutral'\n            floating\n          >\n            Select\n            <PlayIconSolid className='btn-icon-base-r' />\n          </Button>\n        );\n      },\n      width: 130,\n    },\n  ];\n\n  return (\n    <Dialog key={1} size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>\n        <ShareIconOutline className='icon-base icon-inline text-r' />\n        Share Dashboard File\n      </Dialog.Header>\n      <Dialog.Content>\n        This window lets you create a temporary share link for your dashboard. Keep in mind that share links are not\n        intended as a way to publish your dashboard for users, see the&nbsp;\n        <TextLink externalLink href='https://neo4j.com/labs/neodash/2.4/user-guide/publishing/'>\n          documentation\n        </TextLink>{' '}\n        for more on publishing.\n        <br />\n        <hr />\n        <br />\n        To share a dashboard file directly, make it accessible{' '}\n        <TextLink externalLink target='_blank' href='https://gist.github.com/'>\n          online\n        </TextLink>\n        .<br /> Then, paste the direct link here:\n        <NeoSetting\n          key={'url'}\n          name={'url'}\n          value={shareID}\n          style={{ marginLeft: '0px', width: '100%', marginBottom: '10px' }}\n          type={SELECTION_TYPES.TEXT}\n          helperText={'Make sure the URL starts with http:// or https://.'}\n          label={''}\n          defaultValue='https://gist.githubusercontent.com/username/0a78d80567f23072f06e03005cf53bce/raw/f97cc...'\n          onChange={(e) => {\n            setShareLink(null);\n            setShareID(e);\n          }}\n        />\n        {shareID ? (\n          <>\n            <br />\n            <NeoSetting\n              key={'credentials'}\n              name={'credentials'}\n              value={shareConnectionDetails}\n              type={SELECTION_TYPES.LIST}\n              style={{ marginLeft: '0px', width: '100%', marginBottom: '10px' }}\n              helperText={'Share the dashboard including your Neo4j credentials.'}\n              label={'Include Connection Details'}\n              defaultValue={'No'}\n              choices={['Yes', 'No']}\n              onChange={(e) => {\n                if (e == 'No' && shareStandalone == 'Yes') {\n                  return;\n                }\n                setShareLink(null);\n                setShareConnectionDetails(e);\n              }}\n            />\n            {shareLocalURL != shareBaseURL ? (\n              <NeoSetting\n                key={'standalone'}\n                name={'standalone'}\n                value={shareStandalone}\n                style={{ marginLeft: '0px', width: '100%', marginBottom: '10px' }}\n                type={SELECTION_TYPES.LIST}\n                helperText={'Share the dashboard as a standalone webpage, without the NeoDash editor.'}\n                label={'Standalone Dashboard'}\n                defaultValue={'No'}\n                choices={['Yes', 'No']}\n                onChange={(e) => {\n                  setShareLink(null);\n                  setShareStandalone(e);\n                  if (e == 'Yes') {\n                    setShareConnectionDetails('Yes');\n                  }\n                }}\n              />\n            ) : (\n              <></>\n            )}\n            <NeoSetting\n              key={'selfHosted'}\n              name={'selfHosted'}\n              value={selfHosted}\n              style={{ marginLeft: '0px', width: '100%', marginBottom: '10px' }}\n              type={SELECTION_TYPES.LIST}\n              helperText={'Share the dashboard using self Hosted Neodash, otherwise neodash.graphapp.io will be used'}\n              label={'Self Hosted Dashboard'}\n              defaultValue={'No'}\n              choices={['Yes', 'No']}\n              onChange={(e) => {\n                setShareLink(null);\n                setSelfHosted(e);\n              }}\n            />\n            <Button\n              onClick={() => {\n                setShareLink(\n                  `${\n                    selfHosted == 'Yes' ? shareLocalURL : shareBaseURL\n                  }/?share&type=${shareType}&id=${encodeURIComponent(shareID)}&dashboardDatabase=${encodeURIComponent(\n                    dashboardDatabase\n                  )}${\n                    shareConnectionDetails == 'Yes'\n                      ? `&credentials=${encodeURIComponent(\n                          `${connection.protocol}://${connection.username}:${connection.password}@${connection.database}:${connection.url}:${connection.port}`\n                        )}`\n                      : ''\n                  }${shareStandalone == 'Yes' ? `&standalone=${shareStandalone}` : ''}`\n                );\n              }}\n              fill='outlined'\n              color='neutral'\n              floating\n            >\n              Generate Link\n              <ShareIconOutline className='btn-icon-base-r' />\n            </Button>\n          </>\n        ) : (\n          <></>\n        )}\n        {shareLink ? (\n          <>\n            <br />\n            Use the generated link to view the dashboard:\n            <br />\n            <TextLink externalLink href={shareLink} target='_blank'>\n              {shareLink}\n            </TextLink>\n            <br />\n          </>\n        ) : (\n          <></>\n        )}\n      </Dialog.Content>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  connection: applicationGetConnection(state),\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoShareModal);\n","import React from 'react';\nimport { EXTENSIONS } from './ExtensionConfig';\nimport { connect } from 'react-redux';\nimport { createNotificationThunk } from '../page/PageThunks';\nimport { getDashboardExtensions } from '../dashboard/DashboardSelectors';\nimport { setExtensionEnabled } from '../dashboard/DashboardActions';\nimport { setExtensionReducerEnabled } from './state/ExtensionActions';\nimport { Dialog, Label, MenuItem, TextLink, Typography, Checkbox, IconButton } from '@neo4j-ndl/react';\nimport { PuzzlePieceIconSolid } from '@neo4j-ndl/react/icons';\nimport { Section, SectionContent } from '../modal/ModalUtils';\nimport Tooltip from '@mui/material/Tooltip/Tooltip';\n\nconst NeoExtensionsModal = ({\n  extensions,\n  setExtensionEnabled,\n  onExtensionUnavailableTriggered, // Action to take when the user tries to enable a disabled extension.\n  setExtensionReducerEnabled,\n  closeMenu,\n}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    closeMenu();\n  };\n\n  return (\n    <>\n      <Tooltip title='Extensions' aria-label='extensions' disableInteractive>\n        <IconButton className='n-mx-1' aria-label='Extensions' onClick={handleClickOpen}>\n          <PuzzlePieceIconSolid />\n        </IconButton>\n      </Tooltip>\n\n      {open ? (\n        <Dialog size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n          <Dialog.Header id='form-dialog-title'>\n            <PuzzlePieceIconSolid className='icon-base icon-inline text-r' />\n            Extensions\n          </Dialog.Header>\n          <Dialog.Content>\n            <div className='n-flex n-flex-col n-gap-token-4 n-divide-y n-divide-neutral-border-strong'>\n              <Section>\n                <SectionContent>\n                  <TextLink\n                    externalLink\n                    target='_blank'\n                    href='https://neo4j.com/labs/neodash/2.4/user-guide/extensions/'\n                  >\n                    Extensions\n                  </TextLink>\n                  &nbsp;are a way of extending the core functionality of NeoDash with custom logic. This can be a new\n                  visualization, extra styling options for an existing visualization, or even a completely new logic for\n                  the dashboarding engine.\n                </SectionContent>\n              </Section>\n\n              {Object.values(EXTENSIONS).map((e, key) => {\n                return (\n                  <Section key={key}>\n                    <SectionContent>\n                      <div style={{ opacity: e.enabled ? 1.0 : 0.6 }}>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>\n                                <div className='n-flex n-flex-row n-gap-token-4 n-items-center'>\n                                  <Typography variant='h5'>{e.label}</Typography>\n                                  {e.enabled && e.author == 'Neo4j Professional Services' && (\n                                    <Label color='info' fill='outlined'>\n                                      Expert\n                                    </Label>\n                                  )}\n                                </div>\n                              </td>\n                              <td style={{ width: 50 }}></td>\n                              <td style={{ float: 'right' }}>\n                                <Tooltip title='Enable the extension' aria-label='' disableInteractive>\n                                  <Checkbox\n                                    id={`checkbox-${e.name}`}\n                                    label='Active'\n                                    disabled={!e.enabled}\n                                    style={{ fontSize: 'small' }}\n                                    checked={extensions[e.name]}\n                                    name='enable'\n                                    onClick={() => {\n                                      let active = extensions[e.name] == undefined ? true : undefined;\n                                      if (e.enabled) {\n                                        setExtensionEnabled(e.name, active);\n\n                                        // Subscribing the reducer binded to the newly enabled extension\n                                        // to the extensionReducer\n                                        if (e.reducerPrefix) {\n                                          setExtensionReducerEnabled(e.reducerPrefix, active);\n                                        }\n                                      } else {\n                                        onExtensionUnavailableTriggered(e.label);\n                                        // If an extension presents a reducer, we need to unbind it from the extension reducer\n                                        if (e.reducerPrefix) {\n                                          setExtensionReducerEnabled(e.reducerPrefix, active);\n                                        }\n                                      }\n                                    }}\n                                  />\n                                </Tooltip>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td valign='top'>\n                                <br />\n                                <p>{e.description}</p>\n                                <br />\n                                <p>\n                                  Author:{' '}\n                                  <TextLink externalLink href={e.link}>\n                                    {e.author}\n                                  </TextLink>\n                                </p>\n                              </td>\n                              <td></td>\n                              <td style={{ width: 300 }}>\n                                <br />\n                                <img src={e.image} style={{ border: '1px solid grey', width: '100%' }}></img>\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                    </SectionContent>\n                  </Section>\n                );\n              })}\n            </div>\n          </Dialog.Content>\n        </Dialog>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  extensions: getDashboardExtensions(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setExtensionEnabled: (name, enabled) => dispatch(setExtensionEnabled(name, enabled)),\n  setExtensionReducerEnabled: (name, enabled) => dispatch(setExtensionReducerEnabled(name, enabled)),\n  onExtensionUnavailableTriggered: (name) =>\n    dispatch(\n      createNotificationThunk(\n        `Extension '${name}' Unavailable`,\n        // eslint-disable-next-line no-multi-str\n        'This extension is not available in this version of NeoDash.\\n  \\\n     To learn more about expert extensions, check out the project documentation.'\n      )\n    ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoExtensionsModal);\n","import React from 'react';\nimport { Button, Dialog } from '@neo4j-ndl/react';\nimport { BackspaceIconOutline, TrashIconSolid } from '@neo4j-ndl/react/icons';\n\n/**\n * Configures setting the current Neo4j database connection for the dashboard.\n */\nexport const NeoDeletePageModal = ({ modalOpen, onRemove, handleClose }) => {\n  return (\n    <Dialog size='small' open={modalOpen == true} onClose={handleClose} aria-labelledby='form-dialog-title'>\n      <Dialog.Header id='form-dialog-title'>Delete page?</Dialog.Header>\n      <Dialog.Subtitle>Are you sure you want to remove this page? This cannot be undone.</Dialog.Subtitle>\n      <Dialog.Actions>\n        <Button\n          onClick={() => {\n            handleClose();\n          }}\n          fill='outlined'\n          style={{ float: 'right' }}\n        >\n          <BackspaceIconOutline className='btn-icon-base-l' />\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            onRemove();\n            handleClose();\n          }}\n          color='danger'\n          style={{ float: 'right', marginRight: '5px' }}\n        >\n          Remove\n          <TrashIconSolid className='btn-icon-base-r' />\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n};\n\nexport default NeoDeletePageModal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { IconButton, MenuItem } from '@neo4j-ndl/react';\nimport NeoDashboardSidebarExportModal from '../dashboard/sidebar/modal/DashboardSidebarExportModal';\nimport { getDashboardJson } from './ModalSelectors';\nimport { DocumentArrowDownIconOutline, DocumentTextIconOutline } from '@neo4j-ndl/react/icons';\nimport Tooltip from '@mui/material/Tooltip/Tooltip';\n/**\n * A modal to save a dashboard as a JSON text string.\n * The button to open the modal is intended to use in a drawer at the side of the page.\n */\nexport const NeoExportModal = ({ dashboard }) => {\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Tooltip title='Export' aria-label='export' disableInteractive>\n        <IconButton className='n-mx-1' onClick={() => setOpen(true)} aria-label='Export'>\n          <DocumentArrowDownIconOutline />\n        </IconButton>\n      </Tooltip>\n      <NeoDashboardSidebarExportModal\n        open={open}\n        dashboard={dashboard}\n        handleClose={() => {\n          setOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  dashboard: getDashboardJson(state),\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoExportModal);\n","export const getDashboardJson = (state: any) => state.dashboard;\n","import React from 'react';\nimport NeoCodeEditorComponent from '../component/editor/CodeEditorComponent';\nimport NeoReport from '../report/Report';\nimport { Dialog, MenuItem } from '@neo4j-ndl/react';\nimport { ChartBarIconSolid } from '@neo4j-ndl/react/icons';\nimport { Section, SectionTitle, SectionContent } from '../modal/ModalUtils';\nimport { enterHandler } from '../utils/accessibility';\n\nexport const NeoReportExamplesModal = ({ database, examples, extensions }) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <MenuItem\n        title='Examples'\n        onClick={handleClickOpen}\n        onKeyDown={(e) => enterHandler(e, handleClickOpen)}\n        icon={<ChartBarIconSolid />}\n      />\n\n      <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title' className='dialog-xl'>\n        <Dialog.Header id='form-dialog-title'>\n          <ChartBarIconSolid className='icon-base icon-inline text-r' />\n          Report Examples\n        </Dialog.Header>\n        <Dialog.Content>\n          <div className='n-flex n-flex-col n-gap-token-4 n-divide-y n-divide-neutral-border-strong'>\n            {examples.map((example, index) => {\n              return (\n                <Section key={`example-${index}`}>\n                  <SectionTitle>{example.title}</SectionTitle>\n                  <SectionContent>\n                    <div className='n-grid n-grid-cols-3 n-gap-8'>\n                      <div className='n-col-span-3'>{example.description}</div>\n                      <div className='n-col-span-1'>\n                        <NeoCodeEditorComponent\n                          editable={false}\n                          placeholder=''\n                          value={example.exampleQuery}\n                          language={example.type == 'iframe' ? 'url' : 'cypher'}\n                        ></NeoCodeEditorComponent>\n                      </div>\n\n                      <div\n                        className='n-col-span-2'\n                        style={{\n                          height: '355px',\n                          overflow: 'hidden',\n                          border: '1px solid lightgrey',\n                        }}\n                      >\n                        <NeoReport\n                          id={index}\n                          query={example.syntheticQuery}\n                          database={database}\n                          disabled={!open}\n                          extensions={extensions}\n                          selection={example.selection}\n                          parameters={example.globalParameters}\n                          settings={example.settings}\n                          fields={example.fields}\n                          dimensions={example.dimensions}\n                          ChartType={example.chartType}\n                          type={example.type}\n                        />\n                      </div>\n                    </div>\n                  </SectionContent>\n                </Section>\n              );\n            })}\n          </div>\n        </Dialog.Content>\n      </Dialog>\n    </>\n  );\n};\n\nexport default NeoReportExamplesModal;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport NeoAddCard from '../card/CardAddButton';\nimport NeoCard from '../card/Card';\nimport { getReports } from './PageSelectors';\nimport { addReportThunk, removeReportThunk, updatePageLayoutThunk, cloneReportThunk } from './PageThunks';\nimport Grid from '@mui/material/Grid';\nimport { getDashboardIsEditable, getPageNumber } from '../settings/SettingsSelectors';\nimport { getDashboardSettings } from '../dashboard/DashboardSelectors';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport { GRID_COMPACTION_TYPE } from '../config/PageConfig';\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\n/**\n * A component responsible for rendering the **current** page, a collection of reports.\n */\nexport const NeoPage = ({\n  editable = true, // Whether the page is editable.\n  dashboardSettings, // global settings for the entire dashboard.\n  pagenumber, // The page number to render.\n  reports = [], // list of reports as defined in the dashboard state.\n  onCreatePressed = () => {}, // callback for when the user wants to add a new report.\n  onClonePressed = () => {}, // callback/action to take when a user wants to clone a report\n  onRemovePressed = () => {}, // action to take when a report gets removed.\n  onPageLayoutUpdate = () => {}, // action to take when the page layout is updated.\n}) => {\n  const getReportKey = (pagenumber: number, id: string) => {\n    return `${pagenumber}:${id}`;\n  };\n\n  const defaultLayouts = {\n    lg: [\n      {\n        x: 0,\n        y: 0,\n        i: getReportKey(pagenumber, '999999'),\n        w: 6,\n        h: 3,\n        isDraggable: false,\n      },\n    ],\n  };\n\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [layouts, setLayouts] = React.useState(defaultLayouts);\n  const [lastElement, setLastElement] = React.useState(<div key={getReportKey(pagenumber, '999999')}></div>);\n  const [animated, setAnimated] = React.useState(false); // To turn off animations when cards are dragged around.\n\n  const availableHandles = () => {\n    if (dashboardSettings.resizing && dashboardSettings.resizing == 'all') {\n      return ['s', 'w', 'e', 'sw', 'se'];\n    }\n    return ['se'];\n  };\n\n  /**\n   * Based on the current layout, determine where the 'add report' card should be placed.\n   * The position here is the 'first available (2x2) spot' on a row, starting from the top.\n   * @returns the position (x,y) of the add card button.\n   */\n  const getAddCardButtonPosition = () => {\n    // Find all reports that touch on a specific y-level.\n    if (reports.length == 0) {\n      return { x: 0, y: 0 };\n    }\n\n    const maxY = Math.max.apply(\n      Math,\n      reports.map((o) => {\n        return o.y + o.height;\n      })\n    );\n    const maxXbyYLevel = {}; // The max x value for each y-level.\n    for (let i = 0; i < maxY; i++) {\n      maxXbyYLevel[i] = Math.max(\n        0,\n        Math.max.apply(\n          Math,\n          reports\n            .filter((report) => report.y + report.height > i && report.y <= i)\n            .map((o) => {\n              return o.x + o.width;\n            })\n        )\n      );\n    }\n\n    for (let level = 0; level < maxY; level++) {\n      if (maxXbyYLevel[level] <= 18 && (maxXbyYLevel[level + 1] === undefined || maxXbyYLevel[level + 1] <= 18)) {\n        return { x: maxXbyYLevel[level] !== undefined ? maxXbyYLevel[level] : 0, y: level };\n      }\n    }\n    return { x: 0, y: maxY };\n  };\n  /**\n   * Recompute the layout of the page buttons.This is called whenever the pages get reorganized.\n   */\n  const recomputeLayout = () => {\n    const { x, y } = getAddCardButtonPosition();\n    setLayouts({\n      // @ts-ignore\n      lg: [\n        ...reports.map((report) => {\n          return {\n            x: report.x || 0,\n            y: report.y || 0,\n            i: getReportKey(pagenumber, report.id),\n            w: Math.max(parseInt(report.width), 4) || 4,\n            h: Math.max(parseInt(report.height), 2) || 2,\n            minW: 4,\n            minH: 2,\n            resizeHandles: availableHandles(),\n            isDraggable: true,\n          };\n        }),\n        {\n          x: x,\n          y: y,\n          i: getReportKey(pagenumber, '999999'),\n          w: 6,\n          h: 4,\n          minW: 6,\n          minH: 4,\n          isDraggable: false,\n          isResizable: false,\n        },\n      ],\n    });\n    setLastElement(\n      <Grid style={{ paddingBottom: '6px' }} key={getReportKey(pagenumber, '999999')}>\n        <NeoAddCard\n          onCreatePressed={() => {\n            const { x, y } = getAddCardButtonPosition();\n            onCreatePressed(x, y, 6, 4);\n          }}\n        />\n      </Grid>\n    );\n  };\n\n  useEffect(() => {\n    setAnimated(false);\n    recomputeLayout();\n  }, [reports, dashboardSettings.resizing, pagenumber]);\n\n  const content = (\n    <div className='n-pt-3'>\n      <ResponsiveGridLayout\n        draggableHandle='.drag-handle'\n        layouts={layouts}\n        className={`layout neodash-card-editable-${editable} ${animated ? 'animated' : 'not-animated'}`}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 24, md: 20, sm: 12, xs: 8, xxs: 4 }}\n        rowHeight={100}\n        compactType={GRID_COMPACTION_TYPE}\n        onDrag={() => {\n          if (!isDragging) {\n            setAnimated(true);\n            setIsDragging(true);\n            recomputeLayout();\n          }\n        }}\n        onDragStop={(newLayout) => {\n          if (isDragging) {\n            onPageLayoutUpdate(newLayout);\n            setIsDragging(false);\n          }\n        }}\n        onResize={() => {\n          setIsDragging(true);\n          if (!animated) {\n            setAnimated(true);\n          }\n        }}\n        onResizeStop={(newLayout) => {\n          setIsDragging(false);\n          onPageLayoutUpdate(newLayout);\n        }}\n      >\n        {reports.map((report) => {\n          const w = 24;\n          const { id } = report;\n          // @ts-ignore\n          return (\n            <Grid\n              key={getReportKey(pagenumber, id)}\n              style={{ paddingBottom: '6px' }}\n              item\n              xs={Math.min(w * 4, 24)}\n              sm={Math.min(w * 2, 24)}\n              md={Math.min(w * 2, 24)}\n              lg={Math.min(w, 24)}\n              xl={Math.min(w, 24)}\n            >\n              <NeoCard\n                id={id}\n                key={getReportKey(pagenumber, id)}\n                dashboardSettings={dashboardSettings}\n                onRemovePressed={onRemovePressed}\n                onClonePressed={(id) => {\n                  const { x, y } = getAddCardButtonPosition();\n                  onClonePressed(id, x, y);\n                }}\n              />\n            </Grid>\n          );\n        })}\n        {editable && !isDragging ? lastElement : <div key={getReportKey(pagenumber, '999999')}></div>}\n      </ResponsiveGridLayout>\n    </div>\n  );\n  return content;\n};\n\nconst mapStateToProps = (state) => ({\n  pagenumber: getPageNumber(state),\n  editable: getDashboardIsEditable(state),\n  dashboardSettings: getDashboardSettings(state),\n  reports: getReports(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemovePressed: (id) => dispatch(removeReportThunk(id)),\n  onClonePressed: (id, x, y) => dispatch(cloneReportThunk(id, x, y)),\n  onCreatePressed: (x, y, width, height) => dispatch(addReportThunk(x, y, width, height, undefined)),\n  onPageLayoutUpdate: (layout) => dispatch(updatePageLayoutThunk(layout)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeoPage);\n","import { createSelector } from 'reselect';\nexport const getReports = (state: any) => {\n  const { pagenumber } = state.dashboard.settings;\n  return state.dashboard.pages[pagenumber] ? state.dashboard.pages[pagenumber].reports : [];\n};\nexport const getReportsLoading = (state: any) => state.dashboard.isLoading;\n\n// TODO: Investigate to define what is the expected behavior => current filter is useless\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getCurrentReports = createSelector(getReports, (reports) => reports.filter((report) => true));\n","import { SELECTION_TYPES } from './CardConfig';\n\nexport const DASHBOARD_SETTINGS = {\n  editable: {\n    label: 'Editable',\n    type: SELECTION_TYPES.LIST,\n    values: [true, false],\n    default: true,\n    helperText:\n      'This controls whether users can edit your dashboard. Disable this to turn the dashboard into presentation mode.',\n  },\n  queryTimeLimit: {\n    label: 'Maximum Query Time (seconds)',\n    type: SELECTION_TYPES.NUMBER,\n    default: 45,\n    helperText: 'The maximum time a report is allowed to run before automatically aborted.',\n  },\n  downloadImageEnabled: {\n    label: 'Enable Image Download',\n    type: SELECTION_TYPES.LIST,\n    values: [true, false],\n    default: false,\n    helperText: 'Shows a button in the dashboard header that lets users capture their dashboard as an image.',\n  },\n  disableRowLimiting: {\n    label: 'Disable Row Limiting ⚠️',\n    type: SELECTION_TYPES.LIST,\n    values: [true, false],\n    default: false,\n    helperText:\n      'This disables the automatic row limiting feature. When disabled, always ensure your queries are not returning too many rows.',\n  },\n  resizing: {\n    label: 'Resize Mode',\n    type: SELECTION_TYPES.LIST,\n    values: ['bottom-right', 'all'],\n    default: 'bottom-right',\n    helperText: 'These are the resize handle options shared across all reports. ',\n  },\n  darkLuma: {\n    label: 'Luma Threshold',\n    type: SELECTION_TYPES.NUMBER,\n    default: 25,\n    helperText: 'Background colors under this threshold will be considered as dark',\n  },\n  pagenumber: {\n    label: 'Page Number',\n    type: SELECTION_TYPES.NUMBER,\n    disabled: true,\n    helperText: 'This is the number of the currently selected page.',\n  },\n  parameters: {\n    label: 'Global Parameters',\n    type: SELECTION_TYPES.DICTIONARY,\n    disabled: true,\n    helperText:\n      \"These are the query parameters shared across all reports. You can set these using a 'property select' report.\",\n  },\n  extensions: {\n    label: 'Extensions',\n    type: SELECTION_TYPES.LIST,\n    multiple: true,\n    values: ['actions'],\n    default: false,\n    hidden: true,\n  },\n};\n","import React from 'react';\nimport NeoSetting from '../component/field/Setting';\nimport { DASHBOARD_SETTINGS } from '../config/DashboardConfig';\nimport { Dialog, IconButton, MenuItem } from '@neo4j-ndl/react';\nimport { Cog6ToothIconOutline } from '@neo4j-ndl/react/icons';\nimport Tooltip from '@mui/material/Tooltip/Tooltip';\n\nexport const NeoSettingsModal = ({ dashboardSettings, updateDashboardSetting }) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const settings = DASHBOARD_SETTINGS;\n  // Else, build the advanced settings view.\n  const advancedDashboardSettings = (\n    <div style={{ marginLeft: '-10px' }}>\n      {Object.keys(settings)\n        .filter((setting) => !settings[setting].hidden)\n        .map((setting) => (\n          <div key={setting}>\n            <NeoSetting\n              key={setting}\n              value={dashboardSettings[setting]}\n              type={settings[setting].type}\n              disabled={settings[setting].disabled}\n              helperText={settings[setting].helperText}\n              label={settings[setting].label}\n              defaultValue={settings[setting].default}\n              choices={settings[setting].values}\n              onChange={(e) => updateDashboardSetting(setting, e)}\n            />\n            <br />\n          </div>\n        ))}\n    </div>\n  );\n\n  return (\n    <>\n      <Tooltip title='Settings' aria-label='settings' disableInteractive>\n        <IconButton className='n-mx-1' onClick={handleClickOpen} aria-label='Settings'>\n          <Cog6ToothIconOutline />\n        </IconButton>\n      </Tooltip>\n\n      <Dialog size='large' open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n        <Dialog.Header id='form-dialog-title'>\n          <Cog6ToothIconOutline className='icon-base icon-inline text-r' />\n          Dashboard Settings\n        </Dialog.Header>\n        <Dialog.Content>\n          You can modify settings for your entire dashboard here.\n          <br />\n          <br />\n          {advancedDashboardSettings}\n          <br />\n        </Dialog.Content>\n      </Dialog>\n    </>\n  );\n};\n\nexport default NeoSettingsModal;\n","import React from 'react';\nimport type { MouseEvent, KeyboardEvent } from 'react';\nimport { MouseSensor as LibMouseSensor, KeyboardSensor as LibKeyboardSensor } from '@dnd-kit/core';\n\nexport class MouseSensor extends LibMouseSensor {\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: ({ nativeEvent: event }: MouseEvent) => {\n        return shouldHandleEvent(event.target as HTMLElement);\n      },\n    },\n  ];\n}\n\nexport class KeyboardSensor extends LibKeyboardSensor {\n  static activators = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: ({ nativeEvent: event }: KeyboardEvent<Element>) => {\n        return shouldHandleEvent(event.target as HTMLElement);\n      },\n    },\n  ];\n}\n\nfunction shouldHandleEvent(element: HTMLElement | null) {\n  let cur = element;\n\n  while (cur) {\n    if (cur?.dataset?.noDnd) {\n      return false;\n    }\n    cur = cur.parentElement;\n  }\n\n  return true;\n}\n\nexport const enterHandler = (event: React.KeyboardEvent<HTMLElement>, callback) => {\n  if (event.key === 'Enter') {\n    // 👇 Get input value\n    callback(event);\n    event.stopPropagation();\n    event.preventDefault();\n  }\n};\n\nexport const openTab = (url, target = '_blank') => {\n  window.open(url, target);\n};\n"],"names":["connect","state","ownProps","report","getReportState","id","extensions","getDashboardExtensions","editable","getDashboardIsEditable","database","getDatabase","dashboardSettings","pagenumber","globalParameters","getGlobalParameters","getSessionParameters","dispatch","onTitleUpdate","title","updateReportTitleThunk","onQueryUpdate","query","updateReportQueryThunk","onTypeUpdate","type","updateReportTypeThunk","onReportSettingUpdate","setting","value","updateReportSettingThunk","onFieldsUpdate","fields","updateFieldsThunk","onGlobalParameterUpdate","key","updateGlobalParameterThunk","onSelectionUpdate","selectable","field","updateSelectionThunk","onToggleCardSettings","open","toggleCardSettingsThunk","onReportHelpButtonPressed","setReportHelpModalOpen","onToggleReportSettings","toggleReportSettings","onDatabaseChanged","updateReportDatabaseThunk","createNotification","message","createNotificationThunk","loadDatabaseListFromNeo4j","driver","callback","loadDatabaseListFromNeo4jThunk","onRemovePressed","onClonePressed","useContext","Neo4jContext","React","databaseList","setDatabaseList","databaseListLoaded","setDatabaseListLoaded","ref","useEffect","result","index","indexOf","splice","settingsOpen","setSettingsOpen","debouncedOnToggleCardSettings","useCallback","debounce","collapseTimeout","setCollapseTimeout","useDimensions","onResize","observe","unobserve","width","height","useState","expanded","setExpanded","onToggleCardExpand","settings","undefined","autorun","active","setActive","component","className","disablestrictmodecompat","in","timeout","updateReportSetting","name","onDownloadImage","downloadComponentAsImage","selection","widthPx","heightPx","reportId","schema","reportSettings","reportSettingsOpen","advancedSettingsOpen","Content","style","document","documentElement","clientHeight","onCreatePressed","onClick","size","floating","dashboard","pages","reports","find","o","ReportItemContainer","styled","div","fullscreenEnabled","maximizeButton","IconButton","Expand","unMaximizeButton","Shrink","CardHeader","avatar","marginTop","paddingBottom","clean","Drag","Tooltip","disableInteractive","color","action","e","preventDefault","subheader","forceRunQuery","queryText","setQueryText","debouncedQueryUpdate","databaseText","setDatabaseText","debouncedDatabaseUpdate","reportTypes","getReportTypes","SettingsComponent","settingsComponent","updateCypherQuery","defaultQueryBoxComponent","language","inputMode","onExecute","onChange","placeholder","DEFAULT_CARD_SETTINGS_HELPER_TEXT_STYLE","helperText","CardContent","Dropdown","label","selectProps","newValue","Object","keys","options","map","option","menuPortalTarget","querySelector","fluid","marginLeft","marginRight","maxWidth","display","disableDatabaseSelector","objMerge","EXTENSIONS_CARD_SETTINGS_COMPONENT","filter","length","res","Component","reportType","cypherQuery","renderExtensionsComponents","reportHeight","CARD_HEADER_HEIGHT","cardSettingsHeader","cardSettingsContent","cardSettingsFooter","description","downloadImageEnabled","refreshButtonEnabled","onManualRefreshCard","parameters","text","setText","parsedText","setParsedText","editing","setEditing","descriptionModalOpen","setDescriptionModalOpen","debouncedTitleUpdate","s","p","parsed","titleParsed","replaceDashboardParameters","theme","createTheme","typography","fontFamily","allVariants","palette","primary","disabled","cardTitle","ThemeProvider","TextField","onFocus","onBlur","fullWidth","maxRows","event","target","paddingTop","variant","sx","WebkitTextFillColor","descriptionEnabled","settingsButton","refreshButton","downloadImageButton","descriptionButton","Dialog","onClose","DialogTitle","padding","float","DialogContent","minWidth","plugins","gfm","children","showOptionalSelections","selectableFields","selectables","nodeColorScheme","hideSelections","ignoreLabelColors","CardActions","position","paddingLeft","overflowX","disableSpacing","selectionIsMandatory","optional","SELECTION_TYPES","NODE_PROPERTIES","totalColors","categoricalColorSchemes","fieldSelections","i","nodeLabel","discoveredProperties","slice","properties","sort","concat","inputColor","FormControl","InputLabel","Select","labelId","backgroundColor","MenuItem","LIST","NUMBER","NUMBER_OR_DATETIME","TEXT","sortedFields","fieldsToRender","multiple","v","sel","isMulti","isClearable","ErrorBoundary","withErrorBoundary","resetTrigger","useErrorBoundary","error","resetError","stack","NeoReportWrapper","lastRunTimestamp","setFields","setGlobalParameter","getGlobalParameter","dimensions","rowLimit","queryTimeLimit","ChartType","CARD_FOOTER_HEIGHT","cardHeight","settingsSelector","fromEntries","entries","REPORT_TYPES","refresh","reduce","obj","assign","Date","now","setLastRunTimestamp","selectorChange","setSelectorChange","getLocalParameters","parse_string","drilldown","match","re","styleRules","styleParams","extensionEnabled","identifyStyleRuleParameters","formFields","formsParams","f","flat","localQueryVariables","exec","push","params","local","includes","ignoreNonDefinedParams","reportHeader","reportFooter","localParameters","drilldownLink","reportTypeHasNoFooter","withoutFooter","JSON","stringify","cardContentStyle","paddingRight","overflow","reportContent","disableRowLimiting","maxRecords","border","borderRight","connection","onConnectionUpdate","existingConnection","setExistingConnection","isEqual","useConnection","protocol","url","port","username","password","GRID_COMPACTION_TYPE","applicationGetConnection","getPageNumber","standaloneSettings","applicationGetStandaloneSettings","forceRefreshPage","onDownloadDashboardAsImage","onAboutModalOpen","resetApplication","setDriver","newDriver","createDriver","userAgent","version","content","Neo4jProvider","borderColor","minHeight","window","innerHeight","standalone","standaloneAllowLoad","standalonePassword","standalonePasswordWarningHidden","textAlign","marginBottom","dashboardTitle","getDashboardTitle","customHeader","applicationGetCustomHeader","getPages","getDashboardSettings","themeMode","getDashboardTheme","setDashboardTitle","setTheme","updateDashboardSetting","onConnectionModalOpen","setConnectionModalOpen","dashboardTitleText","setDashboardTitleText","isDarkMode","setDarkMode","checked","sunColor","DASHBOARD_HEADER_BUTTON_COLOR","moonColor","StyleConfig","getInstance","anchorEl","setAnchorEl","handleHelpMenuClose","menuOpen","Boolean","menuAboutHandler","currentTarget","anchorOrigin","horizontal","vertical","transformOrigin","examples","getExampleReports","onKeyDown","enterHandler","openTab","icon","NeoDashboardHeaderDownloadImageButton","NeoLogoutButton","standaloneMultiDatabase","applicationIsStandalone","selectPage","number","setPageNumberThunk","addPage","addPageThunk","movePage","oldIndex","newIndex","movePageThunk","canSwitchPages","setCanSwitchPages","debouncedSetCanSwitchPages","pageAddButton","mouseSensor","useSensor","MouseSensor","activationConstraint","distance","keySensor","KeyboardSensor","keyboardCodes","start","cancel","end","sensors","useSensors","fill","tabId","onDragEnd","over","parseInt","split","items","strategy","horizontalListSortingStrategy","page","tabIndex","setPageTitle","removePage","removePageThunk","deleteModalOpen","setDeleteModalOpen","inputWidth","setInputWidth","handleMenuEditClick","useSortable","attributes","listeners","setNodeRef","transform","transition","isDragging","isSorting","CSS","Transform","toString","debouncedSetPageTitle","titleText","setTitleText","onSubmit","autoFocus","scrollWidth","classnames","stopPropagation","modalOpen","onRemove","handleClose","setDraft","debouncedDashboardTitleUpdate","fontSize","fontWeight","EXTENSIONS_DRAWER_BUTTONS","renderExtensionsButtons","closeMenu","Menu","Modal","UNSAVED_DASHBOARD_INDEX","readonly","draft","dashboardIsDraft","getDashboardJson","applicationGetConnectionDatabase","removeReportThunk","resetLocalDashboard","resetDashboardState","loadDashboard","uuid","loadDashboardThunk","loadDashboardFromNeo4j","loadDashboardFromNeo4jThunk","loadDashboardListFromNeo4j","loadDashboardListFromNeo4jThunk","saveDashboardToNeo4j","date","user","onSuccess","saveDashboardToNeo4jThunk","deleteDashboardFromNeo4j","deleteDashboardFromNeo4jThunk","setOnExpanded","selectedDashboardIndex","setSelectedDashboardIndex","dashboardDatabase","setDashboardDatabase","databases","setDatabases","inspectedIndex","setInspectedIndex","searchText","setSearchText","menuAnchor","setMenuAnchor","NONE","setMenuOpen","setModalOpen","dashboards","setDashboards","cachedDashboard","setCachedDashboard","getDashboardListFromNeo4j","list","findIndex","element","createDashboard","SAVE","onConfirm","toISOString","setTimeout","overwrite","LOAD","file","SHARE","onLegacyShareClicked","SHARE_LEGACY","CREATE","DELETE","IMPORT","onImport","createUUID","INFO","EXPORT","ACCESS","onExpandedChange","dispatchEvent","Event","selected","setSelected","newDatabase","DATABASE","DASHBOARD","handleInfoClicked","d","parse","handleDiscardClicked","handleSaveClicked","handleLoadClicked","handleExportClicked","handleShareClicked","handleAccessClicked","handleDeleteClicked","handleNewClicked","handleImportClicked","lineHeight","standaloneLoadFromOtherDatabases","standaloneDatabaseList","tmp","x","trim","leftIcon","NEODASH_VERSION","saved","onSelect","onSettingsOpen","toLowerCase","DashboardSidebarListItem","whiteSpace","justifyContent","borderWidth","borderStyle","borderRadius","selectedLabels","setSelectedLabels","allLabels","setAllLabels","neo4jLabels","setNeo4jLabels","newLabel","setNewLabel","INITIAL_LABEL","feedback","setFeedback","useDispatch","runCypherQuery","records","record","get","console","handleCloseMenu","handleLabelSelect","Header","href","rel","textDecoration","handleAddNewLabel","errorText","autoComplete","flexWrap","alignItems","onDelete","updatedLabels","selectedLabel","handleDeleteLabel","Actions","toDelete","item","join","status","QueryStatus","COMPLETE","Subtitle","filteredDashboard","filterNestedDict","removedKeys","valueIsArray","valueIsObject","forEach","k","dashboardString","createElement","Blob","URL","createObjectURL","download","body","appendChild","click","loadFromFile","useRef","onSelectFileClick","files","current","hidden","columns","headerName","rows","author","pageSize","rowsPerPageOptions","disableSelectionOnClick","headerHeight","hideFooter","components","ColumnSortedDescendingIcon","ColumnSortedAscendingIcon","shareBaseURL","shareBaseURLAlternative","shareLocalURL","location","origin","startsWith","selfHosted","setSelfHosted","setStandalone","includeCredentials","setIncludeCredentials","getShareURL","prefix","encodeURIComponent","db","suffix1","suffix2","externalLink","shareType","shareID","setShareID","shareConnectionDetails","setShareConnectionDetails","shareStandalone","setShareStandalone","shareLink","setShareLink","defaultValue","choices","setExtensionEnabled","enabled","setExtensionReducerEnabled","onExtensionUnavailableTriggered","setOpen","values","EXTENSIONS","opacity","reducerPrefix","valign","link","src","image","NeoDeletePageModal","NeoReportExamplesModal","handleClickOpen","example","exampleQuery","syntheticQuery","chartType","ResponsiveGridLayout","WidthProvider","Responsive","getReports","y","cloneReportThunk","addReportThunk","onPageLayoutUpdate","layout","updatePageLayoutThunk","getReportKey","defaultLayouts","lg","w","h","isDraggable","setIsDragging","layouts","setLayouts","lastElement","setLastElement","animated","setAnimated","getAddCardButtonPosition","maxY","Math","max","apply","maxXbyYLevel","level","recomputeLayout","minW","minH","resizeHandles","resizing","isResizable","draggableHandle","breakpoints","md","sm","xs","xxs","cols","rowHeight","compactType","onDrag","onDragStop","newLayout","onResizeStop","min","xl","createSelector","DASHBOARD_SETTINGS","default","darkLuma","DICTIONARY","advancedDashboardSettings","LibMouseSensor","eventName","handler","nativeEvent","shouldHandleEvent","LibKeyboardSensor","cur","dataset","noDnd","parentElement"],"sourceRoot":""}